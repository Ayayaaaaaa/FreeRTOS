
TempsReel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014d8  0800613c  0800613c  0001613c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007614  08007614  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007614  08007614  00017614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800761c  0800761c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007620  08007620  00017620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f08  2000007c  080076a0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005f84  080076a0  00025f84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018040  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000325c  00000000  00000000  000380ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  0003b348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  0003c6a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000253d3  00000000  00000000  0003d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101fb  00000000  00000000  00062c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2a94  00000000  00000000  00072e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00155902  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005374  00000000  00000000  00155980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006124 	.word	0x08006124

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006124 	.word	0x08006124

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000098 	.word	0x20000098
 80005f0:	200000f4 	.word	0x200000f4

080005f4 <VirtualCOM_Transmit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PRINTF(...) VirtualCOM_Transmit(__VA_ARGS__)

void VirtualCOM_Transmit( char *format, ... ) {
 80005f4:	b40f      	push	{r0, r1, r2, r3}
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b0a2      	sub	sp, #136	; 0x88
 80005fa:	af00      	add	r7, sp, #0
	char buffer[128];
	uint32_t i=0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	va_list args;
	va_start(args, format);
 8000602:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000606:	603b      	str	r3, [r7, #0]
	vsprintf(buffer,format,args);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000610:	4618      	mov	r0, r3
 8000612:	f005 f9a1 	bl	8005958 <vsiprintf>

	for(i=0;i<strlen(buffer);i++) {
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800061c:	e014      	b.n	8000648 <VirtualCOM_Transmit+0x54>
		while( ((huart2.Instance->SR) & UART_FLAG_TXE) == 0 );
 800061e:	bf00      	nop
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <VirtualCOM_Transmit+0x74>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f8      	beq.n	8000620 <VirtualCOM_Transmit+0x2c>
		huart2.Instance->DR=buffer[i];
 800062e:	1d3a      	adds	r2, r7, #4
 8000630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000634:	4413      	add	r3, r2
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <VirtualCOM_Transmit+0x74>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
	for(i=0;i<strlen(buffer);i++) {
 800063e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000642:	3301      	adds	r3, #1
 8000644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fde0 	bl	8000210 <strlen>
 8000650:	4602      	mov	r2, r0
 8000652:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000656:	4293      	cmp	r3, r2
 8000658:	d3e1      	bcc.n	800061e <VirtualCOM_Transmit+0x2a>
	}
	va_end(args);
}
 800065a:	bf00      	nop
 800065c:	3788      	adds	r7, #136	; 0x88
 800065e:	46bd      	mov	sp, r7
 8000660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr
 8000668:	200045e0 	.word	0x200045e0

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 fac5 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f81f 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f8b5 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800067e:	f000 f889 	bl	8000794 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  vTraceEnable(TRC_START);
 8000682:	2001      	movs	r0, #1
 8000684:	f003 fdce 	bl	8004224 <vTraceEnable>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledBlink */
  osThreadDef(ledBlink, ledBlinkTask, osPriorityNormal, 0, 128);
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <main+0x44>)
 800068a:	1d3c      	adds	r4, r7, #4
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledBlinkHandle = osThreadCreate(osThread(ledBlink), NULL);
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 f905 	bl	80028ae <osThreadCreate>
 80006a4:	4602      	mov	r2, r0
 80006a6:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <main+0x48>)
 80006a8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006aa:	f002 f8f9 	bl	80028a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <main+0x42>
 80006b0:	08006148 	.word	0x08006148
 80006b4:	200045dc 	.word	0x200045dc

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2234      	movs	r2, #52	; 0x34
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 f927 	bl	800591a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b2a      	ldr	r3, [pc, #168]	; (800078c <SystemClock_Config+0xd4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a29      	ldr	r2, [pc, #164]	; (800078c <SystemClock_Config+0xd4>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <SystemClock_Config+0xd4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <SystemClock_Config+0xd8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000704:	4a22      	ldr	r2, [pc, #136]	; (8000790 <SystemClock_Config+0xd8>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemClock_Config+0xd8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800072c:	2310      	movs	r3, #16
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000730:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000734:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000736:	2304      	movs	r3, #4
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073e:	2302      	movs	r3, #2
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f830 	bl	80017ac <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000752:	f000 f8eb 	bl	800092c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2102      	movs	r1, #2
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fd2e 	bl	80011d4 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800077e:	f000 f8d5 	bl	800092c <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	; 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_USART2_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007cc:	f001 fc86 	bl	80020dc <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 f8a9 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200045e0 	.word	0x200045e0
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a2c      	ldr	r2, [pc, #176]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	4812      	ldr	r0, [pc, #72]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000874:	f000 fc7a 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_GPIO_Init+0xd8>)
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <MX_GPIO_Init+0xdc>)
 800088e:	f000 fadb 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000892:	2320      	movs	r3, #32
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0xd4>)
 80008aa:	f000 facd 	bl	8000e48 <HAL_GPIO_Init>

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000
 80008c0:	10210000 	.word	0x10210000
 80008c4:	40020800 	.word	0x40020800

080008c8 <ledBlinkTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ledBlinkTask */
void ledBlinkTask(void const * argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	static uint8_t count = 0, len = 0, str[100];
  /* Infinite loop */
  for(;;)
  {

	  PRINTF("Coucou %d\r\n", count);
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <ledBlinkTask+0x34>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	480a      	ldr	r0, [pc, #40]	; (8000900 <ledBlinkTask+0x38>)
 80008d8:	f7ff fe8c 	bl	80005f4 <VirtualCOM_Transmit>
	  //len = sprintf(str, "CTP : %d\r\n", count);
	  //HAL_UART_Transmit(&huart2, str, len, 100);
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008dc:	2120      	movs	r1, #32
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <ledBlinkTask+0x3c>)
 80008e0:	f000 fc5d 	bl	800119e <HAL_GPIO_TogglePin>
	  osDelay(500);
 80008e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e8:	f002 f82d 	bl	8002946 <osDelay>
	  count++;
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <ledBlinkTask+0x34>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b01      	ldr	r3, [pc, #4]	; (80008fc <ledBlinkTask+0x34>)
 80008f6:	701a      	strb	r2, [r3, #0]
	  PRINTF("Coucou %d\r\n", count);
 80008f8:	e7ea      	b.n	80008d0 <ledBlinkTask+0x8>
 80008fa:	bf00      	nop
 80008fc:	200002f4 	.word	0x200002f4
 8000900:	08006164 	.word	0x08006164
 8000904:	40020000 	.word	0x40020000

08000908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d101      	bne.n	800091e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091a:	f000 f993 	bl	8000c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40010000 	.word	0x40010000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <HAL_MspInit+0x4c>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_MspInit+0x4c>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <HAL_UART_MspInit+0x84>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d12b      	bne.n	8000a06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_UART_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e6:	230c      	movs	r3, #12
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f6:	2307      	movs	r3, #7
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <HAL_UART_MspInit+0x8c>)
 8000a02:	f000 fa21 	bl	8000e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40004400 	.word	0x40004400
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020000 	.word	0x40020000

08000a1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	2019      	movs	r0, #25
 8000a32:	f000 f9df 	bl	8000df4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a36:	2019      	movs	r0, #25
 8000a38:	f000 f9f8 	bl	8000e2c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <HAL_InitTick+0xa0>)
 8000a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a44:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <HAL_InitTick+0xa0>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <HAL_InitTick+0xa0>)
 8000a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a58:	f107 0210 	add.w	r2, r7, #16
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fcd0 	bl	8001408 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a68:	f000 fcba 	bl	80013e0 <HAL_RCC_GetPCLK2Freq>
 8000a6c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a70:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <HAL_InitTick+0xa4>)
 8000a72:	fba2 2303 	umull	r2, r3, r2, r3
 8000a76:	0c9b      	lsrs	r3, r3, #18
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <HAL_InitTick+0xac>)
 8000a80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000a84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000a9e:	f001 f8df 	bl	8001c60 <HAL_TIM_Base_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d104      	bne.n	8000ab2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000aa8:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000aaa:	f001 f90e 	bl	8001cca <HAL_TIM_Base_Start_IT>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3730      	adds	r7, #48	; 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	431bde83 	.word	0x431bde83
 8000ac4:	20004620 	.word	0x20004620
 8000ac8:	40010000 	.word	0x40010000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b06:	f001 f904 	bl	8001d12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20004620 	.word	0x20004620

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d207      	bcs.n	8000b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b44:	f004 feb4 	bl	80058b0 <__errno>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	e009      	b.n	8000b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <_sbrk+0x64>)
 8000b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20020000 	.word	0x20020000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	200002f8 	.word	0x200002f8
 8000b7c:	20005f88 	.word	0x20005f88

08000b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <SystemInit+0x28>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <SystemInit+0x28>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SystemInit+0x28>)
 8000b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bb2:	e003      	b.n	8000bbc <LoopCopyDataInit>

08000bb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bba:	3104      	adds	r1, #4

08000bbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bc4:	d3f6      	bcc.n	8000bb4 <CopyDataInit>
  ldr  r2, =_sbss
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bc8:	e002      	b.n	8000bd0 <LoopFillZerobss>

08000bca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bcc:	f842 3b04 	str.w	r3, [r2], #4

08000bd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bd4:	d3f9      	bcc.n	8000bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bd6:	f7ff ffd3 	bl	8000b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f004 fe6f 	bl	80058bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fd45 	bl	800066c <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000be8:	08007624 	.word	0x08007624
  ldr  r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bf0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000bf4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000bf8:	20005f84 	.word	0x20005f84

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f8d8 	bl	8000dde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff fef4 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fe82 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20004660 	.word	0x20004660

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20004660 	.word	0x20004660

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff4c 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e06:	f7ff ff61 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	6978      	ldr	r0, [r7, #20]
 8000e12:	f7ff ffb1 	bl	8000d78 <NVIC_EncodePriority>
 8000e16:	4602      	mov	r2, r0
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff80 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff54 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	e165      	b.n	8001130 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 8154 	bne.w	800112a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d00b      	beq.n	8000ea2 <HAL_GPIO_Init+0x5a>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d007      	beq.n	8000ea2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e96:	2b11      	cmp	r3, #17
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d130      	bne.n	8000f04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	091b      	lsrs	r3, r3, #4
 8000eee:	f003 0201 	and.w	r2, r3, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0xfc>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b12      	cmp	r3, #18
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	69b9      	ldr	r1, [r7, #24]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80ae 	beq.w	800112a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b5c      	ldr	r3, [pc, #368]	; (8001144 <HAL_GPIO_Init+0x2fc>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a5b      	ldr	r2, [pc, #364]	; (8001144 <HAL_GPIO_Init+0x2fc>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b59      	ldr	r3, [pc, #356]	; (8001144 <HAL_GPIO_Init+0x2fc>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fea:	4a57      	ldr	r2, [pc, #348]	; (8001148 <HAL_GPIO_Init+0x300>)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4e      	ldr	r2, [pc, #312]	; (800114c <HAL_GPIO_Init+0x304>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d025      	beq.n	8001062 <HAL_GPIO_Init+0x21a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4d      	ldr	r2, [pc, #308]	; (8001150 <HAL_GPIO_Init+0x308>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d01f      	beq.n	800105e <HAL_GPIO_Init+0x216>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4c      	ldr	r2, [pc, #304]	; (8001154 <HAL_GPIO_Init+0x30c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d019      	beq.n	800105a <HAL_GPIO_Init+0x212>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4b      	ldr	r2, [pc, #300]	; (8001158 <HAL_GPIO_Init+0x310>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d013      	beq.n	8001056 <HAL_GPIO_Init+0x20e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4a      	ldr	r2, [pc, #296]	; (800115c <HAL_GPIO_Init+0x314>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d00d      	beq.n	8001052 <HAL_GPIO_Init+0x20a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a49      	ldr	r2, [pc, #292]	; (8001160 <HAL_GPIO_Init+0x318>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d007      	beq.n	800104e <HAL_GPIO_Init+0x206>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a48      	ldr	r2, [pc, #288]	; (8001164 <HAL_GPIO_Init+0x31c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d101      	bne.n	800104a <HAL_GPIO_Init+0x202>
 8001046:	2306      	movs	r3, #6
 8001048:	e00c      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 800104a:	2307      	movs	r3, #7
 800104c:	e00a      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 800104e:	2305      	movs	r3, #5
 8001050:	e008      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 8001052:	2304      	movs	r3, #4
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x21c>
 8001062:	2300      	movs	r3, #0
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001074:	4934      	ldr	r1, [pc, #208]	; (8001148 <HAL_GPIO_Init+0x300>)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <HAL_GPIO_Init+0x320>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a6:	4a30      	ldr	r2, [pc, #192]	; (8001168 <HAL_GPIO_Init+0x320>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ac:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <HAL_GPIO_Init+0x320>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d0:	4a25      	ldr	r2, [pc, #148]	; (8001168 <HAL_GPIO_Init+0x320>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b24      	ldr	r3, [pc, #144]	; (8001168 <HAL_GPIO_Init+0x320>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <HAL_GPIO_Init+0x320>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_GPIO_Init+0x320>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_GPIO_Init+0x320>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3301      	adds	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	f67f ae96 	bls.w	8000e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001138:	bf00      	nop
 800113a:	3724      	adds	r7, #36	; 0x24
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40023800 	.word	0x40023800
 8001148:	40013800 	.word	0x40013800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400
 8001154:	40020800 	.word	0x40020800
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40021000 	.word	0x40021000
 8001160:	40021400 	.word	0x40021400
 8001164:	40021800 	.word	0x40021800
 8001168:	40013c00 	.word	0x40013c00

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001188:	e003      	b.n	8001192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	041a      	lsls	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	619a      	str	r2, [r3, #24]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	401a      	ands	r2, r3
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d104      	bne.n	80011c2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	041a      	lsls	r2, r3, #16
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0cc      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b68      	ldr	r3, [pc, #416]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d90c      	bls.n	8001210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b65      	ldr	r3, [pc, #404]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fe:	4b63      	ldr	r3, [pc, #396]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0b8      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001228:	4b59      	ldr	r3, [pc, #356]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4a58      	ldr	r2, [pc, #352]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001232:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001240:	4b53      	ldr	r3, [pc, #332]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800124a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800124c:	4b50      	ldr	r3, [pc, #320]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	494d      	ldr	r1, [pc, #308]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d044      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b47      	ldr	r3, [pc, #284]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e07f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d003      	beq.n	8001292 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800128e:	2b03      	cmp	r3, #3
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001292:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e06f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e067      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f023 0203 	bic.w	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4934      	ldr	r1, [pc, #208]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c4:	f7ff fcd2 	bl	8000c6c <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012cc:	f7ff fcce 	bl	8000c6c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e04f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 020c 	and.w	r2, r3, #12
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d1eb      	bne.n	80012cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d20c      	bcs.n	800131c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_RCC_ClockConfig+0x1b8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e032      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4916      	ldr	r1, [pc, #88]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	490e      	ldr	r1, [pc, #56]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	4313      	orrs	r3, r2
 8001358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800135a:	f000 f887 	bl	800146c <HAL_RCC_GetSysClockFreq>
 800135e:	4601      	mov	r1, r0
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	fa21 f303 	lsr.w	r3, r1, r3
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_RCC_ClockConfig+0x1c8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fb4e 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023c00 	.word	0x40023c00
 8001390:	40023800 	.word	0x40023800
 8001394:	080075c8 	.word	0x080075c8
 8001398:	20000000 	.word	0x20000000
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000000 	.word	0x20000000

080013b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013bc:	f7ff fff0 	bl	80013a0 <HAL_RCC_GetHCLKFreq>
 80013c0:	4601      	mov	r1, r0
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	0a9b      	lsrs	r3, r3, #10
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ce:	5cd3      	ldrb	r3, [r2, r3]
 80013d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	080075d8 	.word	0x080075d8

080013e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013e4:	f7ff ffdc 	bl	80013a0 <HAL_RCC_GetHCLKFreq>
 80013e8:	4601      	mov	r1, r0
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	0b5b      	lsrs	r3, r3, #13
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	4a03      	ldr	r2, [pc, #12]	; (8001404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	080075d8 	.word	0x080075d8

08001408 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	220f      	movs	r2, #15
 8001416:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	08db      	lsrs	r3, r3, #3
 8001442:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <HAL_RCC_GetClockConfig+0x60>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 020f 	and.w	r2, r3, #15
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	601a      	str	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40023c00 	.word	0x40023c00

0800146c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001486:	4bc6      	ldr	r3, [pc, #792]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b0c      	cmp	r3, #12
 8001490:	f200 817e 	bhi.w	8001790 <HAL_RCC_GetSysClockFreq+0x324>
 8001494:	a201      	add	r2, pc, #4	; (adr r2, 800149c <HAL_RCC_GetSysClockFreq+0x30>)
 8001496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149a:	bf00      	nop
 800149c:	080014d1 	.word	0x080014d1
 80014a0:	08001791 	.word	0x08001791
 80014a4:	08001791 	.word	0x08001791
 80014a8:	08001791 	.word	0x08001791
 80014ac:	080014d7 	.word	0x080014d7
 80014b0:	08001791 	.word	0x08001791
 80014b4:	08001791 	.word	0x08001791
 80014b8:	08001791 	.word	0x08001791
 80014bc:	080014dd 	.word	0x080014dd
 80014c0:	08001791 	.word	0x08001791
 80014c4:	08001791 	.word	0x08001791
 80014c8:	08001791 	.word	0x08001791
 80014cc:	08001639 	.word	0x08001639
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014d0:	4bb4      	ldr	r3, [pc, #720]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x338>)
 80014d2:	613b      	str	r3, [r7, #16]
       break;
 80014d4:	e15f      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014d6:	4bb4      	ldr	r3, [pc, #720]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x33c>)
 80014d8:	613b      	str	r3, [r7, #16]
      break;
 80014da:	e15c      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014dc:	4bb0      	ldr	r3, [pc, #704]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x334>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e6:	4bae      	ldr	r3, [pc, #696]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x334>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d04a      	beq.n	8001588 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f2:	4bab      	ldr	r3, [pc, #684]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x334>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	099b      	lsrs	r3, r3, #6
 80014f8:	f04f 0400 	mov.w	r4, #0
 80014fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	ea03 0501 	and.w	r5, r3, r1
 8001508:	ea04 0602 	and.w	r6, r4, r2
 800150c:	4629      	mov	r1, r5
 800150e:	4632      	mov	r2, r6
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f04f 0400 	mov.w	r4, #0
 8001518:	0154      	lsls	r4, r2, #5
 800151a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800151e:	014b      	lsls	r3, r1, #5
 8001520:	4619      	mov	r1, r3
 8001522:	4622      	mov	r2, r4
 8001524:	1b49      	subs	r1, r1, r5
 8001526:	eb62 0206 	sbc.w	r2, r2, r6
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	f04f 0400 	mov.w	r4, #0
 8001532:	0194      	lsls	r4, r2, #6
 8001534:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001538:	018b      	lsls	r3, r1, #6
 800153a:	1a5b      	subs	r3, r3, r1
 800153c:	eb64 0402 	sbc.w	r4, r4, r2
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	00e2      	lsls	r2, r4, #3
 800154a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800154e:	00d9      	lsls	r1, r3, #3
 8001550:	460b      	mov	r3, r1
 8001552:	4614      	mov	r4, r2
 8001554:	195b      	adds	r3, r3, r5
 8001556:	eb44 0406 	adc.w	r4, r4, r6
 800155a:	f04f 0100 	mov.w	r1, #0
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	0262      	lsls	r2, r4, #9
 8001564:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001568:	0259      	lsls	r1, r3, #9
 800156a:	460b      	mov	r3, r1
 800156c:	4614      	mov	r4, r2
 800156e:	4618      	mov	r0, r3
 8001570:	4621      	mov	r1, r4
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f04f 0400 	mov.w	r4, #0
 8001578:	461a      	mov	r2, r3
 800157a:	4623      	mov	r3, r4
 800157c:	f7fe fea0 	bl	80002c0 <__aeabi_uldivmod>
 8001580:	4603      	mov	r3, r0
 8001582:	460c      	mov	r4, r1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	e049      	b.n	800161c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001588:	4b85      	ldr	r3, [pc, #532]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x334>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	099b      	lsrs	r3, r3, #6
 800158e:	f04f 0400 	mov.w	r4, #0
 8001592:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	ea03 0501 	and.w	r5, r3, r1
 800159e:	ea04 0602 	and.w	r6, r4, r2
 80015a2:	4629      	mov	r1, r5
 80015a4:	4632      	mov	r2, r6
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	f04f 0400 	mov.w	r4, #0
 80015ae:	0154      	lsls	r4, r2, #5
 80015b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015b4:	014b      	lsls	r3, r1, #5
 80015b6:	4619      	mov	r1, r3
 80015b8:	4622      	mov	r2, r4
 80015ba:	1b49      	subs	r1, r1, r5
 80015bc:	eb62 0206 	sbc.w	r2, r2, r6
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	f04f 0400 	mov.w	r4, #0
 80015c8:	0194      	lsls	r4, r2, #6
 80015ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015ce:	018b      	lsls	r3, r1, #6
 80015d0:	1a5b      	subs	r3, r3, r1
 80015d2:	eb64 0402 	sbc.w	r4, r4, r2
 80015d6:	f04f 0100 	mov.w	r1, #0
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	00e2      	lsls	r2, r4, #3
 80015e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015e4:	00d9      	lsls	r1, r3, #3
 80015e6:	460b      	mov	r3, r1
 80015e8:	4614      	mov	r4, r2
 80015ea:	195b      	adds	r3, r3, r5
 80015ec:	eb44 0406 	adc.w	r4, r4, r6
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	02a2      	lsls	r2, r4, #10
 80015fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80015fe:	0299      	lsls	r1, r3, #10
 8001600:	460b      	mov	r3, r1
 8001602:	4614      	mov	r4, r2
 8001604:	4618      	mov	r0, r3
 8001606:	4621      	mov	r1, r4
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f04f 0400 	mov.w	r4, #0
 800160e:	461a      	mov	r2, r3
 8001610:	4623      	mov	r3, r4
 8001612:	f7fe fe55 	bl	80002c0 <__aeabi_uldivmod>
 8001616:	4603      	mov	r3, r0
 8001618:	460c      	mov	r4, r1
 800161a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800161c:	4b60      	ldr	r3, [pc, #384]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x334>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	0c1b      	lsrs	r3, r3, #16
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	3301      	adds	r3, #1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	fbb2 f3f3 	udiv	r3, r2, r3
 8001634:	613b      	str	r3, [r7, #16]
      break;
 8001636:	e0ae      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001638:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x334>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001640:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001642:	4b57      	ldr	r3, [pc, #348]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d04a      	beq.n	80016e4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164e:	4b54      	ldr	r3, [pc, #336]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	099b      	lsrs	r3, r3, #6
 8001654:	f04f 0400 	mov.w	r4, #0
 8001658:	f240 11ff 	movw	r1, #511	; 0x1ff
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	ea03 0501 	and.w	r5, r3, r1
 8001664:	ea04 0602 	and.w	r6, r4, r2
 8001668:	4629      	mov	r1, r5
 800166a:	4632      	mov	r2, r6
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	f04f 0400 	mov.w	r4, #0
 8001674:	0154      	lsls	r4, r2, #5
 8001676:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800167a:	014b      	lsls	r3, r1, #5
 800167c:	4619      	mov	r1, r3
 800167e:	4622      	mov	r2, r4
 8001680:	1b49      	subs	r1, r1, r5
 8001682:	eb62 0206 	sbc.w	r2, r2, r6
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	f04f 0400 	mov.w	r4, #0
 800168e:	0194      	lsls	r4, r2, #6
 8001690:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001694:	018b      	lsls	r3, r1, #6
 8001696:	1a5b      	subs	r3, r3, r1
 8001698:	eb64 0402 	sbc.w	r4, r4, r2
 800169c:	f04f 0100 	mov.w	r1, #0
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	00e2      	lsls	r2, r4, #3
 80016a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016aa:	00d9      	lsls	r1, r3, #3
 80016ac:	460b      	mov	r3, r1
 80016ae:	4614      	mov	r4, r2
 80016b0:	195b      	adds	r3, r3, r5
 80016b2:	eb44 0406 	adc.w	r4, r4, r6
 80016b6:	f04f 0100 	mov.w	r1, #0
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	0262      	lsls	r2, r4, #9
 80016c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80016c4:	0259      	lsls	r1, r3, #9
 80016c6:	460b      	mov	r3, r1
 80016c8:	4614      	mov	r4, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	4621      	mov	r1, r4
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f04f 0400 	mov.w	r4, #0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4623      	mov	r3, r4
 80016d8:	f7fe fdf2 	bl	80002c0 <__aeabi_uldivmod>
 80016dc:	4603      	mov	r3, r0
 80016de:	460c      	mov	r4, r1
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e049      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e4:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x334>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	099b      	lsrs	r3, r3, #6
 80016ea:	f04f 0400 	mov.w	r4, #0
 80016ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	ea03 0501 	and.w	r5, r3, r1
 80016fa:	ea04 0602 	and.w	r6, r4, r2
 80016fe:	4629      	mov	r1, r5
 8001700:	4632      	mov	r2, r6
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	f04f 0400 	mov.w	r4, #0
 800170a:	0154      	lsls	r4, r2, #5
 800170c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001710:	014b      	lsls	r3, r1, #5
 8001712:	4619      	mov	r1, r3
 8001714:	4622      	mov	r2, r4
 8001716:	1b49      	subs	r1, r1, r5
 8001718:	eb62 0206 	sbc.w	r2, r2, r6
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	f04f 0400 	mov.w	r4, #0
 8001724:	0194      	lsls	r4, r2, #6
 8001726:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800172a:	018b      	lsls	r3, r1, #6
 800172c:	1a5b      	subs	r3, r3, r1
 800172e:	eb64 0402 	sbc.w	r4, r4, r2
 8001732:	f04f 0100 	mov.w	r1, #0
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	00e2      	lsls	r2, r4, #3
 800173c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001740:	00d9      	lsls	r1, r3, #3
 8001742:	460b      	mov	r3, r1
 8001744:	4614      	mov	r4, r2
 8001746:	195b      	adds	r3, r3, r5
 8001748:	eb44 0406 	adc.w	r4, r4, r6
 800174c:	f04f 0100 	mov.w	r1, #0
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	02a2      	lsls	r2, r4, #10
 8001756:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800175a:	0299      	lsls	r1, r3, #10
 800175c:	460b      	mov	r3, r1
 800175e:	4614      	mov	r4, r2
 8001760:	4618      	mov	r0, r3
 8001762:	4621      	mov	r1, r4
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f04f 0400 	mov.w	r4, #0
 800176a:	461a      	mov	r2, r3
 800176c:	4623      	mov	r3, r4
 800176e:	f7fe fda7 	bl	80002c0 <__aeabi_uldivmod>
 8001772:	4603      	mov	r3, r0
 8001774:	460c      	mov	r4, r1
 8001776:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x334>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	0f1b      	lsrs	r3, r3, #28
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	fbb2 f3f3 	udiv	r3, r2, r3
 800178c:	613b      	str	r3, [r7, #16]
      break;
 800178e:	e002      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x338>)
 8001792:	613b      	str	r3, [r7, #16]
      break;
 8001794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001796:	693b      	ldr	r3, [r7, #16]
}
 8001798:	4618      	mov	r0, r3
 800179a:	371c      	adds	r7, #28
 800179c:	46bd      	mov	sp, r7
 800179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	00f42400 	.word	0x00f42400
 80017a8:	007a1200 	.word	0x007a1200

080017ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 8083 	beq.w	80018cc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017c6:	4b95      	ldr	r3, [pc, #596]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d019      	beq.n	8001806 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017d2:	4b92      	ldr	r3, [pc, #584]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d106      	bne.n	80017ec <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017de:	4b8f      	ldr	r3, [pc, #572]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ea:	d00c      	beq.n	8001806 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ec:	4b8b      	ldr	r3, [pc, #556]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	d112      	bne.n	800181e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f8:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001804:	d10b      	bne.n	800181e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001806:	4b85      	ldr	r3, [pc, #532]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d05b      	beq.n	80018ca <HAL_RCC_OscConfig+0x11e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d157      	bne.n	80018ca <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e216      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x8a>
 8001828:	4b7c      	ldr	r3, [pc, #496]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a7b      	ldr	r2, [pc, #492]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 800182e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	e01d      	b.n	8001872 <HAL_RCC_OscConfig+0xc6>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800183e:	d10c      	bne.n	800185a <HAL_RCC_OscConfig+0xae>
 8001840:	4b76      	ldr	r3, [pc, #472]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a75      	ldr	r2, [pc, #468]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b73      	ldr	r3, [pc, #460]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a72      	ldr	r2, [pc, #456]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e00b      	b.n	8001872 <HAL_RCC_OscConfig+0xc6>
 800185a:	4b70      	ldr	r3, [pc, #448]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a6f      	ldr	r2, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b6d      	ldr	r3, [pc, #436]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a6c      	ldr	r2, [pc, #432]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 800186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d013      	beq.n	80018a2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff f9f7 	bl	8000c6c <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001882:	f7ff f9f3 	bl	8000c6c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b64      	cmp	r3, #100	; 0x64
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e1db      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001894:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0xd6>
 80018a0:	e014      	b.n	80018cc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff f9e3 	bl	8000c6c <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018aa:	f7ff f9df 	bl	8000c6c <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b64      	cmp	r3, #100	; 0x64
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1c7      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018bc:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0xfe>
 80018c8:	e000      	b.n	80018cc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d06f      	beq.n	80019b8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018d8:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d017      	beq.n	8001914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018e4:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d105      	bne.n	80018fc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018f0:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00b      	beq.n	8001914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fc:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001904:	2b0c      	cmp	r3, #12
 8001906:	d11c      	bne.n	8001942 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001908:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d116      	bne.n	8001942 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001914:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_OscConfig+0x180>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d001      	beq.n	800192c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e18f      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192c:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4938      	ldr	r1, [pc, #224]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001940:	e03a      	b.n	80019b8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d020      	beq.n	800198c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800194a:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f98c 	bl	8000c6c <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff f988 	bl	8000c6c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e170      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4925      	ldr	r1, [pc, #148]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
 800198a:	e015      	b.n	80019b8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_OscConfig+0x274>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff f96b 	bl	8000c6c <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800199a:	f7ff f967 	bl	8000c6c <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e14f      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f0      	bne.n	800199a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d037      	beq.n	8001a34 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d016      	beq.n	80019fa <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_RCC_OscConfig+0x278>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d2:	f7ff f94b 	bl	8000c6c <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff f947 	bl	8000c6c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e12f      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_OscConfig+0x270>)
 80019ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x22e>
 80019f8:	e01c      	b.n	8001a34 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_RCC_OscConfig+0x278>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a00:	f7ff f934 	bl	8000c6c <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a06:	e00f      	b.n	8001a28 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a08:	f7ff f930 	bl	8000c6c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d908      	bls.n	8001a28 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e118      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	42470000 	.word	0x42470000
 8001a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a28:	4b8a      	ldr	r3, [pc, #552]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1e9      	bne.n	8001a08 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8097 	beq.w	8001b70 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a46:	4b83      	ldr	r3, [pc, #524]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10f      	bne.n	8001a72 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b7f      	ldr	r3, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a7e      	ldr	r2, [pc, #504]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b7c      	ldr	r3, [pc, #496]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a72:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d118      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7e:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a75      	ldr	r2, [pc, #468]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f8ef 	bl	8000c6c <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a92:	f7ff f8eb 	bl	8000c6c <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e0d3      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa4:	4b6c      	ldr	r3, [pc, #432]	; (8001c58 <HAL_RCC_OscConfig+0x4ac>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x31a>
 8001ab8:	4b66      	ldr	r3, [pc, #408]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	4a65      	ldr	r2, [pc, #404]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac4:	e01c      	b.n	8001b00 <HAL_RCC_OscConfig+0x354>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x33c>
 8001ace:	4b61      	ldr	r3, [pc, #388]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad2:	4a60      	ldr	r2, [pc, #384]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ada:	4b5e      	ldr	r3, [pc, #376]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	4a5d      	ldr	r2, [pc, #372]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0x354>
 8001ae8:	4b5a      	ldr	r3, [pc, #360]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	4a59      	ldr	r2, [pc, #356]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	6713      	str	r3, [r2, #112]	; 0x70
 8001af4:	4b57      	ldr	r3, [pc, #348]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af8:	4a56      	ldr	r2, [pc, #344]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001afa:	f023 0304 	bic.w	r3, r3, #4
 8001afe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d015      	beq.n	8001b34 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff f8b0 	bl	8000c6c <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7ff f8ac 	bl	8000c6c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e092      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b26:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0ee      	beq.n	8001b10 <HAL_RCC_OscConfig+0x364>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff f89a 	bl	8000c6c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7ff f896 	bl	8000c6c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e07c      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b52:	4b40      	ldr	r3, [pc, #256]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1ee      	bne.n	8001b3c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b64:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	4a3a      	ldr	r2, [pc, #232]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d068      	beq.n	8001c4a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b78:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d060      	beq.n	8001c46 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d145      	bne.n	8001c18 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8c:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <HAL_RCC_OscConfig+0x4b0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff f86b 	bl	8000c6c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff f867 	bl	8000c6c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e04f      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bac:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69da      	ldr	r2, [r3, #28]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	019b      	lsls	r3, r3, #6
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	085b      	lsrs	r3, r3, #1
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	041b      	lsls	r3, r3, #16
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	061b      	lsls	r3, r3, #24
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	071b      	lsls	r3, r3, #28
 8001be4:	491b      	ldr	r1, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_RCC_OscConfig+0x4b0>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f83c 	bl	8000c6c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff f838 	bl	8000c6c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e020      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x44c>
 8001c16:	e018      	b.n	8001c4a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_RCC_OscConfig+0x4b0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7ff f825 	bl	8000c6c <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c26:	f7ff f821 	bl	8000c6c <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e009      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_OscConfig+0x4a8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f0      	bne.n	8001c26 <HAL_RCC_OscConfig+0x47a>
 8001c44:	e001      	b.n	8001c4a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	42470060 	.word	0x42470060

08001c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e01d      	b.n	8001cae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f815 	bl	8001cb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f000 f968 	bl	8001f74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b085      	sub	sp, #20
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0201 	orr.w	r2, r2, #1
 8001ce0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b06      	cmp	r3, #6
 8001cf2:	d007      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d122      	bne.n	8001d6e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d11b      	bne.n	8001d6e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f06f 0202 	mvn.w	r2, #2
 8001d3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8ee 	bl	8001f36 <HAL_TIM_IC_CaptureCallback>
 8001d5a:	e005      	b.n	8001d68 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f8e0 	bl	8001f22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8f1 	bl	8001f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d122      	bne.n	8001dc2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d11b      	bne.n	8001dc2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f06f 0204 	mvn.w	r2, #4
 8001d92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f8c4 	bl	8001f36 <HAL_TIM_IC_CaptureCallback>
 8001dae:	e005      	b.n	8001dbc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8b6 	bl	8001f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8c7 	bl	8001f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d122      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d11b      	bne.n	8001e16 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f06f 0208 	mvn.w	r2, #8
 8001de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2204      	movs	r2, #4
 8001dec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f89a 	bl	8001f36 <HAL_TIM_IC_CaptureCallback>
 8001e02:	e005      	b.n	8001e10 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f88c 	bl	8001f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f89d 	bl	8001f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b10      	cmp	r3, #16
 8001e22:	d122      	bne.n	8001e6a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d11b      	bne.n	8001e6a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f06f 0210 	mvn.w	r2, #16
 8001e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2208      	movs	r2, #8
 8001e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f870 	bl	8001f36 <HAL_TIM_IC_CaptureCallback>
 8001e56:	e005      	b.n	8001e64 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f862 	bl	8001f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f873 	bl	8001f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d10e      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d107      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f06f 0201 	mvn.w	r2, #1
 8001e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7fe fd39 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea0:	2b80      	cmp	r3, #128	; 0x80
 8001ea2:	d10e      	bne.n	8001ec2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	2b80      	cmp	r3, #128	; 0x80
 8001eb0:	d107      	bne.n	8001ec2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f903 	bl	80020c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ecc:	2b40      	cmp	r3, #64	; 0x40
 8001ece:	d10e      	bne.n	8001eee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d107      	bne.n	8001eee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f838 	bl	8001f5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	d10e      	bne.n	8001f1a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	d107      	bne.n	8001f1a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f06f 0220 	mvn.w	r2, #32
 8001f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f8cd 	bl	80020b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a40      	ldr	r2, [pc, #256]	; (8002088 <TIM_Base_SetConfig+0x114>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d013      	beq.n	8001fb4 <TIM_Base_SetConfig+0x40>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f92:	d00f      	beq.n	8001fb4 <TIM_Base_SetConfig+0x40>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a3d      	ldr	r2, [pc, #244]	; (800208c <TIM_Base_SetConfig+0x118>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00b      	beq.n	8001fb4 <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3c      	ldr	r2, [pc, #240]	; (8002090 <TIM_Base_SetConfig+0x11c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d007      	beq.n	8001fb4 <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3b      	ldr	r2, [pc, #236]	; (8002094 <TIM_Base_SetConfig+0x120>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d003      	beq.n	8001fb4 <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3a      	ldr	r2, [pc, #232]	; (8002098 <TIM_Base_SetConfig+0x124>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d108      	bne.n	8001fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a2f      	ldr	r2, [pc, #188]	; (8002088 <TIM_Base_SetConfig+0x114>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d02b      	beq.n	8002026 <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd4:	d027      	beq.n	8002026 <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a2c      	ldr	r2, [pc, #176]	; (800208c <TIM_Base_SetConfig+0x118>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d023      	beq.n	8002026 <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a2b      	ldr	r2, [pc, #172]	; (8002090 <TIM_Base_SetConfig+0x11c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01f      	beq.n	8002026 <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a2a      	ldr	r2, [pc, #168]	; (8002094 <TIM_Base_SetConfig+0x120>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01b      	beq.n	8002026 <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a29      	ldr	r2, [pc, #164]	; (8002098 <TIM_Base_SetConfig+0x124>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d017      	beq.n	8002026 <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a28      	ldr	r2, [pc, #160]	; (800209c <TIM_Base_SetConfig+0x128>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a27      	ldr	r2, [pc, #156]	; (80020a0 <TIM_Base_SetConfig+0x12c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00f      	beq.n	8002026 <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a26      	ldr	r2, [pc, #152]	; (80020a4 <TIM_Base_SetConfig+0x130>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00b      	beq.n	8002026 <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <TIM_Base_SetConfig+0x134>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a24      	ldr	r2, [pc, #144]	; (80020ac <TIM_Base_SetConfig+0x138>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d003      	beq.n	8002026 <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <TIM_Base_SetConfig+0x13c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d108      	bne.n	8002038 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800202c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <TIM_Base_SetConfig+0x114>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d003      	beq.n	800206c <TIM_Base_SetConfig+0xf8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a0c      	ldr	r2, [pc, #48]	; (8002098 <TIM_Base_SetConfig+0x124>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d103      	bne.n	8002074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	615a      	str	r2, [r3, #20]
}
 800207a:	bf00      	nop
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40010000 	.word	0x40010000
 800208c:	40000400 	.word	0x40000400
 8002090:	40000800 	.word	0x40000800
 8002094:	40000c00 	.word	0x40000c00
 8002098:	40010400 	.word	0x40010400
 800209c:	40014000 	.word	0x40014000
 80020a0:	40014400 	.word	0x40014400
 80020a4:	40014800 	.word	0x40014800
 80020a8:	40001800 	.word	0x40001800
 80020ac:	40001c00 	.word	0x40001c00
 80020b0:	40002000 	.word	0x40002000

080020b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e03f      	b.n	800216e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fc42 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2224      	movs	r2, #36	; 0x24
 800210c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800211e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f829 	bl	8002178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80021ba:	f023 030c 	bic.w	r3, r3, #12
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	430b      	orrs	r3, r1
 80021c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e6:	f040 818b 	bne.w	8002500 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4ac1      	ldr	r2, [pc, #772]	; (80024f4 <UART_SetConfig+0x37c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d005      	beq.n	8002200 <UART_SetConfig+0x88>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4abf      	ldr	r2, [pc, #764]	; (80024f8 <UART_SetConfig+0x380>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	f040 80bd 	bne.w	800237a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002200:	f7ff f8ee 	bl	80013e0 <HAL_RCC_GetPCLK2Freq>
 8002204:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	461d      	mov	r5, r3
 800220a:	f04f 0600 	mov.w	r6, #0
 800220e:	46a8      	mov	r8, r5
 8002210:	46b1      	mov	r9, r6
 8002212:	eb18 0308 	adds.w	r3, r8, r8
 8002216:	eb49 0409 	adc.w	r4, r9, r9
 800221a:	4698      	mov	r8, r3
 800221c:	46a1      	mov	r9, r4
 800221e:	eb18 0805 	adds.w	r8, r8, r5
 8002222:	eb49 0906 	adc.w	r9, r9, r6
 8002226:	f04f 0100 	mov.w	r1, #0
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002232:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002236:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800223a:	4688      	mov	r8, r1
 800223c:	4691      	mov	r9, r2
 800223e:	eb18 0005 	adds.w	r0, r8, r5
 8002242:	eb49 0106 	adc.w	r1, r9, r6
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	461d      	mov	r5, r3
 800224c:	f04f 0600 	mov.w	r6, #0
 8002250:	196b      	adds	r3, r5, r5
 8002252:	eb46 0406 	adc.w	r4, r6, r6
 8002256:	461a      	mov	r2, r3
 8002258:	4623      	mov	r3, r4
 800225a:	f7fe f831 	bl	80002c0 <__aeabi_uldivmod>
 800225e:	4603      	mov	r3, r0
 8002260:	460c      	mov	r4, r1
 8002262:	461a      	mov	r2, r3
 8002264:	4ba5      	ldr	r3, [pc, #660]	; (80024fc <UART_SetConfig+0x384>)
 8002266:	fba3 2302 	umull	r2, r3, r3, r2
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	461d      	mov	r5, r3
 8002274:	f04f 0600 	mov.w	r6, #0
 8002278:	46a9      	mov	r9, r5
 800227a:	46b2      	mov	sl, r6
 800227c:	eb19 0309 	adds.w	r3, r9, r9
 8002280:	eb4a 040a 	adc.w	r4, sl, sl
 8002284:	4699      	mov	r9, r3
 8002286:	46a2      	mov	sl, r4
 8002288:	eb19 0905 	adds.w	r9, r9, r5
 800228c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002290:	f04f 0100 	mov.w	r1, #0
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800229c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022a4:	4689      	mov	r9, r1
 80022a6:	4692      	mov	sl, r2
 80022a8:	eb19 0005 	adds.w	r0, r9, r5
 80022ac:	eb4a 0106 	adc.w	r1, sl, r6
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	461d      	mov	r5, r3
 80022b6:	f04f 0600 	mov.w	r6, #0
 80022ba:	196b      	adds	r3, r5, r5
 80022bc:	eb46 0406 	adc.w	r4, r6, r6
 80022c0:	461a      	mov	r2, r3
 80022c2:	4623      	mov	r3, r4
 80022c4:	f7fd fffc 	bl	80002c0 <__aeabi_uldivmod>
 80022c8:	4603      	mov	r3, r0
 80022ca:	460c      	mov	r4, r1
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b8b      	ldr	r3, [pc, #556]	; (80024fc <UART_SetConfig+0x384>)
 80022d0:	fba3 1302 	umull	r1, r3, r3, r2
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	2164      	movs	r1, #100	; 0x64
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	3332      	adds	r3, #50	; 0x32
 80022e2:	4a86      	ldr	r2, [pc, #536]	; (80024fc <UART_SetConfig+0x384>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022f0:	4498      	add	r8, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	461d      	mov	r5, r3
 80022f6:	f04f 0600 	mov.w	r6, #0
 80022fa:	46a9      	mov	r9, r5
 80022fc:	46b2      	mov	sl, r6
 80022fe:	eb19 0309 	adds.w	r3, r9, r9
 8002302:	eb4a 040a 	adc.w	r4, sl, sl
 8002306:	4699      	mov	r9, r3
 8002308:	46a2      	mov	sl, r4
 800230a:	eb19 0905 	adds.w	r9, r9, r5
 800230e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002312:	f04f 0100 	mov.w	r1, #0
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800231e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002322:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002326:	4689      	mov	r9, r1
 8002328:	4692      	mov	sl, r2
 800232a:	eb19 0005 	adds.w	r0, r9, r5
 800232e:	eb4a 0106 	adc.w	r1, sl, r6
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	461d      	mov	r5, r3
 8002338:	f04f 0600 	mov.w	r6, #0
 800233c:	196b      	adds	r3, r5, r5
 800233e:	eb46 0406 	adc.w	r4, r6, r6
 8002342:	461a      	mov	r2, r3
 8002344:	4623      	mov	r3, r4
 8002346:	f7fd ffbb 	bl	80002c0 <__aeabi_uldivmod>
 800234a:	4603      	mov	r3, r0
 800234c:	460c      	mov	r4, r1
 800234e:	461a      	mov	r2, r3
 8002350:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <UART_SetConfig+0x384>)
 8002352:	fba3 1302 	umull	r1, r3, r3, r2
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2164      	movs	r1, #100	; 0x64
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	3332      	adds	r3, #50	; 0x32
 8002364:	4a65      	ldr	r2, [pc, #404]	; (80024fc <UART_SetConfig+0x384>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	f003 0207 	and.w	r2, r3, #7
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4442      	add	r2, r8
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	e26f      	b.n	800285a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800237a:	f7ff f81d 	bl	80013b8 <HAL_RCC_GetPCLK1Freq>
 800237e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	461d      	mov	r5, r3
 8002384:	f04f 0600 	mov.w	r6, #0
 8002388:	46a8      	mov	r8, r5
 800238a:	46b1      	mov	r9, r6
 800238c:	eb18 0308 	adds.w	r3, r8, r8
 8002390:	eb49 0409 	adc.w	r4, r9, r9
 8002394:	4698      	mov	r8, r3
 8002396:	46a1      	mov	r9, r4
 8002398:	eb18 0805 	adds.w	r8, r8, r5
 800239c:	eb49 0906 	adc.w	r9, r9, r6
 80023a0:	f04f 0100 	mov.w	r1, #0
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023b4:	4688      	mov	r8, r1
 80023b6:	4691      	mov	r9, r2
 80023b8:	eb18 0005 	adds.w	r0, r8, r5
 80023bc:	eb49 0106 	adc.w	r1, r9, r6
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	461d      	mov	r5, r3
 80023c6:	f04f 0600 	mov.w	r6, #0
 80023ca:	196b      	adds	r3, r5, r5
 80023cc:	eb46 0406 	adc.w	r4, r6, r6
 80023d0:	461a      	mov	r2, r3
 80023d2:	4623      	mov	r3, r4
 80023d4:	f7fd ff74 	bl	80002c0 <__aeabi_uldivmod>
 80023d8:	4603      	mov	r3, r0
 80023da:	460c      	mov	r4, r1
 80023dc:	461a      	mov	r2, r3
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <UART_SetConfig+0x384>)
 80023e0:	fba3 2302 	umull	r2, r3, r3, r2
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	461d      	mov	r5, r3
 80023ee:	f04f 0600 	mov.w	r6, #0
 80023f2:	46a9      	mov	r9, r5
 80023f4:	46b2      	mov	sl, r6
 80023f6:	eb19 0309 	adds.w	r3, r9, r9
 80023fa:	eb4a 040a 	adc.w	r4, sl, sl
 80023fe:	4699      	mov	r9, r3
 8002400:	46a2      	mov	sl, r4
 8002402:	eb19 0905 	adds.w	r9, r9, r5
 8002406:	eb4a 0a06 	adc.w	sl, sl, r6
 800240a:	f04f 0100 	mov.w	r1, #0
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002416:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800241a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800241e:	4689      	mov	r9, r1
 8002420:	4692      	mov	sl, r2
 8002422:	eb19 0005 	adds.w	r0, r9, r5
 8002426:	eb4a 0106 	adc.w	r1, sl, r6
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	461d      	mov	r5, r3
 8002430:	f04f 0600 	mov.w	r6, #0
 8002434:	196b      	adds	r3, r5, r5
 8002436:	eb46 0406 	adc.w	r4, r6, r6
 800243a:	461a      	mov	r2, r3
 800243c:	4623      	mov	r3, r4
 800243e:	f7fd ff3f 	bl	80002c0 <__aeabi_uldivmod>
 8002442:	4603      	mov	r3, r0
 8002444:	460c      	mov	r4, r1
 8002446:	461a      	mov	r2, r3
 8002448:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <UART_SetConfig+0x384>)
 800244a:	fba3 1302 	umull	r1, r3, r3, r2
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2164      	movs	r1, #100	; 0x64
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	3332      	adds	r3, #50	; 0x32
 800245c:	4a27      	ldr	r2, [pc, #156]	; (80024fc <UART_SetConfig+0x384>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800246a:	4498      	add	r8, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	461d      	mov	r5, r3
 8002470:	f04f 0600 	mov.w	r6, #0
 8002474:	46a9      	mov	r9, r5
 8002476:	46b2      	mov	sl, r6
 8002478:	eb19 0309 	adds.w	r3, r9, r9
 800247c:	eb4a 040a 	adc.w	r4, sl, sl
 8002480:	4699      	mov	r9, r3
 8002482:	46a2      	mov	sl, r4
 8002484:	eb19 0905 	adds.w	r9, r9, r5
 8002488:	eb4a 0a06 	adc.w	sl, sl, r6
 800248c:	f04f 0100 	mov.w	r1, #0
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002498:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800249c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024a0:	4689      	mov	r9, r1
 80024a2:	4692      	mov	sl, r2
 80024a4:	eb19 0005 	adds.w	r0, r9, r5
 80024a8:	eb4a 0106 	adc.w	r1, sl, r6
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	461d      	mov	r5, r3
 80024b2:	f04f 0600 	mov.w	r6, #0
 80024b6:	196b      	adds	r3, r5, r5
 80024b8:	eb46 0406 	adc.w	r4, r6, r6
 80024bc:	461a      	mov	r2, r3
 80024be:	4623      	mov	r3, r4
 80024c0:	f7fd fefe 	bl	80002c0 <__aeabi_uldivmod>
 80024c4:	4603      	mov	r3, r0
 80024c6:	460c      	mov	r4, r1
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <UART_SetConfig+0x384>)
 80024cc:	fba3 1302 	umull	r1, r3, r3, r2
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	2164      	movs	r1, #100	; 0x64
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	3332      	adds	r3, #50	; 0x32
 80024de:	4a07      	ldr	r2, [pc, #28]	; (80024fc <UART_SetConfig+0x384>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	f003 0207 	and.w	r2, r3, #7
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4442      	add	r2, r8
 80024f0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80024f2:	e1b2      	b.n	800285a <UART_SetConfig+0x6e2>
 80024f4:	40011000 	.word	0x40011000
 80024f8:	40011400 	.word	0x40011400
 80024fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4ad7      	ldr	r2, [pc, #860]	; (8002864 <UART_SetConfig+0x6ec>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d005      	beq.n	8002516 <UART_SetConfig+0x39e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4ad6      	ldr	r2, [pc, #856]	; (8002868 <UART_SetConfig+0x6f0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	f040 80d1 	bne.w	80026b8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002516:	f7fe ff63 	bl	80013e0 <HAL_RCC_GetPCLK2Freq>
 800251a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	469a      	mov	sl, r3
 8002520:	f04f 0b00 	mov.w	fp, #0
 8002524:	46d0      	mov	r8, sl
 8002526:	46d9      	mov	r9, fp
 8002528:	eb18 0308 	adds.w	r3, r8, r8
 800252c:	eb49 0409 	adc.w	r4, r9, r9
 8002530:	4698      	mov	r8, r3
 8002532:	46a1      	mov	r9, r4
 8002534:	eb18 080a 	adds.w	r8, r8, sl
 8002538:	eb49 090b 	adc.w	r9, r9, fp
 800253c:	f04f 0100 	mov.w	r1, #0
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002548:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800254c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002550:	4688      	mov	r8, r1
 8002552:	4691      	mov	r9, r2
 8002554:	eb1a 0508 	adds.w	r5, sl, r8
 8002558:	eb4b 0609 	adc.w	r6, fp, r9
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4619      	mov	r1, r3
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	f04f 0400 	mov.w	r4, #0
 800256e:	0094      	lsls	r4, r2, #2
 8002570:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002574:	008b      	lsls	r3, r1, #2
 8002576:	461a      	mov	r2, r3
 8002578:	4623      	mov	r3, r4
 800257a:	4628      	mov	r0, r5
 800257c:	4631      	mov	r1, r6
 800257e:	f7fd fe9f 	bl	80002c0 <__aeabi_uldivmod>
 8002582:	4603      	mov	r3, r0
 8002584:	460c      	mov	r4, r1
 8002586:	461a      	mov	r2, r3
 8002588:	4bb8      	ldr	r3, [pc, #736]	; (800286c <UART_SetConfig+0x6f4>)
 800258a:	fba3 2302 	umull	r2, r3, r3, r2
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	469b      	mov	fp, r3
 8002598:	f04f 0c00 	mov.w	ip, #0
 800259c:	46d9      	mov	r9, fp
 800259e:	46e2      	mov	sl, ip
 80025a0:	eb19 0309 	adds.w	r3, r9, r9
 80025a4:	eb4a 040a 	adc.w	r4, sl, sl
 80025a8:	4699      	mov	r9, r3
 80025aa:	46a2      	mov	sl, r4
 80025ac:	eb19 090b 	adds.w	r9, r9, fp
 80025b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025b4:	f04f 0100 	mov.w	r1, #0
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025c8:	4689      	mov	r9, r1
 80025ca:	4692      	mov	sl, r2
 80025cc:	eb1b 0509 	adds.w	r5, fp, r9
 80025d0:	eb4c 060a 	adc.w	r6, ip, sl
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4619      	mov	r1, r3
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	f04f 0400 	mov.w	r4, #0
 80025e6:	0094      	lsls	r4, r2, #2
 80025e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025ec:	008b      	lsls	r3, r1, #2
 80025ee:	461a      	mov	r2, r3
 80025f0:	4623      	mov	r3, r4
 80025f2:	4628      	mov	r0, r5
 80025f4:	4631      	mov	r1, r6
 80025f6:	f7fd fe63 	bl	80002c0 <__aeabi_uldivmod>
 80025fa:	4603      	mov	r3, r0
 80025fc:	460c      	mov	r4, r1
 80025fe:	461a      	mov	r2, r3
 8002600:	4b9a      	ldr	r3, [pc, #616]	; (800286c <UART_SetConfig+0x6f4>)
 8002602:	fba3 1302 	umull	r1, r3, r3, r2
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2164      	movs	r1, #100	; 0x64
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	3332      	adds	r3, #50	; 0x32
 8002614:	4a95      	ldr	r2, [pc, #596]	; (800286c <UART_SetConfig+0x6f4>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002620:	4498      	add	r8, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	469b      	mov	fp, r3
 8002626:	f04f 0c00 	mov.w	ip, #0
 800262a:	46d9      	mov	r9, fp
 800262c:	46e2      	mov	sl, ip
 800262e:	eb19 0309 	adds.w	r3, r9, r9
 8002632:	eb4a 040a 	adc.w	r4, sl, sl
 8002636:	4699      	mov	r9, r3
 8002638:	46a2      	mov	sl, r4
 800263a:	eb19 090b 	adds.w	r9, r9, fp
 800263e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002642:	f04f 0100 	mov.w	r1, #0
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800264e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002652:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002656:	4689      	mov	r9, r1
 8002658:	4692      	mov	sl, r2
 800265a:	eb1b 0509 	adds.w	r5, fp, r9
 800265e:	eb4c 060a 	adc.w	r6, ip, sl
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4619      	mov	r1, r3
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	f04f 0400 	mov.w	r4, #0
 8002674:	0094      	lsls	r4, r2, #2
 8002676:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800267a:	008b      	lsls	r3, r1, #2
 800267c:	461a      	mov	r2, r3
 800267e:	4623      	mov	r3, r4
 8002680:	4628      	mov	r0, r5
 8002682:	4631      	mov	r1, r6
 8002684:	f7fd fe1c 	bl	80002c0 <__aeabi_uldivmod>
 8002688:	4603      	mov	r3, r0
 800268a:	460c      	mov	r4, r1
 800268c:	461a      	mov	r2, r3
 800268e:	4b77      	ldr	r3, [pc, #476]	; (800286c <UART_SetConfig+0x6f4>)
 8002690:	fba3 1302 	umull	r1, r3, r3, r2
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	2164      	movs	r1, #100	; 0x64
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	3332      	adds	r3, #50	; 0x32
 80026a2:	4a72      	ldr	r2, [pc, #456]	; (800286c <UART_SetConfig+0x6f4>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	f003 020f 	and.w	r2, r3, #15
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4442      	add	r2, r8
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	e0d0      	b.n	800285a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80026b8:	f7fe fe7e 	bl	80013b8 <HAL_RCC_GetPCLK1Freq>
 80026bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	469a      	mov	sl, r3
 80026c2:	f04f 0b00 	mov.w	fp, #0
 80026c6:	46d0      	mov	r8, sl
 80026c8:	46d9      	mov	r9, fp
 80026ca:	eb18 0308 	adds.w	r3, r8, r8
 80026ce:	eb49 0409 	adc.w	r4, r9, r9
 80026d2:	4698      	mov	r8, r3
 80026d4:	46a1      	mov	r9, r4
 80026d6:	eb18 080a 	adds.w	r8, r8, sl
 80026da:	eb49 090b 	adc.w	r9, r9, fp
 80026de:	f04f 0100 	mov.w	r1, #0
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026f2:	4688      	mov	r8, r1
 80026f4:	4691      	mov	r9, r2
 80026f6:	eb1a 0508 	adds.w	r5, sl, r8
 80026fa:	eb4b 0609 	adc.w	r6, fp, r9
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4619      	mov	r1, r3
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	f04f 0400 	mov.w	r4, #0
 8002710:	0094      	lsls	r4, r2, #2
 8002712:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002716:	008b      	lsls	r3, r1, #2
 8002718:	461a      	mov	r2, r3
 800271a:	4623      	mov	r3, r4
 800271c:	4628      	mov	r0, r5
 800271e:	4631      	mov	r1, r6
 8002720:	f7fd fdce 	bl	80002c0 <__aeabi_uldivmod>
 8002724:	4603      	mov	r3, r0
 8002726:	460c      	mov	r4, r1
 8002728:	461a      	mov	r2, r3
 800272a:	4b50      	ldr	r3, [pc, #320]	; (800286c <UART_SetConfig+0x6f4>)
 800272c:	fba3 2302 	umull	r2, r3, r3, r2
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	469b      	mov	fp, r3
 800273a:	f04f 0c00 	mov.w	ip, #0
 800273e:	46d9      	mov	r9, fp
 8002740:	46e2      	mov	sl, ip
 8002742:	eb19 0309 	adds.w	r3, r9, r9
 8002746:	eb4a 040a 	adc.w	r4, sl, sl
 800274a:	4699      	mov	r9, r3
 800274c:	46a2      	mov	sl, r4
 800274e:	eb19 090b 	adds.w	r9, r9, fp
 8002752:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002756:	f04f 0100 	mov.w	r1, #0
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002762:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002766:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800276a:	4689      	mov	r9, r1
 800276c:	4692      	mov	sl, r2
 800276e:	eb1b 0509 	adds.w	r5, fp, r9
 8002772:	eb4c 060a 	adc.w	r6, ip, sl
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4619      	mov	r1, r3
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	f04f 0400 	mov.w	r4, #0
 8002788:	0094      	lsls	r4, r2, #2
 800278a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800278e:	008b      	lsls	r3, r1, #2
 8002790:	461a      	mov	r2, r3
 8002792:	4623      	mov	r3, r4
 8002794:	4628      	mov	r0, r5
 8002796:	4631      	mov	r1, r6
 8002798:	f7fd fd92 	bl	80002c0 <__aeabi_uldivmod>
 800279c:	4603      	mov	r3, r0
 800279e:	460c      	mov	r4, r1
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b32      	ldr	r3, [pc, #200]	; (800286c <UART_SetConfig+0x6f4>)
 80027a4:	fba3 1302 	umull	r1, r3, r3, r2
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	2164      	movs	r1, #100	; 0x64
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	3332      	adds	r3, #50	; 0x32
 80027b6:	4a2d      	ldr	r2, [pc, #180]	; (800286c <UART_SetConfig+0x6f4>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c2:	4498      	add	r8, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	469b      	mov	fp, r3
 80027c8:	f04f 0c00 	mov.w	ip, #0
 80027cc:	46d9      	mov	r9, fp
 80027ce:	46e2      	mov	sl, ip
 80027d0:	eb19 0309 	adds.w	r3, r9, r9
 80027d4:	eb4a 040a 	adc.w	r4, sl, sl
 80027d8:	4699      	mov	r9, r3
 80027da:	46a2      	mov	sl, r4
 80027dc:	eb19 090b 	adds.w	r9, r9, fp
 80027e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027f8:	4689      	mov	r9, r1
 80027fa:	4692      	mov	sl, r2
 80027fc:	eb1b 0509 	adds.w	r5, fp, r9
 8002800:	eb4c 060a 	adc.w	r6, ip, sl
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4619      	mov	r1, r3
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	f04f 0400 	mov.w	r4, #0
 8002816:	0094      	lsls	r4, r2, #2
 8002818:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800281c:	008b      	lsls	r3, r1, #2
 800281e:	461a      	mov	r2, r3
 8002820:	4623      	mov	r3, r4
 8002822:	4628      	mov	r0, r5
 8002824:	4631      	mov	r1, r6
 8002826:	f7fd fd4b 	bl	80002c0 <__aeabi_uldivmod>
 800282a:	4603      	mov	r3, r0
 800282c:	460c      	mov	r4, r1
 800282e:	461a      	mov	r2, r3
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <UART_SetConfig+0x6f4>)
 8002832:	fba3 1302 	umull	r1, r3, r3, r2
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2164      	movs	r1, #100	; 0x64
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	3332      	adds	r3, #50	; 0x32
 8002844:	4a09      	ldr	r2, [pc, #36]	; (800286c <UART_SetConfig+0x6f4>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	f003 020f 	and.w	r2, r3, #15
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4442      	add	r2, r8
 8002856:	609a      	str	r2, [r3, #8]
}
 8002858:	e7ff      	b.n	800285a <UART_SetConfig+0x6e2>
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002864:	40011000 	.word	0x40011000
 8002868:	40011400 	.word	0x40011400
 800286c:	51eb851f 	.word	0x51eb851f

08002870 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800287e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002882:	2b84      	cmp	r3, #132	; 0x84
 8002884:	d005      	beq.n	8002892 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002886:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4413      	add	r3, r2
 800288e:	3303      	adds	r3, #3
 8002890:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80028a4:	f000 fb84 	bl	8002fb0 <vTaskStartScheduler>
  
  return osOK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	bd80      	pop	{r7, pc}

080028ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80028ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b0:	b089      	sub	sp, #36	; 0x24
 80028b2:	af04      	add	r7, sp, #16
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d020      	beq.n	8002902 <osThreadCreate+0x54>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01c      	beq.n	8002902 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685c      	ldr	r4, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681d      	ldr	r5, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691e      	ldr	r6, [r3, #16]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff ffc8 	bl	8002870 <makeFreeRtosPriority>
 80028e0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028ea:	9202      	str	r2, [sp, #8]
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	9100      	str	r1, [sp, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4632      	mov	r2, r6
 80028f4:	4629      	mov	r1, r5
 80028f6:	4620      	mov	r0, r4
 80028f8:	f000 f8ed 	bl	8002ad6 <xTaskCreateStatic>
 80028fc:	4603      	mov	r3, r0
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	e01c      	b.n	800293c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685c      	ldr	r4, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800290e:	b29e      	uxth	r6, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ffaa 	bl	8002870 <makeFreeRtosPriority>
 800291c:	4602      	mov	r2, r0
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	9200      	str	r2, [sp, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	4632      	mov	r2, r6
 800292a:	4629      	mov	r1, r5
 800292c:	4620      	mov	r0, r4
 800292e:	f000 f92c 	bl	8002b8a <xTaskCreate>
 8002932:	4603      	mov	r3, r0
 8002934:	2b01      	cmp	r3, #1
 8002936:	d001      	beq.n	800293c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002946 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <osDelay+0x16>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	e000      	b.n	800295e <osDelay+0x18>
 800295c:	2301      	movs	r3, #1
 800295e:	4618      	mov	r0, r3
 8002960:	f000 faba 	bl	8002ed8 <vTaskDelay>
  
  return osOK;
 8002964:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f103 0208 	add.w	r2, r3, #8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f04f 32ff 	mov.w	r2, #4294967295
 8002986:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f103 0208 	add.w	r2, r3, #8
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f103 0208 	add.w	r2, r3, #8
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	601a      	str	r2, [r3, #0]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d103      	bne.n	8002a30 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e00c      	b.n	8002a4a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3308      	adds	r3, #8
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	e002      	b.n	8002a3e <vListInsert+0x2e>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d2f6      	bcs.n	8002a38 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	601a      	str	r2, [r3, #0]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6892      	ldr	r2, [r2, #8]
 8002a98:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6852      	ldr	r2, [r2, #4]
 8002aa2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d103      	bne.n	8002ab6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	1e5a      	subs	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b08e      	sub	sp, #56	; 0x38
 8002ada:	af04      	add	r7, sp, #16
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	623b      	str	r3, [r7, #32]
 8002afc:	e7fe      	b.n	8002afc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <xTaskCreateStatic+0x42>
 8002b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	e7fe      	b.n	8002b16 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b18:	235c      	movs	r3, #92	; 0x5c
 8002b1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b5c      	cmp	r3, #92	; 0x5c
 8002b20:	d009      	beq.n	8002b36 <xTaskCreateStatic+0x60>
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	e7fe      	b.n	8002b34 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01e      	beq.n	8002b7c <xTaskCreateStatic+0xa6>
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01b      	beq.n	8002b7c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	2202      	movs	r2, #2
 8002b52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b56:	2300      	movs	r3, #0
 8002b58:	9303      	str	r3, [sp, #12]
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	9302      	str	r3, [sp, #8]
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f850 	bl	8002c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b76:	f000 f8db 	bl	8002d30 <prvAddNewTaskToReadyList>
 8002b7a:	e001      	b.n	8002b80 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b80:	697b      	ldr	r3, [r7, #20]
	}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3728      	adds	r7, #40	; 0x28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b08c      	sub	sp, #48	; 0x30
 8002b8e:	af04      	add	r7, sp, #16
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 f868 	bl	8003c74 <pvPortMalloc>
 8002ba4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00e      	beq.n	8002bca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bac:	205c      	movs	r0, #92	; 0x5c
 8002bae:	f001 f861 	bl	8003c74 <pvPortMalloc>
 8002bb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8002bc0:	e005      	b.n	8002bce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002bc2:	6978      	ldr	r0, [r7, #20]
 8002bc4:	f001 f928 	bl	8003e18 <vPortFree>
 8002bc8:	e001      	b.n	8002bce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d017      	beq.n	8002c04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bdc:	88fa      	ldrh	r2, [r7, #6]
 8002bde:	2300      	movs	r3, #0
 8002be0:	9303      	str	r3, [sp, #12]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	9302      	str	r3, [sp, #8]
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f80e 	bl	8002c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bf8:	69f8      	ldr	r0, [r7, #28]
 8002bfa:	f000 f899 	bl	8002d30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	e002      	b.n	8002c0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c0a:	69bb      	ldr	r3, [r7, #24]
	}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	21a5      	movs	r1, #165	; 0xa5
 8002c2e:	f002 fe74 	bl	800591a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f023 0307 	bic.w	r3, r3, #7
 8002c4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d009      	beq.n	8002c6a <prvInitialiseNewTask+0x56>
 8002c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e7fe      	b.n	8002c68 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01f      	beq.n	8002cb0 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	e012      	b.n	8002c9c <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	7819      	ldrb	r1, [r3, #0]
 8002c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	3334      	adds	r3, #52	; 0x34
 8002c86:	460a      	mov	r2, r1
 8002c88:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d006      	beq.n	8002ca4 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b0f      	cmp	r3, #15
 8002ca0:	d9e9      	bls.n	8002c76 <prvInitialiseNewTask+0x62>
 8002ca2:	e000      	b.n	8002ca6 <prvInitialiseNewTask+0x92>
			{
				break;
 8002ca4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cae:	e003      	b.n	8002cb8 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d901      	bls.n	8002cc2 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cc6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ccc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fe68 	bl	80029ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	3318      	adds	r3, #24
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fe63 	bl	80029ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	f1c3 0207 	rsb	r2, r3, #7
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	2200      	movs	r2, #0
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	68f9      	ldr	r1, [r7, #12]
 8002d10:	69b8      	ldr	r0, [r7, #24]
 8002d12:	f000 fd9d 	bl	8003850 <pxPortInitialiseStack>
 8002d16:	4602      	mov	r2, r0
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d28:	bf00      	nop
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d38:	f000 fec0 	bl	8003abc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d3c:	4b5d      	ldr	r3, [pc, #372]	; (8002eb4 <prvAddNewTaskToReadyList+0x184>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	4a5c      	ldr	r2, [pc, #368]	; (8002eb4 <prvAddNewTaskToReadyList+0x184>)
 8002d44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d46:	4b5c      	ldr	r3, [pc, #368]	; (8002eb8 <prvAddNewTaskToReadyList+0x188>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d4e:	4a5a      	ldr	r2, [pc, #360]	; (8002eb8 <prvAddNewTaskToReadyList+0x188>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d54:	4b57      	ldr	r3, [pc, #348]	; (8002eb4 <prvAddNewTaskToReadyList+0x184>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d110      	bne.n	8002d7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d5c:	f000 fc10 	bl	8003580 <prvInitialiseTaskLists>
 8002d60:	e00d      	b.n	8002d7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d62:	4b56      	ldr	r3, [pc, #344]	; (8002ebc <prvAddNewTaskToReadyList+0x18c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d6a:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <prvAddNewTaskToReadyList+0x188>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d802      	bhi.n	8002d7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d78:	4a4f      	ldr	r2, [pc, #316]	; (8002eb8 <prvAddNewTaskToReadyList+0x188>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d7e:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <prvAddNewTaskToReadyList+0x190>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3301      	adds	r3, #1
 8002d84:	4a4e      	ldr	r2, [pc, #312]	; (8002ec0 <prvAddNewTaskToReadyList+0x190>)
 8002d86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d88:	4b4d      	ldr	r3, [pc, #308]	; (8002ec0 <prvAddNewTaskToReadyList+0x190>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d04b      	beq.n	8002e2e <prvAddNewTaskToReadyList+0xfe>
 8002d96:	2003      	movs	r0, #3
 8002d98:	f002 fa24 	bl	80051e4 <prvTraceGetObjectHandle>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	4619      	mov	r1, r3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f001 f96f 	bl	8004086 <prvTraceSetTaskNumberLow16>
 8002da8:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <prvAddNewTaskToReadyList+0x194>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f001 f97f 	bl	80040b2 <prvTraceSetTaskNumberHigh16>
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f001 f94b 	bl	8004050 <prvTraceGetTaskNumberLow16>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	b2d9      	uxtb	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3334      	adds	r3, #52	; 0x34
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f002 fadf 	bl	8005388 <prvTraceSetObjectName>
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f001 f940 	bl	8004050 <prvTraceGetTaskNumberLow16>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	b2d9      	uxtb	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2003      	movs	r0, #3
 8002dde:	f001 ff91 	bl	8004d04 <prvTraceSetPriorityProperty>
 8002de2:	f001 fa17 	bl	8004214 <prvTraceGetCurrentTaskHandle>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f001 f93e 	bl	800406a <prvTraceGetTaskNumberHigh16>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461a      	mov	r2, r3
 8002df2:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <prvAddNewTaskToReadyList+0x198>)
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	4013      	ands	r3, r2
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d014      	beq.n	8002e28 <prvAddNewTaskToReadyList+0xf8>
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f001 f933 	bl	800406a <prvTraceGetTaskNumberHigh16>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b2f      	ldr	r3, [pc, #188]	; (8002ec8 <prvAddNewTaskToReadyList+0x198>)
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <prvAddNewTaskToReadyList+0xf8>
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f001 f91b 	bl	8004050 <prvTraceGetTaskNumberLow16>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2103      	movs	r1, #3
 8002e22:	201b      	movs	r0, #27
 8002e24:	f001 fd5a 	bl	80048dc <prvTraceStoreKernelCall>
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f001 f959 	bl	80040e0 <prvAddTaskToStackMonitor>

		prvAddTaskToReadyList( pxNewTCB );
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f001 f91b 	bl	800406a <prvTraceGetTaskNumberHigh16>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <prvAddNewTaskToReadyList+0x198>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <prvAddNewTaskToReadyList+0x124>
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f001 f903 	bl	8004050 <prvTraceGetTaskNumberLow16>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f001 fc54 	bl	80046fc <prvTraceStoreTaskReady>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	2201      	movs	r2, #1
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <prvAddNewTaskToReadyList+0x19c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	4a1a      	ldr	r2, [pc, #104]	; (8002ecc <prvAddNewTaskToReadyList+0x19c>)
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <prvAddNewTaskToReadyList+0x1a0>)
 8002e74:	441a      	add	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	f7ff fda3 	bl	80029c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e82:	f000 fe49 	bl	8003b18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <prvAddNewTaskToReadyList+0x18c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00e      	beq.n	8002eac <prvAddNewTaskToReadyList+0x17c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <prvAddNewTaskToReadyList+0x188>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d207      	bcs.n	8002eac <prvAddNewTaskToReadyList+0x17c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <prvAddNewTaskToReadyList+0x1a4>)
 8002e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	200003fc 	.word	0x200003fc
 8002eb8:	200002fc 	.word	0x200002fc
 8002ebc:	20000408 	.word	0x20000408
 8002ec0:	20000418 	.word	0x20000418
 8002ec4:	20000016 	.word	0x20000016
 8002ec8:	20000014 	.word	0x20000014
 8002ecc:	20000404 	.word	0x20000404
 8002ed0:	20000300 	.word	0x20000300
 8002ed4:	e000ed04 	.word	0xe000ed04

08002ed8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04a      	beq.n	8002f80 <vTaskDelay+0xa8>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002eea:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <vTaskDelay+0xc8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <vTaskDelay+0x2e>
 8002ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef6:	f383 8811 	msr	BASEPRI, r3
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	e7fe      	b.n	8002f04 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002f06:	f000 f8d5 	bl	80030b4 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8002f0a:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <vTaskDelay+0xcc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 f8ab 	bl	800406a <prvTraceGetTaskNumberHigh16>
 8002f14:	4603      	mov	r3, r0
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <vTaskDelay+0xd0>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <vTaskDelay+0x68>
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	2089      	movs	r0, #137	; 0x89
 8002f28:	f001 fe18 	bl	8004b5c <prvTraceStoreKernelCallWithNumericParamOnly>
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <vTaskDelay+0xcc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f001 f88d 	bl	8004050 <prvTraceGetTaskNumberLow16>
 8002f36:	4603      	mov	r3, r0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f001 ff96 	bl	8004e6c <prvTraceSetTaskInstanceFinished>
 8002f40:	f001 f968 	bl	8004214 <prvTraceGetCurrentTaskHandle>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f88f 	bl	800406a <prvTraceGetTaskNumberHigh16>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <vTaskDelay+0xd0>)
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	4013      	ands	r3, r2
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <vTaskDelay+0x9a>
 8002f5c:	f001 f95a 	bl	8004214 <prvTraceGetCurrentTaskHandle>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 f874 	bl	8004050 <prvTraceGetTaskNumberLow16>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 ff7d 	bl	8004e6c <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f72:	2100      	movs	r1, #0
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fc05 	bl	8003784 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f7a:	f000 f8a9 	bl	80030d0 <xTaskResumeAll>
 8002f7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <vTaskDelay+0xbe>
		{
			portYIELD_WITHIN_API();
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <vTaskDelay+0xd4>)
 8002f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000424 	.word	0x20000424
 8002fa4:	200002fc 	.word	0x200002fc
 8002fa8:	20000014 	.word	0x20000014
 8002fac:	e000ed04 	.word	0xe000ed04

08002fb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002fbe:	463a      	mov	r2, r7
 8002fc0:	1d39      	adds	r1, r7, #4
 8002fc2:	f107 0308 	add.w	r3, r7, #8
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fafa 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fcc:	6839      	ldr	r1, [r7, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	9202      	str	r2, [sp, #8]
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	460a      	mov	r2, r1
 8002fde:	492d      	ldr	r1, [pc, #180]	; (8003094 <vTaskStartScheduler+0xe4>)
 8002fe0:	482d      	ldr	r0, [pc, #180]	; (8003098 <vTaskStartScheduler+0xe8>)
 8002fe2:	f7ff fd78 	bl	8002ad6 <xTaskCreateStatic>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b2c      	ldr	r3, [pc, #176]	; (800309c <vTaskStartScheduler+0xec>)
 8002fea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <vTaskStartScheduler+0xec>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	e001      	b.n	8002ffe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d134      	bne.n	800306e <vTaskStartScheduler+0xbe>
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003016:	4b22      	ldr	r3, [pc, #136]	; (80030a0 <vTaskStartScheduler+0xf0>)
 8003018:	f04f 32ff 	mov.w	r2, #4294967295
 800301c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800301e:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <vTaskStartScheduler+0xf4>)
 8003020:	2201      	movs	r2, #1
 8003022:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003024:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <vTaskStartScheduler+0xf8>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <vTaskStartScheduler+0xfc>)
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	f001 f8f0 	bl	8004214 <prvTraceGetCurrentTaskHandle>
 8003034:	4603      	mov	r3, r0
 8003036:	4618      	mov	r0, r3
 8003038:	f001 f817 	bl	800406a <prvTraceGetTaskNumberHigh16>
 800303c:	4603      	mov	r3, r0
 800303e:	461a      	mov	r2, r3
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <vTaskStartScheduler+0x100>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	4013      	ands	r3, r2
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <vTaskStartScheduler+0xb2>
 800304c:	f001 f8e2 	bl	8004214 <prvTraceGetCurrentTaskHandle>
 8003050:	4603      	mov	r3, r0
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fffc 	bl	8004050 <prvTraceGetTaskNumberLow16>
 8003058:	4603      	mov	r3, r0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4618      	mov	r0, r3
 800305e:	f001 fde1 	bl	8004c24 <prvTraceStoreTaskswitch>
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <vTaskStartScheduler+0xfc>)
 8003064:	2202      	movs	r2, #2
 8003066:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003068:	f000 fc7a 	bl	8003960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800306c:	e00d      	b.n	800308a <vTaskStartScheduler+0xda>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d109      	bne.n	800308a <vTaskStartScheduler+0xda>
 8003076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e7fe      	b.n	8003088 <vTaskStartScheduler+0xd8>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	08006170 	.word	0x08006170
 8003098:	08003551 	.word	0x08003551
 800309c:	20000420 	.word	0x20000420
 80030a0:	2000041c 	.word	0x2000041c
 80030a4:	20000408 	.word	0x20000408
 80030a8:	20000400 	.word	0x20000400
 80030ac:	20004510 	.word	0x20004510
 80030b0:	20000014 	.word	0x20000014

080030b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <vTaskSuspendAll+0x18>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3301      	adds	r3, #1
 80030be:	4a03      	ldr	r2, [pc, #12]	; (80030cc <vTaskSuspendAll+0x18>)
 80030c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	20000424 	.word	0x20000424

080030d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030de:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <xTaskResumeAll+0x138>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <xTaskResumeAll+0x2a>
 80030e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	e7fe      	b.n	80030f8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030fa:	f000 fcdf 	bl	8003abc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030fe:	4b42      	ldr	r3, [pc, #264]	; (8003208 <xTaskResumeAll+0x138>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3b01      	subs	r3, #1
 8003104:	4a40      	ldr	r2, [pc, #256]	; (8003208 <xTaskResumeAll+0x138>)
 8003106:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003108:	4b3f      	ldr	r3, [pc, #252]	; (8003208 <xTaskResumeAll+0x138>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d174      	bne.n	80031fa <xTaskResumeAll+0x12a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003110:	4b3e      	ldr	r3, [pc, #248]	; (800320c <xTaskResumeAll+0x13c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d070      	beq.n	80031fa <xTaskResumeAll+0x12a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003118:	e041      	b.n	800319e <xTaskResumeAll+0xce>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800311a:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <xTaskResumeAll+0x140>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3318      	adds	r3, #24
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fcab 	bl	8002a82 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3304      	adds	r3, #4
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fca6 	bl	8002a82 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 ff97 	bl	800406a <prvTraceGetTaskNumberHigh16>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	4b34      	ldr	r3, [pc, #208]	; (8003214 <xTaskResumeAll+0x144>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	4013      	ands	r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <xTaskResumeAll+0x8c>
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 ff7f 	bl	8004050 <prvTraceGetTaskNumberLow16>
 8003152:	4603      	mov	r3, r0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	4618      	mov	r0, r3
 8003158:	f001 fad0 	bl	80046fc <prvTraceStoreTaskReady>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	2201      	movs	r2, #1
 8003162:	409a      	lsls	r2, r3
 8003164:	4b2c      	ldr	r3, [pc, #176]	; (8003218 <xTaskResumeAll+0x148>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4313      	orrs	r3, r2
 800316a:	4a2b      	ldr	r2, [pc, #172]	; (8003218 <xTaskResumeAll+0x148>)
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4a28      	ldr	r2, [pc, #160]	; (800321c <xTaskResumeAll+0x14c>)
 800317c:	441a      	add	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3304      	adds	r3, #4
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f7ff fc1f 	bl	80029c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318e:	4b24      	ldr	r3, [pc, #144]	; (8003220 <xTaskResumeAll+0x150>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	429a      	cmp	r2, r3
 8003196:	d302      	bcc.n	800319e <xTaskResumeAll+0xce>
					{
						xYieldPending = pdTRUE;
 8003198:	4b22      	ldr	r3, [pc, #136]	; (8003224 <xTaskResumeAll+0x154>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <xTaskResumeAll+0x140>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1b9      	bne.n	800311a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <xTaskResumeAll+0xe0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031ac:	f000 faba 	bl	8003724 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80031b0:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <xTaskResumeAll+0x158>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d010      	beq.n	80031de <xTaskResumeAll+0x10e>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031bc:	f000 f838 	bl	8003230 <xTaskIncrementTick>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <xTaskResumeAll+0xfc>
							{
								xYieldPending = pdTRUE;
 80031c6:	4b17      	ldr	r3, [pc, #92]	; (8003224 <xTaskResumeAll+0x154>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f1      	bne.n	80031bc <xTaskResumeAll+0xec>

						uxPendedTicks = 0;
 80031d8:	4b13      	ldr	r3, [pc, #76]	; (8003228 <xTaskResumeAll+0x158>)
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <xTaskResumeAll+0x154>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <xTaskResumeAll+0x12a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031e6:	2301      	movs	r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031ea:	4b10      	ldr	r3, [pc, #64]	; (800322c <xTaskResumeAll+0x15c>)
 80031ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031fa:	f000 fc8d 	bl	8003b18 <vPortExitCritical>

	return xAlreadyYielded;
 80031fe:	68bb      	ldr	r3, [r7, #8]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000424 	.word	0x20000424
 800320c:	200003fc 	.word	0x200003fc
 8003210:	200003bc 	.word	0x200003bc
 8003214:	20000014 	.word	0x20000014
 8003218:	20000404 	.word	0x20000404
 800321c:	20000300 	.word	0x20000300
 8003220:	200002fc 	.word	0x200002fc
 8003224:	20000410 	.word	0x20000410
 8003228:	2000040c 	.word	0x2000040c
 800322c:	e000ed04 	.word	0xe000ed04

08003230 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800323a:	4b65      	ldr	r3, [pc, #404]	; (80033d0 <xTaskIncrementTick+0x1a0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d003      	beq.n	800324a <xTaskIncrementTick+0x1a>
 8003242:	4b64      	ldr	r3, [pc, #400]	; (80033d4 <xTaskIncrementTick+0x1a4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d107      	bne.n	800325a <xTaskIncrementTick+0x2a>
 800324a:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <xTaskIncrementTick+0x1a8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3301      	adds	r3, #1
 8003250:	4a61      	ldr	r2, [pc, #388]	; (80033d8 <xTaskIncrementTick+0x1a8>)
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	2000      	movs	r0, #0
 8003256:	f002 fae1 	bl	800581c <prvTracePortGetTimeStamp>
 800325a:	4b5d      	ldr	r3, [pc, #372]	; (80033d0 <xTaskIncrementTick+0x1a0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <xTaskIncrementTick+0x40>
 8003262:	4b5e      	ldr	r3, [pc, #376]	; (80033dc <xTaskIncrementTick+0x1ac>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	4619      	mov	r1, r3
 800326a:	2003      	movs	r0, #3
 800326c:	f001 fc76 	bl	8004b5c <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003270:	4b57      	ldr	r3, [pc, #348]	; (80033d0 <xTaskIncrementTick+0x1a0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f040 809a 	bne.w	80033ae <xTaskIncrementTick+0x17e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800327a:	4b58      	ldr	r3, [pc, #352]	; (80033dc <xTaskIncrementTick+0x1ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3301      	adds	r3, #1
 8003280:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003282:	4a56      	ldr	r2, [pc, #344]	; (80033dc <xTaskIncrementTick+0x1ac>)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11f      	bne.n	80032ce <xTaskIncrementTick+0x9e>
		{
			taskSWITCH_DELAYED_LISTS();
 800328e:	4b54      	ldr	r3, [pc, #336]	; (80033e0 <xTaskIncrementTick+0x1b0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <xTaskIncrementTick+0x7c>
 8003298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	e7fe      	b.n	80032aa <xTaskIncrementTick+0x7a>
 80032ac:	4b4c      	ldr	r3, [pc, #304]	; (80033e0 <xTaskIncrementTick+0x1b0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	4b4c      	ldr	r3, [pc, #304]	; (80033e4 <xTaskIncrementTick+0x1b4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a4a      	ldr	r2, [pc, #296]	; (80033e0 <xTaskIncrementTick+0x1b0>)
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4a4a      	ldr	r2, [pc, #296]	; (80033e4 <xTaskIncrementTick+0x1b4>)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <xTaskIncrementTick+0x1b8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a48      	ldr	r2, [pc, #288]	; (80033e8 <xTaskIncrementTick+0x1b8>)
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	f000 fa2b 	bl	8003724 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <xTaskIncrementTick+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d35b      	bcc.n	8003390 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d8:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <xTaskIncrementTick+0x1b0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d104      	bne.n	80032ec <xTaskIncrementTick+0xbc>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032e2:	4b42      	ldr	r3, [pc, #264]	; (80033ec <xTaskIncrementTick+0x1bc>)
 80032e4:	f04f 32ff 	mov.w	r2, #4294967295
 80032e8:	601a      	str	r2, [r3, #0]
					break;
 80032ea:	e051      	b.n	8003390 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ec:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <xTaskIncrementTick+0x1b0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	429a      	cmp	r2, r3
 8003302:	d203      	bcs.n	800330c <xTaskIncrementTick+0xdc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003304:	4a39      	ldr	r2, [pc, #228]	; (80033ec <xTaskIncrementTick+0x1bc>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800330a:	e041      	b.n	8003390 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	3304      	adds	r3, #4
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fbb6 	bl	8002a82 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	2b00      	cmp	r3, #0
 800331c:	d004      	beq.n	8003328 <xTaskIncrementTick+0xf8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	3318      	adds	r3, #24
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fbad 	bl	8002a82 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003328:	68b8      	ldr	r0, [r7, #8]
 800332a:	f000 fe9e 	bl	800406a <prvTraceGetTaskNumberHigh16>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <xTaskIncrementTick+0x1c0>)
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	4013      	ands	r3, r2
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <xTaskIncrementTick+0x11e>
 800333e:	68b8      	ldr	r0, [r7, #8]
 8003340:	f000 fe86 	bl	8004050 <prvTraceGetTaskNumberLow16>
 8003344:	4603      	mov	r3, r0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	4618      	mov	r0, r3
 800334a:	f001 f9d7 	bl	80046fc <prvTraceStoreTaskReady>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	2201      	movs	r2, #1
 8003354:	409a      	lsls	r2, r3
 8003356:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <xTaskIncrementTick+0x1c4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4313      	orrs	r3, r2
 800335c:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <xTaskIncrementTick+0x1c4>)
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4a22      	ldr	r2, [pc, #136]	; (80033f8 <xTaskIncrementTick+0x1c8>)
 800336e:	441a      	add	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	3304      	adds	r3, #4
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f7ff fb26 	bl	80029c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <xTaskIncrementTick+0x1cc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	429a      	cmp	r2, r3
 8003388:	d3a6      	bcc.n	80032d8 <xTaskIncrementTick+0xa8>
						{
							xSwitchRequired = pdTRUE;
 800338a:	2301      	movs	r3, #1
 800338c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800338e:	e7a3      	b.n	80032d8 <xTaskIncrementTick+0xa8>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003390:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <xTaskIncrementTick+0x1cc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003396:	4918      	ldr	r1, [pc, #96]	; (80033f8 <xTaskIncrementTick+0x1c8>)
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d907      	bls.n	80033b8 <xTaskIncrementTick+0x188>
			{
				xSwitchRequired = pdTRUE;
 80033a8:	2301      	movs	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	e004      	b.n	80033b8 <xTaskIncrementTick+0x188>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <xTaskIncrementTick+0x1a4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	4a07      	ldr	r2, [pc, #28]	; (80033d4 <xTaskIncrementTick+0x1a4>)
 80033b6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80033b8:	4b11      	ldr	r3, [pc, #68]	; (8003400 <xTaskIncrementTick+0x1d0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <xTaskIncrementTick+0x194>
		{
			xSwitchRequired = pdTRUE;
 80033c0:	2301      	movs	r3, #1
 80033c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80033c4:	697b      	ldr	r3, [r7, #20]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000424 	.word	0x20000424
 80033d4:	2000040c 	.word	0x2000040c
 80033d8:	20004504 	.word	0x20004504
 80033dc:	20000400 	.word	0x20000400
 80033e0:	200003b4 	.word	0x200003b4
 80033e4:	200003b8 	.word	0x200003b8
 80033e8:	20000414 	.word	0x20000414
 80033ec:	2000041c 	.word	0x2000041c
 80033f0:	20000014 	.word	0x20000014
 80033f4:	20000404 	.word	0x20000404
 80033f8:	20000300 	.word	0x20000300
 80033fc:	200002fc 	.word	0x200002fc
 8003400:	20000410 	.word	0x20000410

08003404 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800340a:	4b35      	ldr	r3, [pc, #212]	; (80034e0 <vTaskSwitchContext+0xdc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003412:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <vTaskSwitchContext+0xe0>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003418:	e05d      	b.n	80034d6 <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 800341a:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <vTaskSwitchContext+0xe0>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003420:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <vTaskSwitchContext+0xe4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800342e:	7afb      	ldrb	r3, [r7, #11]
 8003430:	f1c3 031f 	rsb	r3, r3, #31
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	492d      	ldr	r1, [pc, #180]	; (80034ec <vTaskSwitchContext+0xe8>)
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <vTaskSwitchContext+0x5a>
	__asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	e7fe      	b.n	800345c <vTaskSwitchContext+0x58>
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4a20      	ldr	r2, [pc, #128]	; (80034ec <vTaskSwitchContext+0xe8>)
 800346a:	4413      	add	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	3308      	adds	r3, #8
 8003480:	429a      	cmp	r2, r3
 8003482:	d104      	bne.n	800348e <vTaskSwitchContext+0x8a>
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <vTaskSwitchContext+0xec>)
 8003496:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003498:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <vTaskSwitchContext+0xf0>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	f000 feb9 	bl	8004214 <prvTraceGetCurrentTaskHandle>
 80034a2:	4603      	mov	r3, r0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fde0 	bl	800406a <prvTraceGetTaskNumberHigh16>
 80034aa:	4603      	mov	r3, r0
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <vTaskSwitchContext+0xf4>)
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	4013      	ands	r3, r2
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <vTaskSwitchContext+0xcc>
 80034ba:	f000 feab 	bl	8004214 <prvTraceGetCurrentTaskHandle>
 80034be:	4603      	mov	r3, r0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fdc5 	bl	8004050 <prvTraceGetTaskNumberLow16>
 80034c6:	4603      	mov	r3, r0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 fbaa 	bl	8004c24 <prvTraceStoreTaskswitch>
 80034d0:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <vTaskSwitchContext+0xf0>)
 80034d2:	2202      	movs	r2, #2
 80034d4:	601a      	str	r2, [r3, #0]
}
 80034d6:	bf00      	nop
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000424 	.word	0x20000424
 80034e4:	20000410 	.word	0x20000410
 80034e8:	20000404 	.word	0x20000404
 80034ec:	20000300 	.word	0x20000300
 80034f0:	200002fc 	.word	0x200002fc
 80034f4:	20004510 	.word	0x20004510
 80034f8:	20000014 	.word	0x20000014

080034fc <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	e001      	b.n	800351a <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 800351a:	68fb      	ldr	r3, [r7, #12]
	}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d004      	beq.n	8003542 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003558:	f000 f852 	bl	8003600 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <prvIdleTask+0x28>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d9f9      	bls.n	8003558 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <prvIdleTask+0x2c>)
 8003566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003574:	e7f0      	b.n	8003558 <prvIdleTask+0x8>
 8003576:	bf00      	nop
 8003578:	20000300 	.word	0x20000300
 800357c:	e000ed04 	.word	0xe000ed04

08003580 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003586:	2300      	movs	r3, #0
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	e00c      	b.n	80035a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <prvInitialiseTaskLists+0x60>)
 8003598:	4413      	add	r3, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff f9e7 	bl	800296e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3301      	adds	r3, #1
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b06      	cmp	r3, #6
 80035aa:	d9ef      	bls.n	800358c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035ac:	480d      	ldr	r0, [pc, #52]	; (80035e4 <prvInitialiseTaskLists+0x64>)
 80035ae:	f7ff f9de 	bl	800296e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035b2:	480d      	ldr	r0, [pc, #52]	; (80035e8 <prvInitialiseTaskLists+0x68>)
 80035b4:	f7ff f9db 	bl	800296e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035b8:	480c      	ldr	r0, [pc, #48]	; (80035ec <prvInitialiseTaskLists+0x6c>)
 80035ba:	f7ff f9d8 	bl	800296e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035be:	480c      	ldr	r0, [pc, #48]	; (80035f0 <prvInitialiseTaskLists+0x70>)
 80035c0:	f7ff f9d5 	bl	800296e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035c4:	480b      	ldr	r0, [pc, #44]	; (80035f4 <prvInitialiseTaskLists+0x74>)
 80035c6:	f7ff f9d2 	bl	800296e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <prvInitialiseTaskLists+0x78>)
 80035cc:	4a05      	ldr	r2, [pc, #20]	; (80035e4 <prvInitialiseTaskLists+0x64>)
 80035ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <prvInitialiseTaskLists+0x7c>)
 80035d2:	4a05      	ldr	r2, [pc, #20]	; (80035e8 <prvInitialiseTaskLists+0x68>)
 80035d4:	601a      	str	r2, [r3, #0]
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000300 	.word	0x20000300
 80035e4:	2000038c 	.word	0x2000038c
 80035e8:	200003a0 	.word	0x200003a0
 80035ec:	200003bc 	.word	0x200003bc
 80035f0:	200003d0 	.word	0x200003d0
 80035f4:	200003e8 	.word	0x200003e8
 80035f8:	200003b4 	.word	0x200003b4
 80035fc:	200003b8 	.word	0x200003b8

08003600 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003606:	e019      	b.n	800363c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003608:	f000 fa58 	bl	8003abc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <prvCheckTasksWaitingTermination+0x4c>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3304      	adds	r3, #4
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fa32 	bl	8002a82 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <prvCheckTasksWaitingTermination+0x50>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3b01      	subs	r3, #1
 8003624:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <prvCheckTasksWaitingTermination+0x50>)
 8003626:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <prvCheckTasksWaitingTermination+0x54>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3b01      	subs	r3, #1
 800362e:	4a09      	ldr	r2, [pc, #36]	; (8003654 <prvCheckTasksWaitingTermination+0x54>)
 8003630:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003632:	f000 fa71 	bl	8003b18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f846 	bl	80036c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <prvCheckTasksWaitingTermination+0x54>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e1      	bne.n	8003608 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	200003d0 	.word	0x200003d0
 8003650:	200003fc 	.word	0x200003fc
 8003654:	200003e4 	.word	0x200003e4

08003658 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003664:	e005      	b.n	8003672 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3301      	adds	r3, #1
 800366a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3301      	adds	r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2ba5      	cmp	r3, #165	; 0xa5
 8003678:	d0f5      	beq.n	8003666 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	b29b      	uxth	r3, r3
	}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d102      	bne.n	80036a4 <uxTaskGetStackHighWaterMark+0x14>
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <uxTaskGetStackHighWaterMark+0x34>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	e000      	b.n	80036a6 <uxTaskGetStackHighWaterMark+0x16>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80036ae:	6938      	ldr	r0, [r7, #16]
 80036b0:	f7ff ffd2 	bl	8003658 <prvTaskCheckFreeStackSpace>
 80036b4:	4603      	mov	r3, r0
 80036b6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80036b8:	68fb      	ldr	r3, [r7, #12]
	}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	200002fc 	.word	0x200002fc

080036c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d108      	bne.n	80036ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fb9a 	bl	8003e18 <vPortFree>
				vPortFree( pxTCB );
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fb97 	bl	8003e18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036ea:	e017      	b.n	800371c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d103      	bne.n	80036fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fb8e 	bl	8003e18 <vPortFree>
	}
 80036fc:	e00e      	b.n	800371c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003704:	2b02      	cmp	r3, #2
 8003706:	d009      	beq.n	800371c <prvDeleteTCB+0x54>
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	e7fe      	b.n	800371a <prvDeleteTCB+0x52>
	}
 800371c:	bf00      	nop
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <prvResetNextTaskUnblockTime+0x38>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d104      	bne.n	800373e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <prvResetNextTaskUnblockTime+0x3c>)
 8003736:	f04f 32ff 	mov.w	r2, #4294967295
 800373a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800373c:	e008      	b.n	8003750 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <prvResetNextTaskUnblockTime+0x38>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a04      	ldr	r2, [pc, #16]	; (8003760 <prvResetNextTaskUnblockTime+0x3c>)
 800374e:	6013      	str	r3, [r2, #0]
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	200003b4 	.word	0x200003b4
 8003760:	2000041c 	.word	0x2000041c

08003764 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800376a:	4b05      	ldr	r3, [pc, #20]	; (8003780 <xTaskGetCurrentTaskHandle+0x1c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003770:	687b      	ldr	r3, [r7, #4]
	}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	200002fc 	.word	0x200002fc

08003784 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800378e:	4b29      	ldr	r3, [pc, #164]	; (8003834 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003794:	4b28      	ldr	r3, [pc, #160]	; (8003838 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3304      	adds	r3, #4
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff f971 	bl	8002a82 <uxListRemove>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	2201      	movs	r2, #1
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43da      	mvns	r2, r3
 80037b4:	4b21      	ldr	r3, [pc, #132]	; (800383c <prvAddCurrentTaskToDelayedList+0xb8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4013      	ands	r3, r2
 80037ba:	4a20      	ldr	r2, [pc, #128]	; (800383c <prvAddCurrentTaskToDelayedList+0xb8>)
 80037bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d10a      	bne.n	80037dc <prvAddCurrentTaskToDelayedList+0x58>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037cc:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	481a      	ldr	r0, [pc, #104]	; (8003840 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037d6:	f7ff f8f7 	bl	80029c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037da:	e026      	b.n	800382a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037e4:	4b14      	ldr	r3, [pc, #80]	; (8003838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d209      	bcs.n	8003808 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037f4:	4b13      	ldr	r3, [pc, #76]	; (8003844 <prvAddCurrentTaskToDelayedList+0xc0>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3304      	adds	r3, #4
 80037fe:	4619      	mov	r1, r3
 8003800:	4610      	mov	r0, r2
 8003802:	f7ff f905 	bl	8002a10 <vListInsert>
}
 8003806:	e010      	b.n	800382a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003808:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <prvAddCurrentTaskToDelayedList+0xc4>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <prvAddCurrentTaskToDelayedList+0xb4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3304      	adds	r3, #4
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f7ff f8fb 	bl	8002a10 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800381a:	4b0c      	ldr	r3, [pc, #48]	; (800384c <prvAddCurrentTaskToDelayedList+0xc8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	429a      	cmp	r2, r3
 8003822:	d202      	bcs.n	800382a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003824:	4a09      	ldr	r2, [pc, #36]	; (800384c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	6013      	str	r3, [r2, #0]
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000400 	.word	0x20000400
 8003838:	200002fc 	.word	0x200002fc
 800383c:	20000404 	.word	0x20000404
 8003840:	200003e8 	.word	0x200003e8
 8003844:	200003b8 	.word	0x200003b8
 8003848:	200003b4 	.word	0x200003b4
 800384c:	2000041c 	.word	0x2000041c

08003850 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3b04      	subs	r3, #4
 8003860:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3b04      	subs	r3, #4
 800386e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f023 0201 	bic.w	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3b04      	subs	r3, #4
 800387e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003880:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <pxPortInitialiseStack+0x64>)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3b14      	subs	r3, #20
 800388a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3b04      	subs	r3, #4
 8003896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f06f 0202 	mvn.w	r2, #2
 800389e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3b20      	subs	r3, #32
 80038a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	080038b9 	.word	0x080038b9

080038b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038c2:	4b11      	ldr	r3, [pc, #68]	; (8003908 <prvTaskExitError+0x50>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ca:	d009      	beq.n	80038e0 <prvTaskExitError+0x28>
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e7fe      	b.n	80038de <prvTaskExitError+0x26>
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80038f2:	bf00      	nop
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0fc      	beq.n	80038f4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	2000000c 	.word	0x2000000c
 800390c:	00000000 	.word	0x00000000

08003910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <pxCurrentTCBConst2>)
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	6808      	ldr	r0, [r1, #0]
 8003916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391a:	f380 8809 	msr	PSP, r0
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f04f 0000 	mov.w	r0, #0
 8003926:	f380 8811 	msr	BASEPRI, r0
 800392a:	4770      	bx	lr
 800392c:	f3af 8000 	nop.w

08003930 <pxCurrentTCBConst2>:
 8003930:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop

08003938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003938:	4808      	ldr	r0, [pc, #32]	; (800395c <prvPortStartFirstTask+0x24>)
 800393a:	6800      	ldr	r0, [r0, #0]
 800393c:	6800      	ldr	r0, [r0, #0]
 800393e:	f380 8808 	msr	MSP, r0
 8003942:	f04f 0000 	mov.w	r0, #0
 8003946:	f380 8814 	msr	CONTROL, r0
 800394a:	b662      	cpsie	i
 800394c:	b661      	cpsie	f
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	df00      	svc	0
 8003958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800395a:	bf00      	nop
 800395c:	e000ed08 	.word	0xe000ed08

08003960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003966:	4b4c      	ldr	r3, [pc, #304]	; (8003a98 <xPortStartScheduler+0x138>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a4c      	ldr	r2, [pc, #304]	; (8003a9c <xPortStartScheduler+0x13c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d109      	bne.n	8003984 <xPortStartScheduler+0x24>
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	e7fe      	b.n	8003982 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003984:	4b44      	ldr	r3, [pc, #272]	; (8003a98 <xPortStartScheduler+0x138>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a45      	ldr	r2, [pc, #276]	; (8003aa0 <xPortStartScheduler+0x140>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d109      	bne.n	80039a2 <xPortStartScheduler+0x42>
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	e7fe      	b.n	80039a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039a2:	4b40      	ldr	r3, [pc, #256]	; (8003aa4 <xPortStartScheduler+0x144>)
 80039a4:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	22ff      	movs	r2, #255	; 0xff
 80039b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4b38      	ldr	r3, [pc, #224]	; (8003aa8 <xPortStartScheduler+0x148>)
 80039c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039ca:	4b38      	ldr	r3, [pc, #224]	; (8003aac <xPortStartScheduler+0x14c>)
 80039cc:	2207      	movs	r2, #7
 80039ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039d0:	e009      	b.n	80039e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80039d2:	4b36      	ldr	r3, [pc, #216]	; (8003aac <xPortStartScheduler+0x14c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	4a34      	ldr	r2, [pc, #208]	; (8003aac <xPortStartScheduler+0x14c>)
 80039da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	2b80      	cmp	r3, #128	; 0x80
 80039f0:	d0ef      	beq.n	80039d2 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80039f2:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <xPortStartScheduler+0x14c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f1c3 0307 	rsb	r3, r3, #7
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d009      	beq.n	8003a12 <xPortStartScheduler+0xb2>
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	e7fe      	b.n	8003a10 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a12:	4b26      	ldr	r3, [pc, #152]	; (8003aac <xPortStartScheduler+0x14c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f1c3 0307 	rsb	r3, r3, #7
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d009      	beq.n	8003a32 <xPortStartScheduler+0xd2>
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	e7fe      	b.n	8003a30 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a32:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <xPortStartScheduler+0x14c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	4a1c      	ldr	r2, [pc, #112]	; (8003aac <xPortStartScheduler+0x14c>)
 8003a3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a3c:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <xPortStartScheduler+0x14c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a44:	4a19      	ldr	r2, [pc, #100]	; (8003aac <xPortStartScheduler+0x14c>)
 8003a46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a50:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <xPortStartScheduler+0x150>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <xPortStartScheduler+0x150>)
 8003a56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a5c:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <xPortStartScheduler+0x150>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <xPortStartScheduler+0x150>)
 8003a62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a68:	f000 f8d6 	bl	8003c18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <xPortStartScheduler+0x154>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a72:	f000 f8f5 	bl	8003c60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <xPortStartScheduler+0x158>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <xPortStartScheduler+0x158>)
 8003a7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a82:	f7ff ff59 	bl	8003938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a86:	f7ff fcbd 	bl	8003404 <vTaskSwitchContext>
	prvTaskExitError();
 8003a8a:	f7ff ff15 	bl	80038b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3720      	adds	r7, #32
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	e000ed00 	.word	0xe000ed00
 8003a9c:	410fc271 	.word	0x410fc271
 8003aa0:	410fc270 	.word	0x410fc270
 8003aa4:	e000e400 	.word	0xe000e400
 8003aa8:	20000428 	.word	0x20000428
 8003aac:	2000042c 	.word	0x2000042c
 8003ab0:	e000ed20 	.word	0xe000ed20
 8003ab4:	2000000c 	.word	0x2000000c
 8003ab8:	e000ef34 	.word	0xe000ef34

08003abc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ad4:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <vPortEnterCritical+0x54>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	4a0d      	ldr	r2, [pc, #52]	; (8003b10 <vPortEnterCritical+0x54>)
 8003adc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ade:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <vPortEnterCritical+0x54>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d10e      	bne.n	8003b04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <vPortEnterCritical+0x58>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d009      	beq.n	8003b04 <vPortEnterCritical+0x48>
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	e7fe      	b.n	8003b02 <vPortEnterCritical+0x46>
	}
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	2000000c 	.word	0x2000000c
 8003b14:	e000ed04 	.word	0xe000ed04

08003b18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <vPortExitCritical+0x4c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <vPortExitCritical+0x22>
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	607b      	str	r3, [r7, #4]
 8003b38:	e7fe      	b.n	8003b38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <vPortExitCritical+0x4c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <vPortExitCritical+0x4c>)
 8003b42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <vPortExitCritical+0x4c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <vPortExitCritical+0x3e>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c
	...

08003b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b70:	f3ef 8009 	mrs	r0, PSP
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <pxCurrentTCBConst>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	f01e 0f10 	tst.w	lr, #16
 8003b80:	bf08      	it	eq
 8003b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8a:	6010      	str	r0, [r2, #0]
 8003b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b94:	f380 8811 	msr	BASEPRI, r0
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f7ff fc30 	bl	8003404 <vTaskSwitchContext>
 8003ba4:	f04f 0000 	mov.w	r0, #0
 8003ba8:	f380 8811 	msr	BASEPRI, r0
 8003bac:	bc09      	pop	{r0, r3}
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	6808      	ldr	r0, [r1, #0]
 8003bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb6:	f01e 0f10 	tst.w	lr, #16
 8003bba:	bf08      	it	eq
 8003bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003bc0:	f380 8809 	msr	PSP, r0
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	f3af 8000 	nop.w

08003bd0 <pxCurrentTCBConst>:
 8003bd0:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop

08003bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003bf0:	f7ff fb1e 	bl	8003230 <xTaskIncrementTick>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <SysTick_Handler+0x3c>)
 8003bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	e000ed04 	.word	0xe000ed04

08003c18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <vPortSetupTimerInterrupt+0x34>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <vPortSetupTimerInterrupt+0x38>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <vPortSetupTimerInterrupt+0x3c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <vPortSetupTimerInterrupt+0x40>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	099b      	lsrs	r3, r3, #6
 8003c34:	4a09      	ldr	r2, [pc, #36]	; (8003c5c <vPortSetupTimerInterrupt+0x44>)
 8003c36:	3b01      	subs	r3, #1
 8003c38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c3a:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <vPortSetupTimerInterrupt+0x34>)
 8003c3c:	2207      	movs	r2, #7
 8003c3e:	601a      	str	r2, [r3, #0]
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	e000e010 	.word	0xe000e010
 8003c50:	e000e018 	.word	0xe000e018
 8003c54:	20000000 	.word	0x20000000
 8003c58:	10624dd3 	.word	0x10624dd3
 8003c5c:	e000e014 	.word	0xe000e014

08003c60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003c70 <vPortEnableVFP+0x10>
 8003c64:	6801      	ldr	r1, [r0, #0]
 8003c66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c6a:	6001      	str	r1, [r0, #0]
 8003c6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003c6e:	bf00      	nop
 8003c70:	e000ed88 	.word	0xe000ed88

08003c74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c80:	f7ff fa18 	bl	80030b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c84:	4b5f      	ldr	r3, [pc, #380]	; (8003e04 <pvPortMalloc+0x190>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c8c:	f000 f924 	bl	8003ed8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c90:	4b5d      	ldr	r3, [pc, #372]	; (8003e08 <pvPortMalloc+0x194>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f040 808c 	bne.w	8003db6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01c      	beq.n	8003cde <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d013      	beq.n	8003cde <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f023 0307 	bic.w	r3, r3, #7
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <pvPortMalloc+0x6a>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	e7fe      	b.n	8003cdc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d068      	beq.n	8003db6 <pvPortMalloc+0x142>
 8003ce4:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <pvPortMalloc+0x198>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d863      	bhi.n	8003db6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cee:	4b48      	ldr	r3, [pc, #288]	; (8003e10 <pvPortMalloc+0x19c>)
 8003cf0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003cf2:	4b47      	ldr	r3, [pc, #284]	; (8003e10 <pvPortMalloc+0x19c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cf8:	e004      	b.n	8003d04 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d903      	bls.n	8003d16 <pvPortMalloc+0xa2>
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f1      	bne.n	8003cfa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d16:	4b3b      	ldr	r3, [pc, #236]	; (8003e04 <pvPortMalloc+0x190>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d04a      	beq.n	8003db6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2208      	movs	r2, #8
 8003d26:	4413      	add	r3, r2
 8003d28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	1ad2      	subs	r2, r2, r3
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d91e      	bls.n	8003d80 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4413      	add	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d009      	beq.n	8003d68 <pvPortMalloc+0xf4>
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	e7fe      	b.n	8003d66 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	1ad2      	subs	r2, r2, r3
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d7a:	69b8      	ldr	r0, [r7, #24]
 8003d7c:	f000 f90e 	bl	8003f9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d80:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <pvPortMalloc+0x198>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	4a20      	ldr	r2, [pc, #128]	; (8003e0c <pvPortMalloc+0x198>)
 8003d8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d8e:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <pvPortMalloc+0x198>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <pvPortMalloc+0x1a0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d203      	bcs.n	8003da2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d9a:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <pvPortMalloc+0x198>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <pvPortMalloc+0x1a0>)
 8003da0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	4b18      	ldr	r3, [pc, #96]	; (8003e08 <pvPortMalloc+0x194>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d006      	beq.n	8003dca <pvPortMalloc+0x156>
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	2094      	movs	r0, #148	; 0x94
 8003dc4:	f000 fcfe 	bl	80047c4 <vTraceStoreMemMangEvent>
 8003dc8:	e005      	b.n	8003dd6 <pvPortMalloc+0x162>
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	20e8      	movs	r0, #232	; 0xe8
 8003dd2:	f000 fcf7 	bl	80047c4 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 8003dd6:	f7ff f97b 	bl	80030d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <pvPortMalloc+0x184>
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e7fe      	b.n	8003df6 <pvPortMalloc+0x182>
	return pvReturn;
 8003df8:	69fb      	ldr	r3, [r7, #28]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3728      	adds	r7, #40	; 0x28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20004038 	.word	0x20004038
 8003e08:	20004044 	.word	0x20004044
 8003e0c:	2000403c 	.word	0x2000403c
 8003e10:	20004030 	.word	0x20004030
 8003e14:	20004040 	.word	0x20004040

08003e18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d04e      	beq.n	8003ec8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e2a:	2308      	movs	r3, #8
 8003e2c:	425b      	negs	r3, r3
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4413      	add	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <vPortFree+0xb8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <vPortFree+0x42>
 8003e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e7fe      	b.n	8003e58 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <vPortFree+0x5e>
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	e7fe      	b.n	8003e74 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <vPortFree+0xb8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d021      	beq.n	8003ec8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d11d      	bne.n	8003ec8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <vPortFree+0xb8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	401a      	ands	r2, r3
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e9c:	f7ff f90a 	bl	80030b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <vPortFree+0xbc>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <vPortFree+0xbc>)
 8003eac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	425b      	negs	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2096      	movs	r0, #150	; 0x96
 8003eba:	f000 fc83 	bl	80047c4 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ebe:	6938      	ldr	r0, [r7, #16]
 8003ec0:	f000 f86c 	bl	8003f9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003ec4:	f7ff f904 	bl	80030d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ec8:	bf00      	nop
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20004044 	.word	0x20004044
 8003ed4:	2000403c 	.word	0x2000403c

08003ed8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ede:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003ee2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ee4:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <prvHeapInit+0xac>)
 8003ee6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00c      	beq.n	8003f0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3307      	adds	r3, #7
 8003ef6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0307 	bic.w	r3, r3, #7
 8003efe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <prvHeapInit+0xac>)
 8003f08:	4413      	add	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f10:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <prvHeapInit+0xb0>)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f16:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <prvHeapInit+0xb0>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	4413      	add	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f24:	2208      	movs	r2, #8
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0307 	bic.w	r3, r3, #7
 8003f32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <prvHeapInit+0xb4>)
 8003f38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f3a:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <prvHeapInit+0xb4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <prvHeapInit+0xb4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	1ad2      	subs	r2, r2, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <prvHeapInit+0xb4>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <prvHeapInit+0xb8>)
 8003f66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <prvHeapInit+0xbc>)
 8003f6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <prvHeapInit+0xc0>)
 8003f72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f76:	601a      	str	r2, [r3, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	20000430 	.word	0x20000430
 8003f88:	20004030 	.word	0x20004030
 8003f8c:	20004038 	.word	0x20004038
 8003f90:	20004040 	.word	0x20004040
 8003f94:	2000403c 	.word	0x2000403c
 8003f98:	20004044 	.word	0x20004044

08003f9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fa4:	4b28      	ldr	r3, [pc, #160]	; (8004048 <prvInsertBlockIntoFreeList+0xac>)
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e002      	b.n	8003fb0 <prvInsertBlockIntoFreeList+0x14>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d8f7      	bhi.n	8003faa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d108      	bne.n	8003fde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	441a      	add	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	441a      	add	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d118      	bne.n	8004024 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <prvInsertBlockIntoFreeList+0xb0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d00d      	beq.n	800401a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	441a      	add	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e008      	b.n	800402c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800401a:	4b0c      	ldr	r3, [pc, #48]	; (800404c <prvInsertBlockIntoFreeList+0xb0>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e003      	b.n	800402c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	429a      	cmp	r2, r3
 8004032:	d002      	beq.n	800403a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20004030 	.word	0x20004030
 800404c:	20004038 	.word	0x20004038

08004050 <prvTraceGetTaskNumberLow16>:
	return ucQueueGetQueueType(handle);
}

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff fa4f 	bl	80034fc <uxTaskGetTaskNumber>
 800405e:	4603      	mov	r3, r0
 8004060:	b29b      	uxth	r3, r3
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff fa42 	bl	80034fc <uxTaskGetTaskNumber>
 8004078:	4603      	mov	r3, r0
 800407a:	0c1b      	lsrs	r3, r3, #16
 800407c:	b29b      	uxth	r3, r3
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff fa32 	bl	80034fc <uxTaskGetTaskNumber>
 8004098:	4603      	mov	r3, r0
 800409a:	0c1b      	lsrs	r3, r3, #16
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	887a      	ldrh	r2, [r7, #2]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fa3f 	bl	8003528 <vTaskSetTaskNumber>
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fa1c 	bl	80034fc <uxTaskGetTaskNumber>
 80040c4:	4603      	mov	r3, r0
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	887b      	ldrh	r3, [r7, #2]
 80040ca:	041b      	lsls	r3, r3, #16
 80040cc:	4313      	orrs	r3, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff fa29 	bl	8003528 <vTaskSetTaskNumber>
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { { NULL } };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	int i;
	int foundEmptySlot = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60bb      	str	r3, [r7, #8]

	// find an empty slot
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e017      	b.n	8004122 <prvAddTaskToStackMonitor+0x42>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
 80040f2:	4a14      	ldr	r2, [pc, #80]	; (8004144 <prvAddTaskToStackMonitor+0x64>)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10e      	bne.n	800411c <prvAddTaskToStackMonitor+0x3c>
		{
			tasksInStackMonitor[i].tcb = task;
 80040fe:	4911      	ldr	r1, [pc, #68]	; (8004144 <prvAddTaskToStackMonitor+0x64>)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
 8004108:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <prvAddTaskToStackMonitor+0x64>)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4413      	add	r3, r2
 8004110:	f04f 32ff 	mov.w	r2, #4294967295
 8004114:	605a      	str	r2, [r3, #4]
			foundEmptySlot = 1;
 8004116:	2301      	movs	r3, #1
 8004118:	60bb      	str	r3, [r7, #8]
			break;
 800411a:	e005      	b.n	8004128 <prvAddTaskToStackMonitor+0x48>
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3301      	adds	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b09      	cmp	r3, #9
 8004126:	dde4      	ble.n	80040f2 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d104      	bne.n	8004138 <prvAddTaskToStackMonitor+0x58>
	{
		tasksNotIncluded++;
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <prvAddTaskToStackMonitor+0x68>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3301      	adds	r3, #1
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <prvAddTaskToStackMonitor+0x68>)
 8004136:	6013      	str	r3, [r2, #0]
	}
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	200044a8 	.word	0x200044a8
 8004148:	200044f8 	.word	0x200044f8

0800414c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
 8004156:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <prvReportStackUsage+0xbc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
 800415c:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <prvReportStackUsage+0xbc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a2a      	ldr	r2, [pc, #168]	; (800420c <prvReportStackUsage+0xc0>)
 8004162:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d031      	beq.n	80041ce <prvReportStackUsage+0x82>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
 800416a:	4b27      	ldr	r3, [pc, #156]	; (8004208 <prvReportStackUsage+0xbc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a27      	ldr	r2, [pc, #156]	; (800420c <prvReportStackUsage+0xc0>)
 8004170:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff fa8b 	bl	8003690 <uxTaskGetStackHighWaterMark>
 800417a:	6078      	str	r0, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
 800417c:	4b22      	ldr	r3, [pc, #136]	; (8004208 <prvReportStackUsage+0xbc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a22      	ldr	r2, [pc, #136]	; (800420c <prvReportStackUsage+0xc0>)
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4413      	add	r3, r2
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d206      	bcs.n	800419c <prvReportStackUsage+0x50>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
 800418e:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <prvReportStackUsage+0xbc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1e      	ldr	r2, [pc, #120]	; (800420c <prvReportStackUsage+0xc0>)
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	605a      	str	r2, [r3, #4]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
 800419c:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <prvReportStackUsage+0xbc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1a      	ldr	r2, [pc, #104]	; (800420c <prvReportStackUsage+0xc0>)
 80041a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff ff52 	bl	8004050 <prvTraceGetTaskNumberLow16>
 80041ac:	4603      	mov	r3, r0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	4619      	mov	r1, r3
 80041b2:	4b15      	ldr	r3, [pc, #84]	; (8004208 <prvReportStackUsage+0xbc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a15      	ldr	r2, [pc, #84]	; (800420c <prvReportStackUsage+0xc0>)
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4413      	add	r3, r2
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	460a      	mov	r2, r1
 80041c0:	2103      	movs	r1, #3
 80041c2:	20ea      	movs	r0, #234	; 0xea
 80041c4:	f000 fc06 	bl	80049d4 <prvTraceStoreKernelCallWithParam>
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3301      	adds	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
 80041ce:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <prvReportStackUsage+0xbc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	1c59      	adds	r1, r3, #1
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <prvReportStackUsage+0xc4>)
 80041d6:	fb83 2301 	smull	r2, r3, r3, r1
 80041da:	109a      	asrs	r2, r3, #2
 80041dc:	17cb      	asrs	r3, r1, #31
 80041de:	1ad2      	subs	r2, r2, r3
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	1aca      	subs	r2, r1, r3
 80041ea:	4b07      	ldr	r3, [pc, #28]	; (8004208 <prvReportStackUsage+0xbc>)
 80041ec:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	dc04      	bgt.n	80041fe <prvReportStackUsage+0xb2>
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <prvReportStackUsage+0xbc>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d1ae      	bne.n	800415c <prvReportStackUsage+0x10>
}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	200044fc 	.word	0x200044fc
 800420c:	200044a8 	.word	0x200044a8
 8004210:	66666667 	.word	0x66666667

08004214 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8004218:	f7ff faa4 	bl	8003764 <xTaskGetCurrentTaskHandle>
 800421c:	4603      	mov	r3, r0
}
 800421e:	4618      	mov	r0, r3
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af04      	add	r7, sp, #16
 800422a:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
 800422c:	f000 fe48 	bl	8004ec0 <prvTraceInitTraceData>

	if (startOption == TRC_START)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d102      	bne.n	800423c <vTraceEnable+0x18>
	{
		vTraceStart();
 8004236:	f000 fa31 	bl	800469c <vTraceStart>
 800423a:	e00c      	b.n	8004256 <vTraceEnable+0x32>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d103      	bne.n	800424a <vTraceEnable+0x26>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8004242:	4811      	ldr	r0, [pc, #68]	; (8004288 <vTraceEnable+0x64>)
 8004244:	f001 f8fe 	bl	8005444 <prvTraceError>
 8004248:	e005      	b.n	8004256 <vTraceEnable+0x32>
	}
	else if (startOption != TRC_INIT)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <vTraceEnable+0x32>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 8004250:	480e      	ldr	r0, [pc, #56]	; (800428c <vTraceEnable+0x68>)
 8004252:	f001 f8f7 	bl	8005444 <prvTraceError>
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
 8004256:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <vTraceEnable+0x6c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10f      	bne.n	800427e <vTraceEnable+0x5a>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 800425e:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <vTraceEnable+0x70>)
 8004260:	9302      	str	r3, [sp, #8]
 8004262:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <vTraceEnable+0x74>)
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	2301      	movs	r3, #1
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	2300      	movs	r3, #0
 800426c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004270:	490a      	ldr	r1, [pc, #40]	; (800429c <vTraceEnable+0x78>)
 8004272:	480b      	ldr	r0, [pc, #44]	; (80042a0 <vTraceEnable+0x7c>)
 8004274:	f7fe fc2f 	bl	8002ad6 <xTaskCreateStatic>
 8004278:	4602      	mov	r2, r0
 800427a:	4b05      	ldr	r3, [pc, #20]	; (8004290 <vTraceEnable+0x6c>)
 800427c:	601a      	str	r2, [r3, #0]
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	08006178 	.word	0x08006178
 800428c:	080061b8 	.word	0x080061b8
 8004290:	20004048 	.word	0x20004048
 8004294:	2000444c 	.word	0x2000444c
 8004298:	2000404c 	.word	0x2000404c
 800429c:	080061ec 	.word	0x080061ec
 80042a0:	080042a5 	.word	0x080042a5

080042a4 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
 80042ac:	f000 fa14 	bl	80046d8 <xTraceIsRecordingEnabled>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <TzCtrl+0x16>
		{
			prvReportStackUsage();
 80042b6:	f7ff ff49 	bl	800414c <prvReportStackUsage>
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 80042ba:	200a      	movs	r0, #10
 80042bc:	f7fe fe0c 	bl	8002ed8 <vTaskDelay>
		if (xTraceIsRecordingEnabled())
 80042c0:	e7f4      	b.n	80042ac <TzCtrl+0x8>
	...

080042c4 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 80042c8:	4b64      	ldr	r3, [pc, #400]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2209      	movs	r2, #9
 80042ce:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 80042d0:	4b62      	ldr	r3, [pc, #392]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	220a      	movs	r2, #10
 80042d6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 80042da:	4b60      	ldr	r3, [pc, #384]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	220a      	movs	r2, #10
 80042e0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 80042e4:	4b5d      	ldr	r3, [pc, #372]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	220a      	movs	r2, #10
 80042ea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 80042ee:	4b5b      	ldr	r3, [pc, #364]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	220f      	movs	r2, #15
 80042f4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 80042f8:	4b58      	ldr	r3, [pc, #352]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2205      	movs	r2, #5
 80042fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8004302:	4b56      	ldr	r3, [pc, #344]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2205      	movs	r2, #5
 8004308:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 800430c:	4b53      	ldr	r3, [pc, #332]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2205      	movs	r2, #5
 8004312:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8004316:	4b51      	ldr	r3, [pc, #324]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2205      	movs	r2, #5
 800431c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8004320:	4b4e      	ldr	r3, [pc, #312]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2205      	movs	r2, #5
 8004326:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 800432a:	4b4c      	ldr	r3, [pc, #304]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	220f      	movs	r2, #15
 8004330:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8004334:	4b49      	ldr	r3, [pc, #292]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	220f      	movs	r2, #15
 800433a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 800433e:	4b47      	ldr	r3, [pc, #284]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	220f      	movs	r2, #15
 8004344:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8004348:	4b44      	ldr	r3, [pc, #272]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	220f      	movs	r2, #15
 800434e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8004352:	4b42      	ldr	r3, [pc, #264]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	220f      	movs	r2, #15
 8004358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 800435c:	4b3f      	ldr	r3, [pc, #252]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	220f      	movs	r2, #15
 8004362:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8004366:	4b3d      	ldr	r3, [pc, #244]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	220f      	movs	r2, #15
 800436c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8004370:	4b3a      	ldr	r3, [pc, #232]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	220f      	movs	r2, #15
 8004376:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 800437a:	4b38      	ldr	r3, [pc, #224]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	220f      	movs	r2, #15
 8004380:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8004384:	4b35      	ldr	r3, [pc, #212]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2210      	movs	r2, #16
 800438a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 800438e:	4b33      	ldr	r3, [pc, #204]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2210      	movs	r2, #16
 8004394:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8004398:	4b30      	ldr	r3, [pc, #192]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2210      	movs	r2, #16
 800439e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 80043a2:	4b2e      	ldr	r3, [pc, #184]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2213      	movs	r2, #19
 80043a8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 80043ac:	4b2b      	ldr	r3, [pc, #172]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2211      	movs	r2, #17
 80043b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 80043b6:	4b29      	ldr	r3, [pc, #164]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2210      	movs	r2, #16
 80043bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 80043c0:	4b26      	ldr	r3, [pc, #152]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2213      	movs	r2, #19
 80043c6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 80043ca:	4b24      	ldr	r3, [pc, #144]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2213      	movs	r2, #19
 80043d0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 80043d4:	4b21      	ldr	r3, [pc, #132]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2213      	movs	r2, #19
 80043da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 80043de:	4b1f      	ldr	r3, [pc, #124]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 80043e8:	4b1c      	ldr	r3, [pc, #112]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	22a0      	movs	r2, #160	; 0xa0
 80043ee:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 80043f2:	4b1a      	ldr	r3, [pc, #104]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80043fa:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004406:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 800440a:	4b14      	ldr	r3, [pc, #80]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f240 22fd 	movw	r2, #765	; 0x2fd
 8004412:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f240 3252 	movw	r2, #850	; 0x352
 800441e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8004422:	4b0e      	ldr	r3, [pc, #56]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f240 32a2 	movw	r2, #930	; 0x3a2
 800442a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 800442e:	4b0b      	ldr	r3, [pc, #44]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f240 4201 	movw	r2, #1025	; 0x401
 8004436:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 800443a:	4b08      	ldr	r3, [pc, #32]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8004442:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <vTraceInitObjectPropertyTable+0x198>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800444e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	200045bc 	.word	0x200045bc

08004460 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8004464:	4b2f      	ldr	r3, [pc, #188]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 8004466:	2200      	movs	r2, #0
 8004468:	825a      	strh	r2, [r3, #18]
 800446a:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 800446c:	8a5a      	ldrh	r2, [r3, #18]
 800446e:	4b2d      	ldr	r3, [pc, #180]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 8004470:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8004472:	4b2c      	ldr	r3, [pc, #176]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 8004474:	220a      	movs	r2, #10
 8004476:	829a      	strh	r2, [r3, #20]
 8004478:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 800447a:	8a9a      	ldrh	r2, [r3, #20]
 800447c:	4b29      	ldr	r3, [pc, #164]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 800447e:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8004480:	4b28      	ldr	r3, [pc, #160]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 8004482:	2214      	movs	r2, #20
 8004484:	82da      	strh	r2, [r3, #22]
 8004486:	4b27      	ldr	r3, [pc, #156]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 8004488:	8ada      	ldrh	r2, [r3, #22]
 800448a:	4b26      	ldr	r3, [pc, #152]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 800448c:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 800448e:	4b25      	ldr	r3, [pc, #148]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 8004490:	221e      	movs	r2, #30
 8004492:	831a      	strh	r2, [r3, #24]
 8004494:	4b23      	ldr	r3, [pc, #140]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 8004496:	8b1a      	ldrh	r2, [r3, #24]
 8004498:	4b22      	ldr	r3, [pc, #136]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 800449a:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 800449c:	4b21      	ldr	r3, [pc, #132]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 800449e:	222d      	movs	r2, #45	; 0x2d
 80044a0:	835a      	strh	r2, [r3, #26]
 80044a2:	4b20      	ldr	r3, [pc, #128]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044a4:	8b5a      	ldrh	r2, [r3, #26]
 80044a6:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044a8:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 80044aa:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044ac:	2232      	movs	r2, #50	; 0x32
 80044ae:	839a      	strh	r2, [r3, #28]
 80044b0:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044b2:	8b9a      	ldrh	r2, [r3, #28]
 80044b4:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044b6:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 80044b8:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044ba:	2237      	movs	r2, #55	; 0x37
 80044bc:	83da      	strh	r2, [r3, #30]
 80044be:	4b19      	ldr	r3, [pc, #100]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044c0:	8bda      	ldrh	r2, [r3, #30]
 80044c2:	4b18      	ldr	r3, [pc, #96]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044c4:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 80044c6:	4b17      	ldr	r3, [pc, #92]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044c8:	223c      	movs	r2, #60	; 0x3c
 80044ca:	841a      	strh	r2, [r3, #32]
 80044cc:	4b15      	ldr	r3, [pc, #84]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044ce:	8c1a      	ldrh	r2, [r3, #32]
 80044d0:	4b14      	ldr	r3, [pc, #80]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044d2:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 80044d4:	4b13      	ldr	r3, [pc, #76]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044d6:	2241      	movs	r2, #65	; 0x41
 80044d8:	845a      	strh	r2, [r3, #34]	; 0x22
 80044da:	4b12      	ldr	r3, [pc, #72]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044dc:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80044de:	4b11      	ldr	r3, [pc, #68]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044e0:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 80044e2:	4b10      	ldr	r3, [pc, #64]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044e4:	2209      	movs	r2, #9
 80044e6:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 80044e8:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044ea:	2213      	movs	r2, #19
 80044ec:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044f0:	221d      	movs	r2, #29
 80044f2:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 80044f4:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044f6:	222c      	movs	r2, #44	; 0x2c
 80044f8:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 80044fc:	2231      	movs	r2, #49	; 0x31
 80044fe:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 8004502:	2236      	movs	r2, #54	; 0x36
 8004504:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 8004508:	223b      	movs	r2, #59	; 0x3b
 800450a:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 800450e:	2240      	movs	r2, #64	; 0x40
 8004510:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8004512:	4b04      	ldr	r3, [pc, #16]	; (8004524 <vTraceInitObjectHandleStack+0xc4>)
 8004514:	2245      	movs	r2, #69	; 0x45
 8004516:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8004518:	bf00      	nop
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	2000452c 	.word	0x2000452c

08004528 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d827      	bhi.n	8004588 <pszTraceGetErrorNotEnoughHandles+0x60>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <pszTraceGetErrorNotEnoughHandles+0x18>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004575 	.word	0x08004575
 8004544:	0800456d 	.word	0x0800456d
 8004548:	08004571 	.word	0x08004571
 800454c:	08004565 	.word	0x08004565
 8004550:	08004569 	.word	0x08004569
 8004554:	08004579 	.word	0x08004579
 8004558:	0800457d 	.word	0x0800457d
 800455c:	08004581 	.word	0x08004581
 8004560:	08004585 	.word	0x08004585
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8004566:	e010      	b.n	800458a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <pszTraceGetErrorNotEnoughHandles+0x74>)
 800456a:	e00e      	b.n	800458a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <pszTraceGetErrorNotEnoughHandles+0x78>)
 800456e:	e00c      	b.n	800458a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 8004572:	e00a      	b.n	800458a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <pszTraceGetErrorNotEnoughHandles+0x80>)
 8004576:	e008      	b.n	800458a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <pszTraceGetErrorNotEnoughHandles+0x84>)
 800457a:	e006      	b.n	800458a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <pszTraceGetErrorNotEnoughHandles+0x88>)
 800457e:	e004      	b.n	800458a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8004582:	e002      	b.n	800458a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <pszTraceGetErrorNotEnoughHandles+0x90>)
 8004586:	e000      	b.n	800458a <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	080061f4 	.word	0x080061f4
 800459c:	0800623c 	.word	0x0800623c
 80045a0:	08006284 	.word	0x08006284
 80045a4:	080062d8 	.word	0x080062d8
 80045a8:	08006324 	.word	0x08006324
 80045ac:	08006370 	.word	0x08006370
 80045b0:	080063bc 	.word	0x080063bc
 80045b4:	08006410 	.word	0x08006410
 80045b8:	08006468 	.word	0x08006468
 80045bc:	080064c4 	.word	0x080064c4

080045c0 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == NULL)
 80045ca:	4b2f      	ldr	r3, [pc, #188]	; (8004688 <uiTraceStart+0xc8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <uiTraceStart+0x28>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 80045d2:	4b2d      	ldr	r3, [pc, #180]	; (8004688 <uiTraceStart+0xc8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d104      	bne.n	80045e4 <uiTraceStart+0x24>
 80045da:	482c      	ldr	r0, [pc, #176]	; (800468c <uiTraceStart+0xcc>)
 80045dc:	f000 ff32 	bl	8005444 <prvTraceError>
 80045e0:	2300      	movs	r3, #0
 80045e2:	e04c      	b.n	800467e <uiTraceStart+0xbe>
		return 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	e04a      	b.n	800467e <uiTraceStart+0xbe>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 80045e8:	4b27      	ldr	r3, [pc, #156]	; (8004688 <uiTraceStart+0xc8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <uiTraceStart+0x36>
		return 1; /* Already running */
 80045f2:	2301      	movs	r3, #1
 80045f4:	e043      	b.n	800467e <uiTraceStart+0xbe>

	if (traceErrorMessage == NULL)
 80045f6:	4b26      	ldr	r3, [pc, #152]	; (8004690 <uiTraceStart+0xd0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d13c      	bne.n	8004678 <uiTraceStart+0xb8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004602:	60bb      	str	r3, [r7, #8]
  return(result);
 8004604:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	2301      	movs	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f383 8810 	msr	PRIMASK, r3
 8004612:	4b20      	ldr	r3, [pc, #128]	; (8004694 <uiTraceStart+0xd4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3301      	adds	r3, #1
 8004618:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <uiTraceStart+0xd4>)
 800461a:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 800461c:	4b1a      	ldr	r3, [pc, #104]	; (8004688 <uiTraceStart+0xc8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2201      	movs	r2, #1
 8004622:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8004624:	f7ff fdf6 	bl	8004214 <prvTraceGetCurrentTaskHandle>
 8004628:	4603      	mov	r3, r0
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fd10 	bl	8004050 <prvTraceGetTaskNumberLow16>
 8004630:	4603      	mov	r3, r0
 8004632:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d110      	bne.n	800465c <uiTraceStart+0x9c>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 800463a:	2003      	movs	r0, #3
 800463c:	f000 fdd2 	bl	80051e4 <prvTraceGetObjectHandle>
 8004640:	4603      	mov	r3, r0
 8004642:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	4a14      	ldr	r2, [pc, #80]	; (8004698 <uiTraceStart+0xd8>)
 8004648:	4619      	mov	r1, r3
 800464a:	2003      	movs	r0, #3
 800464c:	f000 fe9c 	bl	8005388 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	2200      	movs	r2, #0
 8004654:	4619      	mov	r1, r3
 8004656:	2003      	movs	r0, #3
 8004658:	f000 fb54 	bl	8004d04 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 800465c:	7dfb      	ldrb	r3, [r7, #23]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fae0 	bl	8004c24 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8004664:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <uiTraceStart+0xd4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3b01      	subs	r3, #1
 800466a:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <uiTraceStart+0xd4>)
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	607b      	str	r3, [r7, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
 8004678:	4b03      	ldr	r3, [pc, #12]	; (8004688 <uiTraceStart+0xc8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	200045bc 	.word	0x200045bc
 800468c:	080064f4 	.word	0x080064f4
 8004690:	2000451c 	.word	0x2000451c
 8004694:	20004514 	.word	0x20004514
 8004698:	08006538 	.word	0x08006538

0800469c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
 80046a0:	f7ff ff8e 	bl	80045c0 <uiTraceStart>
}
 80046a4:	bf00      	nop
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 80046ac:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <vTraceStop+0x28>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 80046b4:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <vTraceStop+0x28>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <vTraceStop+0x2c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <vTraceStop+0x2c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4798      	blx	r3
	}
}
 80046ca:	bf00      	nop
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	200045bc 	.word	0x200045bc
 80046d4:	20004524 	.word	0x20004524

080046d8 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <xTraceIsRecordingEnabled+0x20>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
 80046e4:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <xTraceIsRecordingEnabled+0x20>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	e000      	b.n	80046ee <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
 80046ec:	2300      	movs	r3, #0
	}
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	200045bc 	.word	0x200045bc

080046fc <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d04a      	beq.n	80047a2 <prvTraceStoreTaskReady+0xa6>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 800470c:	4b28      	ldr	r3, [pc, #160]	; (80047b0 <prvTraceStoreTaskReady+0xb4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d048      	beq.n	80047a6 <prvTraceStoreTaskReady+0xaa>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	2b0f      	cmp	r3, #15
 8004718:	d903      	bls.n	8004722 <prvTraceStoreTaskReady+0x26>
 800471a:	4826      	ldr	r0, [pc, #152]	; (80047b4 <prvTraceStoreTaskReady+0xb8>)
 800471c:	f000 fe92 	bl	8005444 <prvTraceError>
 8004720:	e042      	b.n	80047a8 <prvTraceStoreTaskReady+0xac>

	if (recorder_busy)
 8004722:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <prvTraceStoreTaskReady+0xbc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <prvTraceStoreTaskReady+0x36>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 800472a:	4824      	ldr	r0, [pc, #144]	; (80047bc <prvTraceStoreTaskReady+0xc0>)
 800472c:	f000 fe8a 	bl	8005444 <prvTraceError>
		return;
 8004730:	e03a      	b.n	80047a8 <prvTraceStoreTaskReady+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004732:	f3ef 8310 	mrs	r3, PRIMASK
 8004736:	60fb      	str	r3, [r7, #12]
  return(result);
 8004738:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	2301      	movs	r3, #1
 800473e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f383 8810 	msr	PRIMASK, r3
 8004746:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <prvTraceStoreTaskReady+0xbc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3301      	adds	r3, #1
 800474c:	4a1a      	ldr	r2, [pc, #104]	; (80047b8 <prvTraceStoreTaskReady+0xbc>)
 800474e:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8004750:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <prvTraceStoreTaskReady+0xc4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	2b00      	cmp	r3, #0
 8004758:	d018      	beq.n	800478c <prvTraceStoreTaskReady+0x90>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800475a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800475e:	f000 ff4f 	bl	8005600 <prvTraceGetDTS>
 8004762:	4603      	mov	r3, r0
 8004764:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 800476a:	f000 fcbf 	bl	80050ec <prvTraceNextFreeEventBufferSlot>
 800476e:	6178      	str	r0, [r7, #20]
		if (tr != NULL)
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <prvTraceStoreTaskReady+0x90>
		{
			tr->type = DIV_TASK_READY;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2202      	movs	r2, #2
 800477a:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	8b7a      	ldrh	r2, [r7, #26]
 8004780:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	7e7a      	ldrb	r2, [r7, #25]
 8004786:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8004788:	f000 ff12 	bl	80055b0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <prvTraceStoreTaskReady+0xbc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3b01      	subs	r3, #1
 8004792:	4a09      	ldr	r2, [pc, #36]	; (80047b8 <prvTraceStoreTaskReady+0xbc>)
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f383 8810 	msr	PRIMASK, r3
 80047a0:	e002      	b.n	80047a8 <prvTraceStoreTaskReady+0xac>
		return;
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <prvTraceStoreTaskReady+0xac>
		return;
 80047a6:	bf00      	nop
}
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000010 	.word	0x20000010
 80047b4:	080068a0 	.word	0x080068a0
 80047b8:	20004514 	.word	0x20004514
 80047bc:	080068e0 	.word	0x080068e0
 80047c0:	200045bc 	.word	0x200045bc

080047c4 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08e      	sub	sp, #56	; 0x38
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 80047d0:	4b3f      	ldr	r3, [pc, #252]	; (80048d0 <vTraceStoreMemMangEvent+0x10c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d077      	beq.n	80048c8 <vTraceStoreMemMangEvent+0x104>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	da03      	bge.n	80047e6 <vTraceStoreMemMangEvent+0x22>
		size = (uint32_t)(- signed_size);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	425b      	negs	r3, r3
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34
 80047e4:	e001      	b.n	80047ea <vTraceStoreMemMangEvent+0x26>
	else
		size = (uint32_t)(signed_size);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ea:	f3ef 8310 	mrs	r3, PRIMASK
 80047ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80047f0:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30
 80047f4:	2301      	movs	r3, #1
 80047f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f383 8810 	msr	PRIMASK, r3
 80047fe:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <vTraceStoreMemMangEvent+0x110>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	4a33      	ldr	r2, [pc, #204]	; (80048d4 <vTraceStoreMemMangEvent+0x110>)
 8004806:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <vTraceStoreMemMangEvent+0x56>
		heapMemUsage += (uint32_t)signed_size;
 800480e:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <vTraceStoreMemMangEvent+0x114>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4413      	add	r3, r2
 8004816:	4a30      	ldr	r2, [pc, #192]	; (80048d8 <vTraceStoreMemMangEvent+0x114>)
 8004818:	6013      	str	r3, [r2, #0]
	
	if (RecorderDataPtr->recorderActive)
 800481a:	4b2d      	ldr	r3, [pc, #180]	; (80048d0 <vTraceStoreMemMangEvent+0x10c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	2b00      	cmp	r3, #0
 8004822:	d046      	beq.n	80048b2 <vTraceStoreMemMangEvent+0xee>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8004824:	20ff      	movs	r0, #255	; 0xff
 8004826:	f000 feeb 	bl	8005600 <prvTraceGetDTS>
 800482a:	4603      	mov	r3, r0
 800482c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8004830:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004832:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004836:	f000 f955 	bl	8004ae4 <prvTraceGetParam>
 800483a:	4603      	mov	r3, r0
 800483c:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 800483e:	f000 fc55 	bl	80050ec <prvTraceNextFreeEventBufferSlot>
 8004842:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != NULL)
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	2b00      	cmp	r3, #0
 8004848:	d033      	beq.n	80048b2 <vTraceStoreMemMangEvent+0xee>
		{
			ms->dts = dts1;
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004850:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800485c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800485e:	f000 fea7 	bl	80055b0 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004868:	f000 f93c 	bl	8004ae4 <prvTraceGetParam>
 800486c:	4603      	mov	r3, r0
 800486e:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8004876:	f000 fc39 	bl	80050ec <prvTraceNextFreeEventBufferSlot>
 800487a:	6238      	str	r0, [r7, #32]
			if (ma != NULL)
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d017      	beq.n	80048b2 <vTraceStoreMemMangEvent+0xee>
			{
				ma->addr_low = addr_low;
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004886:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800488e:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	3301      	adds	r3, #1
 8004896:	b2da      	uxtb	r2, r3
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
 80048a4:	f000 fe84 	bl	80055b0 <prvTraceUpdateCounters>
				RecorderDataPtr->heapMemUsage = heapMemUsage;
 80048a8:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <vTraceStoreMemMangEvent+0x10c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <vTraceStoreMemMangEvent+0x114>)
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
 80048b2:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <vTraceStoreMemMangEvent+0x110>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	4a06      	ldr	r2, [pc, #24]	; (80048d4 <vTraceStoreMemMangEvent+0x110>)
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f383 8810 	msr	PRIMASK, r3
 80048c6:	e000      	b.n	80048ca <vTraceStoreMemMangEvent+0x106>
		return;
 80048c8:	bf00      	nop
}
 80048ca:	3738      	adds	r7, #56	; 0x38
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	200045bc 	.word	0x200045bc
 80048d4:	20004514 	.word	0x20004514
 80048d8:	20004528 	.word	0x20004528

080048dc <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	; 0x28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	460b      	mov	r3, r1
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	72fb      	strb	r3, [r7, #11]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2bfe      	cmp	r3, #254	; 0xfe
 80048ee:	d903      	bls.n	80048f8 <prvTraceStoreKernelCall+0x1c>
 80048f0:	4831      	ldr	r0, [pc, #196]	; (80049b8 <prvTraceStoreKernelCall+0xdc>)
 80048f2:	f000 fda7 	bl	8005444 <prvTraceError>
 80048f6:	e05c      	b.n	80049b2 <prvTraceStoreKernelCall+0xd6>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 80048f8:	7afb      	ldrb	r3, [r7, #11]
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d903      	bls.n	8004906 <prvTraceStoreKernelCall+0x2a>
 80048fe:	482f      	ldr	r0, [pc, #188]	; (80049bc <prvTraceStoreKernelCall+0xe0>)
 8004900:	f000 fda0 	bl	8005444 <prvTraceError>
 8004904:	e055      	b.n	80049b2 <prvTraceStoreKernelCall+0xd6>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 8004906:	4b2e      	ldr	r3, [pc, #184]	; (80049c0 <prvTraceStoreKernelCall+0xe4>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	7afb      	ldrb	r3, [r7, #11]
 800490c:	4413      	add	r3, r2
 800490e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004912:	461a      	mov	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4293      	cmp	r3, r2
 8004918:	d903      	bls.n	8004922 <prvTraceStoreKernelCall+0x46>
 800491a:	482a      	ldr	r0, [pc, #168]	; (80049c4 <prvTraceStoreKernelCall+0xe8>)
 800491c:	f000 fd92 	bl	8005444 <prvTraceError>
 8004920:	e047      	b.n	80049b2 <prvTraceStoreKernelCall+0xd6>

	if (recorder_busy)
 8004922:	4b29      	ldr	r3, [pc, #164]	; (80049c8 <prvTraceStoreKernelCall+0xec>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <prvTraceStoreKernelCall+0x56>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 800492a:	4828      	ldr	r0, [pc, #160]	; (80049cc <prvTraceStoreKernelCall+0xf0>)
 800492c:	f000 fd8a 	bl	8005444 <prvTraceError>
		return;
 8004930:	e03f      	b.n	80049b2 <prvTraceStoreKernelCall+0xd6>
	}

	if (handle_of_last_logged_task == 0)
 8004932:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <prvTraceStoreKernelCall+0xf4>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d03a      	beq.n	80049b0 <prvTraceStoreKernelCall+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800493a:	f3ef 8310 	mrs	r3, PRIMASK
 800493e:	617b      	str	r3, [r7, #20]
  return(result);
 8004940:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
 8004944:	2301      	movs	r3, #1
 8004946:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f383 8810 	msr	PRIMASK, r3
 800494e:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <prvTraceStoreKernelCall+0xec>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <prvTraceStoreKernelCall+0xec>)
 8004956:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 8004958:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <prvTraceStoreKernelCall+0xe4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01b      	beq.n	800499a <prvTraceStoreKernelCall+0xbe>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8004962:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004966:	f000 fe4b 	bl	8005600 <prvTraceGetDTS>
 800496a:	4603      	mov	r3, r0
 800496c:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8004974:	f000 fbba 	bl	80050ec <prvTraceNextFreeEventBufferSlot>
 8004978:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00c      	beq.n	800499a <prvTraceStoreKernelCall+0xbe>
		{
			kse->dts = dts1;
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004984:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004994:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8004996:	f000 fe0b 	bl	80055b0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800499a:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <prvTraceStoreKernelCall+0xec>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3b01      	subs	r3, #1
 80049a0:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <prvTraceStoreKernelCall+0xec>)
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f383 8810 	msr	PRIMASK, r3
 80049ae:	e000      	b.n	80049b2 <prvTraceStoreKernelCall+0xd6>
		return;
 80049b0:	bf00      	nop
}
 80049b2:	3728      	adds	r7, #40	; 0x28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	08006950 	.word	0x08006950
 80049bc:	08006988 	.word	0x08006988
 80049c0:	200045bc 	.word	0x200045bc
 80049c4:	080069d0 	.word	0x080069d0
 80049c8:	20004514 	.word	0x20004514
 80049cc:	08006a18 	.word	0x08006a18
 80049d0:	20004520 	.word	0x20004520

080049d4 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08a      	sub	sp, #40	; 0x28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	607a      	str	r2, [r7, #4]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	460b      	mov	r3, r1
 80049e2:	72fb      	strb	r3, [r7, #11]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2bfe      	cmp	r3, #254	; 0xfe
 80049e8:	d903      	bls.n	80049f2 <prvTraceStoreKernelCallWithParam+0x1e>
 80049ea:	4837      	ldr	r0, [pc, #220]	; (8004ac8 <prvTraceStoreKernelCallWithParam+0xf4>)
 80049ec:	f000 fd2a 	bl	8005444 <prvTraceError>
 80049f0:	e066      	b.n	8004ac0 <prvTraceStoreKernelCallWithParam+0xec>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 80049f2:	7afb      	ldrb	r3, [r7, #11]
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d903      	bls.n	8004a00 <prvTraceStoreKernelCallWithParam+0x2c>
 80049f8:	4834      	ldr	r0, [pc, #208]	; (8004acc <prvTraceStoreKernelCallWithParam+0xf8>)
 80049fa:	f000 fd23 	bl	8005444 <prvTraceError>
 80049fe:	e05f      	b.n	8004ac0 <prvTraceStoreKernelCallWithParam+0xec>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 8004a00:	4b33      	ldr	r3, [pc, #204]	; (8004ad0 <prvTraceStoreKernelCallWithParam+0xfc>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	7afb      	ldrb	r3, [r7, #11]
 8004a06:	4413      	add	r3, r2
 8004a08:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d903      	bls.n	8004a1c <prvTraceStoreKernelCallWithParam+0x48>
 8004a14:	482f      	ldr	r0, [pc, #188]	; (8004ad4 <prvTraceStoreKernelCallWithParam+0x100>)
 8004a16:	f000 fd15 	bl	8005444 <prvTraceError>
 8004a1a:	e051      	b.n	8004ac0 <prvTraceStoreKernelCallWithParam+0xec>

	if (recorder_busy)
 8004a1c:	4b2e      	ldr	r3, [pc, #184]	; (8004ad8 <prvTraceStoreKernelCallWithParam+0x104>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <prvTraceStoreKernelCallWithParam+0x58>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8004a24:	482d      	ldr	r0, [pc, #180]	; (8004adc <prvTraceStoreKernelCallWithParam+0x108>)
 8004a26:	f000 fd0d 	bl	8005444 <prvTraceError>
		return;
 8004a2a:	e049      	b.n	8004ac0 <prvTraceStoreKernelCallWithParam+0xec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a30:	617b      	str	r3, [r7, #20]
  return(result);
 8004a32:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
 8004a36:	2301      	movs	r3, #1
 8004a38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f383 8810 	msr	PRIMASK, r3
 8004a40:	4b25      	ldr	r3, [pc, #148]	; (8004ad8 <prvTraceStoreKernelCallWithParam+0x104>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	4a24      	ldr	r2, [pc, #144]	; (8004ad8 <prvTraceStoreKernelCallWithParam+0x104>)
 8004a48:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8004a4a:	4b21      	ldr	r3, [pc, #132]	; (8004ad0 <prvTraceStoreKernelCallWithParam+0xfc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d02b      	beq.n	8004aac <prvTraceStoreKernelCallWithParam+0xd8>
 8004a54:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <prvTraceStoreKernelCallWithParam+0x10c>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d027      	beq.n	8004aac <prvTraceStoreKernelCallWithParam+0xd8>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8004a5c:	20ff      	movs	r0, #255	; 0xff
 8004a5e:	f000 fdcf 	bl	8005600 <prvTraceGetDTS>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8004a68:	6839      	ldr	r1, [r7, #0]
 8004a6a:	20ff      	movs	r0, #255	; 0xff
 8004a6c:	f000 f83a 	bl	8004ae4 <prvTraceGetParam>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 8004a7c:	f000 fb36 	bl	80050ec <prvTraceNextFreeEventBufferSlot>
 8004a80:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d011      	beq.n	8004aac <prvTraceStoreKernelCallWithParam+0xd8>
		{
			kse->dts = dts2;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004a8e:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004a9e:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8004aa6:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 8004aa8:	f000 fd82 	bl	80055b0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <prvTraceStoreKernelCallWithParam+0x104>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	4a09      	ldr	r2, [pc, #36]	; (8004ad8 <prvTraceStoreKernelCallWithParam+0x104>)
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f383 8810 	msr	PRIMASK, r3
}
 8004ac0:	3728      	adds	r7, #40	; 0x28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	08006a50 	.word	0x08006a50
 8004acc:	08006a90 	.word	0x08006a90
 8004ad0:	200045bc 	.word	0x200045bc
 8004ad4:	08006ae0 	.word	0x08006ae0
 8004ad8:	20004514 	.word	0x20004514
 8004adc:	08006b30 	.word	0x08006b30
 8004ae0:	20004520 	.word	0x20004520

08004ae4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2bff      	cmp	r3, #255	; 0xff
 8004af2:	d009      	beq.n	8004b08 <prvTraceGetParam+0x24>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <prvTraceGetParam+0x24>
 8004afe:	4816      	ldr	r0, [pc, #88]	; (8004b58 <prvTraceGetParam+0x74>)
 8004b00:	f000 fca0 	bl	8005444 <prvTraceError>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	e023      	b.n	8004b50 <prvTraceGetParam+0x6c>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d801      	bhi.n	8004b14 <prvTraceGetParam+0x30>
	{
		return param;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	e01d      	b.n	8004b50 <prvTraceGetParam+0x6c>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8004b14:	f000 faea 	bl	80050ec <prvTraceNextFreeEventBufferSlot>
 8004b18:	60f8      	str	r0, [r7, #12]
		if (xps != NULL)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d014      	beq.n	8004b4a <prvTraceGetParam+0x66>
		{
			xps->type = DIV_XPS;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	43da      	mvns	r2, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	43da      	mvns	r2, r3
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	0c1b      	lsrs	r3, r3, #16
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8004b46:	f000 fd33 	bl	80055b0 <prvTraceUpdateCounters>
		}

		return param & param_max;
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4013      	ands	r3, r2
	}
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	08006b68 	.word	0x08006b68

08004b5c <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08a      	sub	sp, #40	; 0x28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2bfe      	cmp	r3, #254	; 0xfe
 8004b6e:	d903      	bls.n	8004b78 <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
 8004b70:	4827      	ldr	r0, [pc, #156]	; (8004c10 <prvTraceStoreKernelCallWithNumericParamOnly+0xb4>)
 8004b72:	f000 fc67 	bl	8005444 <prvTraceError>
 8004b76:	e047      	b.n	8004c08 <prvTraceStoreKernelCallWithNumericParamOnly+0xac>

	if (recorder_busy)
 8004b78:	4b26      	ldr	r3, [pc, #152]	; (8004c14 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <prvTraceStoreKernelCallWithNumericParamOnly+0x2c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8004b80:	4825      	ldr	r0, [pc, #148]	; (8004c18 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8004b82:	f000 fc5f 	bl	8005444 <prvTraceError>
		return;
 8004b86:	e03f      	b.n	8004c08 <prvTraceStoreKernelCallWithNumericParamOnly+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b88:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8c:	613b      	str	r3, [r7, #16]
  return(result);
 8004b8e:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8004b90:	623b      	str	r3, [r7, #32]
 8004b92:	2301      	movs	r3, #1
 8004b94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f383 8810 	msr	PRIMASK, r3
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	4a1c      	ldr	r2, [pc, #112]	; (8004c14 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8004ba4:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	; (8004c1c <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d021      	beq.n	8004bf4 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01d      	beq.n	8004bf4 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 8004bb8:	20ff      	movs	r0, #255	; 0xff
 8004bba:	f000 fd21 	bl	8005600 <prvTraceGetDTS>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 8004bc2:	6839      	ldr	r1, [r7, #0]
 8004bc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004bc8:	f7ff ff8c 	bl	8004ae4 <prvTraceGetParam>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8004bd0:	f000 fa8c 	bl	80050ec <prvTraceNextFreeEventBufferSlot>
 8004bd4:	61b8      	str	r0, [r7, #24]
		if (kse != NULL)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00b      	beq.n	8004bf4 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>
		{
			kse->dts = dts6;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	7ffa      	ldrb	r2, [r7, #31]
 8004be0:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004bee:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8004bf0:	f000 fcde 	bl	80055b0 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8004bf4:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	4a06      	ldr	r2, [pc, #24]	; (8004c14 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f383 8810 	msr	PRIMASK, r3
}
 8004c08:	3728      	adds	r7, #40	; 0x28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	08006ba4 	.word	0x08006ba4
 8004c14:	20004514 	.word	0x20004514
 8004c18:	08006bfc 	.word	0x08006bfc
 8004c1c:	200045bc 	.word	0x200045bc
 8004c20:	20004520 	.word	0x20004520

08004c24 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	71fb      	strb	r3, [r7, #7]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	2b0f      	cmp	r3, #15
 8004c32:	d903      	bls.n	8004c3c <prvTraceStoreTaskswitch+0x18>
 8004c34:	482e      	ldr	r0, [pc, #184]	; (8004cf0 <prvTraceStoreTaskswitch+0xcc>)
 8004c36:	f000 fc05 	bl	8005444 <prvTraceError>
 8004c3a:	e056      	b.n	8004cea <prvTraceStoreTaskswitch+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c40:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c42:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	2301      	movs	r3, #1
 8004c48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f383 8810 	msr	PRIMASK, r3
 8004c50:	4b28      	ldr	r3, [pc, #160]	; (8004cf4 <prvTraceStoreTaskswitch+0xd0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3301      	adds	r3, #1
 8004c56:	4a27      	ldr	r2, [pc, #156]	; (8004cf4 <prvTraceStoreTaskswitch+0xd0>)
 8004c58:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8004c5a:	4b27      	ldr	r3, [pc, #156]	; (8004cf8 <prvTraceStoreTaskswitch+0xd4>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	79fa      	ldrb	r2, [r7, #7]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d038      	beq.n	8004cd6 <prvTraceStoreTaskswitch+0xb2>
 8004c64:	4b25      	ldr	r3, [pc, #148]	; (8004cfc <prvTraceStoreTaskswitch+0xd8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d033      	beq.n	8004cd6 <prvTraceStoreTaskswitch+0xb2>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8004c6e:	4b24      	ldr	r3, [pc, #144]	; (8004d00 <prvTraceStoreTaskswitch+0xdc>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8004c74:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004c78:	f000 fcc2 	bl	8005600 <prvTraceGetDTS>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 8004c80:	4a1d      	ldr	r2, [pc, #116]	; (8004cf8 <prvTraceStoreTaskswitch+0xd4>)
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <prvTraceStoreTaskswitch+0xd4>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 8004c8c:	f000 fa2e 	bl	80050ec <prvTraceNextFreeEventBufferSlot>
 8004c90:	6178      	str	r0, [r7, #20]

		if (ts != NULL)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01e      	beq.n	8004cd6 <prvTraceStoreTaskswitch+0xb2>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8004c98:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <prvTraceStoreTaskswitch+0xd4>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	2003      	movs	r0, #3
 8004ca0:	f000 f8a8 	bl	8004df4 <prvTraceGetObjectState>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d103      	bne.n	8004cb2 <prvTraceStoreTaskswitch+0x8e>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2207      	movs	r2, #7
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	e002      	b.n	8004cb8 <prvTraceStoreTaskswitch+0x94>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2206      	movs	r2, #6
 8004cb6:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	8b7a      	ldrh	r2, [r7, #26]
 8004cbc:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	7e7a      	ldrb	r2, [r7, #25]
 8004cc2:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <prvTraceStoreTaskswitch+0xd4>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	4619      	mov	r1, r3
 8004ccc:	2003      	movs	r0, #3
 8004cce:	f000 f855 	bl	8004d7c <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 8004cd2:	f000 fc6d 	bl	80055b0 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8004cd6:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <prvTraceStoreTaskswitch+0xd0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	4a05      	ldr	r2, [pc, #20]	; (8004cf4 <prvTraceStoreTaskswitch+0xd0>)
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f383 8810 	msr	PRIMASK, r3
}
 8004cea:	3720      	adds	r7, #32
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	08006c34 	.word	0x08006c34
 8004cf4:	20004514 	.word	0x20004514
 8004cf8:	20004520 	.word	0x20004520
 8004cfc:	200045bc 	.word	0x200045bc
 8004d00:	20004500 	.word	0x20004500

08004d04 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	71fb      	strb	r3, [r7, #7]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	71bb      	strb	r3, [r7, #6]
 8004d12:	4613      	mov	r3, r2
 8004d14:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d903      	bls.n	8004d24 <prvTraceSetPriorityProperty+0x20>
 8004d1c:	4814      	ldr	r0, [pc, #80]	; (8004d70 <prvTraceSetPriorityProperty+0x6c>)
 8004d1e:	f000 fb91 	bl	8005444 <prvTraceError>
 8004d22:	e022      	b.n	8004d6a <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8004d24:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <prvTraceSetPriorityProperty+0x70>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004d30:	79ba      	ldrb	r2, [r7, #6]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d903      	bls.n	8004d3e <prvTraceSetPriorityProperty+0x3a>
 8004d36:	4810      	ldr	r0, [pc, #64]	; (8004d78 <prvTraceSetPriorityProperty+0x74>)
 8004d38:	f000 fb84 	bl	8005444 <prvTraceError>
 8004d3c:	e015      	b.n	8004d6a <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <prvTraceSetPriorityProperty+0x70>)
 8004d40:	681c      	ldr	r4, [r3, #0]
 8004d42:	79fa      	ldrb	r2, [r7, #7]
 8004d44:	79bb      	ldrb	r3, [r7, #6]
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 f9f3 	bl	8005134 <uiIndexOfObject>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4619      	mov	r1, r3
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <prvTraceSetPriorityProperty+0x70>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004d5e:	440b      	add	r3, r1
 8004d60:	3301      	adds	r3, #1
 8004d62:	4423      	add	r3, r4
 8004d64:	797a      	ldrb	r2, [r7, #5]
 8004d66:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd90      	pop	{r4, r7, pc}
 8004d70:	08006dc8 	.word	0x08006dc8
 8004d74:	200045bc 	.word	0x200045bc
 8004d78:	08006e14 	.word	0x08006e14

08004d7c <prvTraceSetObjectState>:

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
}

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
 8004d86:	460b      	mov	r3, r1
 8004d88:	71bb      	strb	r3, [r7, #6]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d903      	bls.n	8004d9c <prvTraceSetObjectState+0x20>
 8004d94:	4814      	ldr	r0, [pc, #80]	; (8004de8 <prvTraceSetObjectState+0x6c>)
 8004d96:	f000 fb55 	bl	8005444 <prvTraceError>
 8004d9a:	e021      	b.n	8004de0 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8004d9c:	4b13      	ldr	r3, [pc, #76]	; (8004dec <prvTraceSetObjectState+0x70>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	4413      	add	r3, r2
 8004da4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004da8:	79ba      	ldrb	r2, [r7, #6]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d903      	bls.n	8004db6 <prvTraceSetObjectState+0x3a>
 8004dae:	4810      	ldr	r0, [pc, #64]	; (8004df0 <prvTraceSetObjectState+0x74>)
 8004db0:	f000 fb48 	bl	8005444 <prvTraceError>
 8004db4:	e014      	b.n	8004de0 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8004db6:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <prvTraceSetObjectState+0x70>)
 8004db8:	681c      	ldr	r4, [r3, #0]
 8004dba:	79fa      	ldrb	r2, [r7, #7]
 8004dbc:	79bb      	ldrb	r3, [r7, #6]
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 f9b7 	bl	8005134 <uiIndexOfObject>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4b08      	ldr	r3, [pc, #32]	; (8004dec <prvTraceSetObjectState+0x70>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004dd6:	440b      	add	r3, r1
 8004dd8:	4423      	add	r3, r4
 8004dda:	797a      	ldrb	r2, [r7, #5]
 8004ddc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd90      	pop	{r4, r7, pc}
 8004de6:	bf00      	nop
 8004de8:	08006ee0 	.word	0x08006ee0
 8004dec:	200045bc 	.word	0x200045bc
 8004df0:	08006f24 	.word	0x08006f24

08004df4 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	460a      	mov	r2, r1
 8004dfe:	71fb      	strb	r3, [r7, #7]
 8004e00:	4613      	mov	r3, r2
 8004e02:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d904      	bls.n	8004e14 <prvTraceGetObjectState+0x20>
 8004e0a:	4815      	ldr	r0, [pc, #84]	; (8004e60 <prvTraceGetObjectState+0x6c>)
 8004e0c:	f000 fb1a 	bl	8005444 <prvTraceError>
 8004e10:	2300      	movs	r3, #0
 8004e12:	e021      	b.n	8004e58 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <prvTraceGetObjectState+0x70>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004e20:	79ba      	ldrb	r2, [r7, #6]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d904      	bls.n	8004e30 <prvTraceGetObjectState+0x3c>
 8004e26:	4810      	ldr	r0, [pc, #64]	; (8004e68 <prvTraceGetObjectState+0x74>)
 8004e28:	f000 fb0c 	bl	8005444 <prvTraceError>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e013      	b.n	8004e58 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8004e30:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <prvTraceGetObjectState+0x70>)
 8004e32:	681c      	ldr	r4, [r3, #0]
 8004e34:	79fa      	ldrb	r2, [r7, #7]
 8004e36:	79bb      	ldrb	r3, [r7, #6]
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f97a 	bl	8005134 <uiIndexOfObject>
 8004e40:	4603      	mov	r3, r0
 8004e42:	4619      	mov	r1, r3
 8004e44:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <prvTraceGetObjectState+0x70>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004e50:	440b      	add	r3, r1
 8004e52:	4423      	add	r3, r4
 8004e54:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd90      	pop	{r4, r7, pc}
 8004e60:	08006f60 	.word	0x08006f60
 8004e64:	200045bc 	.word	0x200045bc
 8004e68:	08006fa4 	.word	0x08006fa4

08004e6c <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8004e6c:	b590      	push	{r4, r7, lr}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	71fb      	strb	r3, [r7, #7]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <prvTraceSetTaskInstanceFinished+0x4c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8004e7e:	79fa      	ldrb	r2, [r7, #7]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d903      	bls.n	8004e8c <prvTraceSetTaskInstanceFinished+0x20>
 8004e84:	480d      	ldr	r0, [pc, #52]	; (8004ebc <prvTraceSetTaskInstanceFinished+0x50>)
 8004e86:	f000 fadd 	bl	8005444 <prvTraceError>
 8004e8a:	e011      	b.n	8004eb0 <prvTraceSetTaskInstanceFinished+0x44>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <prvTraceSetTaskInstanceFinished+0x4c>)
 8004e8e:	681c      	ldr	r4, [r3, #0]
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	2103      	movs	r1, #3
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 f94d 	bl	8005134 <uiIndexOfObject>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <prvTraceSetTaskInstanceFinished+0x4c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8004ea6:	4413      	add	r3, r2
 8004ea8:	4423      	add	r3, r4
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
#endif
}
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd90      	pop	{r4, r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	200045bc 	.word	0x200045bc
 8004ebc:	08006fe0 	.word	0x08006fe0

08004ec0 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
 8004ec4:	4b83      	ldr	r3, [pc, #524]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d103      	bne.n	8004ed4 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8004ecc:	4b81      	ldr	r3, [pc, #516]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004ece:	4a82      	ldr	r2, [pc, #520]	; (80050d8 <prvTraceInitTraceData+0x218>)
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e006      	b.n	8004ee2 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
 8004ed4:	4b7f      	ldr	r3, [pc, #508]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	f000 80f6 	beq.w	80050ce <prvTraceInitTraceData+0x20e>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
 8004ee2:	4b7e      	ldr	r3, [pc, #504]	; (80050dc <prvTraceInitTraceData+0x21c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a7e      	ldr	r2, [pc, #504]	; (80050e0 <prvTraceInitTraceData+0x220>)
 8004ee8:	6013      	str	r3, [r2, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8004eea:	4b7a      	ldr	r3, [pc, #488]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f641 1218 	movw	r2, #6424	; 0x1918
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fd10 	bl	800591a <memset>
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8004efa:	4b76      	ldr	r3, [pc, #472]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 8004f02:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8004f04:	4b73      	ldr	r3, [pc, #460]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2205      	movs	r2, #5
 8004f0a:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8004f0c:	4b71      	ldr	r3, [pc, #452]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2200      	movs	r2, #0
 8004f12:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8004f14:	4b6f      	ldr	r3, [pc, #444]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f641 1218 	movw	r2, #6424	; 0x1918
 8004f1c:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8004f1e:	4b6d      	ldr	r3, [pc, #436]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f26:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
 8004f28:	4b6a      	ldr	r3, [pc, #424]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8004f32:	4b68      	ldr	r3, [pc, #416]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8004f3a:	4b66      	ldr	r3, [pc, #408]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
 8004f42:	f7ff f9bf 	bl	80042c4 <vTraceInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8004f46:	4b63      	ldr	r3, [pc, #396]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 8004f4e:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8004f52:	4b60      	ldr	r3, [pc, #384]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004f5a:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8004f5e:	4b5d      	ldr	r3, [pc, #372]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8004f68:	4b5a      	ldr	r3, [pc, #360]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 8004f70:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8004f74:	4b57      	ldr	r3, [pc, #348]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8004f7c:	2250      	movs	r2, #80	; 0x50
 8004f7e:	4959      	ldr	r1, [pc, #356]	; (80050e4 <prvTraceInitTraceData+0x224>)
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 f9db 	bl	800533c <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8004f86:	4b53      	ldr	r3, [pc, #332]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 8004f8e:	f8c3 2964 	str.w	r2, [r3, #2404]	; 0x964
	RecorderDataPtr->endmarker0 = 0x0A;
 8004f92:	4b50      	ldr	r3, [pc, #320]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004f9a:	330c      	adds	r3, #12
 8004f9c:	220a      	movs	r2, #10
 8004f9e:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker1 = 0x0B;
 8004fa0:	4b4c      	ldr	r3, [pc, #304]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004fa8:	330d      	adds	r3, #13
 8004faa:	220b      	movs	r2, #11
 8004fac:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker2 = 0x0C;
 8004fae:	4b49      	ldr	r3, [pc, #292]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004fb6:	330e      	adds	r3, #14
 8004fb8:	220c      	movs	r2, #12
 8004fba:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker3 = 0x0D;
 8004fbc:	4b45      	ldr	r3, [pc, #276]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004fc4:	330f      	adds	r3, #15
 8004fc6:	220d      	movs	r2, #13
 8004fc8:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker4 = 0x71;
 8004fca:	4b42      	ldr	r3, [pc, #264]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004fd2:	3310      	adds	r3, #16
 8004fd4:	2271      	movs	r2, #113	; 0x71
 8004fd6:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker5 = 0x72;
 8004fd8:	4b3e      	ldr	r3, [pc, #248]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004fe0:	3311      	adds	r3, #17
 8004fe2:	2272      	movs	r2, #114	; 0x72
 8004fe4:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker6 = 0x73;
 8004fe6:	4b3b      	ldr	r3, [pc, #236]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004fee:	3312      	adds	r3, #18
 8004ff0:	2273      	movs	r2, #115	; 0x73
 8004ff2:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker7 = 0x74;
 8004ff4:	4b37      	ldr	r3, [pc, #220]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004ffc:	3313      	adds	r3, #19
 8004ffe:	2274      	movs	r2, #116	; 0x74
 8005000:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker8 = 0xF1;
 8005002:	4b34      	ldr	r3, [pc, #208]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 800500a:	3314      	adds	r3, #20
 800500c:	22f1      	movs	r2, #241	; 0xf1
 800500e:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker9 = 0xF2;
 8005010:	4b30      	ldr	r3, [pc, #192]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8005018:	3315      	adds	r3, #21
 800501a:	22f2      	movs	r2, #242	; 0xf2
 800501c:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker10 = 0xF3;
 800501e:	4b2d      	ldr	r3, [pc, #180]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8005026:	3316      	adds	r3, #22
 8005028:	22f3      	movs	r2, #243	; 0xf3
 800502a:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker11 = 0xF4;
 800502c:	4b29      	ldr	r3, [pc, #164]	; (80050d4 <prvTraceInitTraceData+0x214>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8005034:	3317      	adds	r3, #23
 8005036:	22f4      	movs	r2, #244	; 0xf4
 8005038:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
 800503a:	f7ff fa11 	bl	8004460 <vTraceInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
 800503e:	4b25      	ldr	r3, [pc, #148]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	22f4      	movs	r2, #244	; 0xf4
 8005044:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8005046:	4b23      	ldr	r3, [pc, #140]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	22f3      	movs	r2, #243	; 0xf3
 800504c:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 800504e:	4b21      	ldr	r3, [pc, #132]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	22f2      	movs	r2, #242	; 0xf2
 8005054:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8005056:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	22f1      	movs	r2, #241	; 0xf1
 800505c:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 800505e:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2274      	movs	r2, #116	; 0x74
 8005064:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8005066:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2273      	movs	r2, #115	; 0x73
 800506c:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 800506e:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2272      	movs	r2, #114	; 0x72
 8005074:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8005076:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2271      	movs	r2, #113	; 0x71
 800507c:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2204      	movs	r2, #4
 8005084:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8005086:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2203      	movs	r2, #3
 800508c:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
 800508e:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2202      	movs	r2, #2
 8005094:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
 8005096:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <prvTraceInitTraceData+0x214>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2201      	movs	r2, #1
 800509c:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
 800509e:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <prvTraceInitTraceData+0x228>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d010      	beq.n	80050c8 <prvTraceInitTraceData+0x208>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <prvTraceInitTraceData+0x214>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f603 1014 	addw	r0, r3, #2324	; 0x914
 80050ae:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <prvTraceInitTraceData+0x228>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2250      	movs	r2, #80	; 0x50
 80050b4:	4619      	mov	r1, r3
 80050b6:	f000 f941 	bl	800533c <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 80050ba:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <prvTraceInitTraceData+0x214>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2201      	movs	r2, #1
 80050c0:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		vTraceStop();
 80050c4:	f7ff faf0 	bl	80046a8 <vTraceStop>
	}


	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 80050c8:	f000 fb72 	bl	80057b0 <prvTraceInitCortexM>
 80050cc:	e000      	b.n	80050d0 <prvTraceInitTraceData+0x210>
			return;
 80050ce:	bf00      	nop
#endif
}
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	200045bc 	.word	0x200045bc
 80050d8:	20004664 	.word	0x20004664
 80050dc:	e0001004 	.word	0xe0001004
 80050e0:	20005f7c 	.word	0x20005f7c
 80050e4:	08007028 	.word	0x08007028
 80050e8:	2000451c 	.word	0x2000451c

080050ec <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 80050f0:	4b0e      	ldr	r3, [pc, #56]	; (800512c <prvTraceNextFreeEventBufferSlot+0x40>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e013      	b.n	8005126 <prvTraceNextFreeEventBufferSlot+0x3a>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80050fe:	4b0b      	ldr	r3, [pc, #44]	; (800512c <prvTraceNextFreeEventBufferSlot+0x40>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005108:	d304      	bcc.n	8005114 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 800510a:	4809      	ldr	r0, [pc, #36]	; (8005130 <prvTraceNextFreeEventBufferSlot+0x44>)
 800510c:	f000 f99a 	bl	8005444 <prvTraceError>
		return NULL;
 8005110:	2300      	movs	r3, #0
 8005112:	e008      	b.n	8005126 <prvTraceNextFreeEventBufferSlot+0x3a>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <prvTraceNextFreeEventBufferSlot+0x40>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <prvTraceNextFreeEventBufferSlot+0x40>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8005124:	4413      	add	r3, r2
}
 8005126:	4618      	mov	r0, r3
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	200045bc 	.word	0x200045bc
 8005130:	0800703c 	.word	0x0800703c

08005134 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	460a      	mov	r2, r1
 800513e:	71fb      	strb	r3, [r7, #7]
 8005140:	4613      	mov	r3, r2
 8005142:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8005144:	79bb      	ldrb	r3, [r7, #6]
 8005146:	2b08      	cmp	r3, #8
 8005148:	d904      	bls.n	8005154 <uiIndexOfObject+0x20>
 800514a:	4822      	ldr	r0, [pc, #136]	; (80051d4 <uiIndexOfObject+0xa0>)
 800514c:	f000 f97a 	bl	8005444 <prvTraceError>
 8005150:	2300      	movs	r3, #0
 8005152:	e03a      	b.n	80051ca <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d008      	beq.n	800516c <uiIndexOfObject+0x38>
 800515a:	4b1f      	ldr	r3, [pc, #124]	; (80051d8 <uiIndexOfObject+0xa4>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	79bb      	ldrb	r3, [r7, #6]
 8005160:	4413      	add	r3, r2
 8005162:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005166:	79fa      	ldrb	r2, [r7, #7]
 8005168:	429a      	cmp	r2, r3
 800516a:	d904      	bls.n	8005176 <uiIndexOfObject+0x42>
 800516c:	481b      	ldr	r0, [pc, #108]	; (80051dc <uiIndexOfObject+0xa8>)
 800516e:	f000 f969 	bl	8005444 <prvTraceError>
 8005172:	2300      	movs	r3, #0
 8005174:	e029      	b.n	80051ca <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8005176:	79bb      	ldrb	r3, [r7, #6]
 8005178:	2b08      	cmp	r3, #8
 800517a:	d822      	bhi.n	80051c2 <uiIndexOfObject+0x8e>
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01f      	beq.n	80051c2 <uiIndexOfObject+0x8e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8005182:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <uiIndexOfObject+0xa4>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	79bb      	ldrb	r3, [r7, #6]
 8005188:	4413      	add	r3, r2
 800518a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 800518e:	79fa      	ldrb	r2, [r7, #7]
 8005190:	429a      	cmp	r2, r3
 8005192:	d816      	bhi.n	80051c2 <uiIndexOfObject+0x8e>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005194:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <uiIndexOfObject+0xa4>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	79bb      	ldrb	r3, [r7, #6]
 800519a:	3340      	adds	r3, #64	; 0x40
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	4413      	add	r3, r2
 80051a0:	891a      	ldrh	r2, [r3, #8]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 80051a2:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <uiIndexOfObject+0xa4>)
 80051a4:	6819      	ldr	r1, [r3, #0]
 80051a6:	79bb      	ldrb	r3, [r7, #6]
 80051a8:	440b      	add	r3, r1
 80051aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 80051ae:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	3b01      	subs	r3, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	fb11 f303 	smulbb	r3, r1, r3
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	4413      	add	r3, r2
 80051be:	b29b      	uxth	r3, r3
 80051c0:	e003      	b.n	80051ca <uiIndexOfObject+0x96>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 80051c2:	4807      	ldr	r0, [pc, #28]	; (80051e0 <uiIndexOfObject+0xac>)
 80051c4:	f000 f93e 	bl	8005444 <prvTraceError>
	return 0;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	08007064 	.word	0x08007064
 80051d8:	200045bc 	.word	0x200045bc
 80051dc:	080070a4 	.word	0x080070a4
 80051e0:	080070e4 	.word	0x080070e4

080051e4 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	71fb      	strb	r3, [r7, #7]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 80051ee:	4b4d      	ldr	r3, [pc, #308]	; (8005324 <prvTraceGetObjectHandle+0x140>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d104      	bne.n	8005200 <prvTraceGetObjectHandle+0x1c>
 80051f6:	484c      	ldr	r0, [pc, #304]	; (8005328 <prvTraceGetObjectHandle+0x144>)
 80051f8:	f000 f924 	bl	8005444 <prvTraceError>
 80051fc:	2300      	movs	r3, #0
 80051fe:	e08d      	b.n	800531c <prvTraceGetObjectHandle+0x138>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	2b08      	cmp	r3, #8
 8005204:	d904      	bls.n	8005210 <prvTraceGetObjectHandle+0x2c>
 8005206:	4849      	ldr	r0, [pc, #292]	; (800532c <prvTraceGetObjectHandle+0x148>)
 8005208:	f000 f91c 	bl	8005444 <prvTraceError>
 800520c:	2300      	movs	r3, #0
 800520e:	e085      	b.n	800531c <prvTraceGetObjectHandle+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005210:	f3ef 8310 	mrs	r3, PRIMASK
 8005214:	60fb      	str	r3, [r7, #12]
  return(result);
 8005216:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	2301      	movs	r3, #1
 800521c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f383 8810 	msr	PRIMASK, r3
 8005224:	4b42      	ldr	r3, [pc, #264]	; (8005330 <prvTraceGetObjectHandle+0x14c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3301      	adds	r3, #1
 800522a:	4a41      	ldr	r2, [pc, #260]	; (8005330 <prvTraceGetObjectHandle+0x14c>)
 800522c:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	4a40      	ldr	r2, [pc, #256]	; (8005334 <prvTraceGetObjectHandle+0x150>)
 8005232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005236:	461a      	mov	r2, r3
 8005238:	4b3f      	ldr	r3, [pc, #252]	; (8005338 <prvTraceGetObjectHandle+0x154>)
 800523a:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 800523c:	4b3e      	ldr	r3, [pc, #248]	; (8005338 <prvTraceGetObjectHandle+0x154>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a3c      	ldr	r2, [pc, #240]	; (8005334 <prvTraceGetObjectHandle+0x150>)
 8005242:	4413      	add	r3, r2
 8005244:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005248:	2b00      	cmp	r3, #0
 800524a:	d114      	bne.n	8005276 <prvTraceGetObjectHandle+0x92>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 800524c:	4b3a      	ldr	r3, [pc, #232]	; (8005338 <prvTraceGetObjectHandle+0x154>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	4937      	ldr	r1, [pc, #220]	; (8005334 <prvTraceGetObjectHandle+0x150>)
 8005256:	3308      	adds	r3, #8
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	440b      	add	r3, r1
 800525c:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 800525e:	b2db      	uxtb	r3, r3
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8005264:	4b34      	ldr	r3, [pc, #208]	; (8005338 <prvTraceGetObjectHandle+0x154>)
 8005266:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8005268:	3201      	adds	r2, #1
 800526a:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 800526c:	4a31      	ldr	r2, [pc, #196]	; (8005334 <prvTraceGetObjectHandle+0x150>)
 800526e:	4413      	add	r3, r2
 8005270:	460a      	mov	r2, r1
 8005272:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 8005276:	4b30      	ldr	r3, [pc, #192]	; (8005338 <prvTraceGetObjectHandle+0x154>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a2e      	ldr	r2, [pc, #184]	; (8005334 <prvTraceGetObjectHandle+0x150>)
 800527c:	4413      	add	r3, r2
 800527e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005282:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	4a2b      	ldr	r2, [pc, #172]	; (8005334 <prvTraceGetObjectHandle+0x150>)
 8005288:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	4929      	ldr	r1, [pc, #164]	; (8005334 <prvTraceGetObjectHandle+0x150>)
 8005290:	3310      	adds	r3, #16
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	440b      	add	r3, r1
 8005296:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8005298:	429a      	cmp	r2, r3
 800529a:	d90a      	bls.n	80052b2 <prvTraceGetObjectHandle+0xce>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff f942 	bl	8004528 <pszTraceGetErrorNotEnoughHandles>
 80052a4:	4603      	mov	r3, r0
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f8cc 	bl	8005444 <prvTraceError>
		handle = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e029      	b.n	8005306 <prvTraceGetObjectHandle+0x122>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	4a1f      	ldr	r2, [pc, #124]	; (8005334 <prvTraceGetObjectHandle+0x150>)
 80052b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80052ba:	3201      	adds	r2, #1
 80052bc:	b291      	uxth	r1, r2
 80052be:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <prvTraceGetObjectHandle+0x150>)
 80052c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	4a1b      	ldr	r2, [pc, #108]	; (8005334 <prvTraceGetObjectHandle+0x150>)
 80052c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052cc:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	4a18      	ldr	r2, [pc, #96]	; (8005334 <prvTraceGetObjectHandle+0x150>)
 80052d2:	3308      	adds	r3, #8
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	4413      	add	r3, r2
 80052d8:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 80052da:	1acb      	subs	r3, r1, r3
 80052dc:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	4a14      	ldr	r2, [pc, #80]	; (8005334 <prvTraceGetObjectHandle+0x150>)
 80052e2:	3318      	adds	r3, #24
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	4413      	add	r3, r2
 80052e8:	88db      	ldrh	r3, [r3, #6]
 80052ea:	461a      	mov	r2, r3
		if (hndCount >
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	4293      	cmp	r3, r2
 80052f0:	dd09      	ble.n	8005306 <prvTraceGetObjectHandle+0x122>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 80052f6:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 80052f8:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 80052fa:	4a0e      	ldr	r2, [pc, #56]	; (8005334 <prvTraceGetObjectHandle+0x150>)
 80052fc:	3318      	adds	r3, #24
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	4413      	add	r3, r2
 8005302:	460a      	mov	r2, r1
 8005304:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <prvTraceGetObjectHandle+0x14c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3b01      	subs	r3, #1
 800530c:	4a08      	ldr	r2, [pc, #32]	; (8005330 <prvTraceGetObjectHandle+0x14c>)
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	60bb      	str	r3, [r7, #8]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f383 8810 	msr	PRIMASK, r3

	return handle;
 800531a:	7ffb      	ldrb	r3, [r7, #31]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3720      	adds	r7, #32
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	200045bc 	.word	0x200045bc
 8005328:	08006544 	.word	0x08006544
 800532c:	08007124 	.word	0x08007124
 8005330:	20004514 	.word	0x20004514
 8005334:	2000452c 	.word	0x2000452c
 8005338:	200045c0 	.word	0x200045c0

0800533c <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e010      	b.n	8005370 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	441a      	add	r2, r3
 8005354:	68f9      	ldr	r1, [r7, #12]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	440b      	add	r3, r1
 800535a:	7812      	ldrb	r2, [r2, #0]
 800535c:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	4413      	add	r3, r2
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	3301      	adds	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d3ea      	bcc.n	800534e <prvStrncpy+0x12>
			break;
	}
}
 8005378:	e000      	b.n	800537c <prvStrncpy+0x40>
			break;
 800537a:	bf00      	nop
}
 800537c:	bf00      	nop
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	603a      	str	r2, [r7, #0]
 8005392:	71fb      	strb	r3, [r7, #7]
 8005394:	460b      	mov	r3, r1
 8005396:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <prvTraceSetObjectName+0x1e>
 800539e:	4823      	ldr	r0, [pc, #140]	; (800542c <prvTraceSetObjectName+0xa4>)
 80053a0:	f000 f850 	bl	8005444 <prvTraceError>
 80053a4:	e03e      	b.n	8005424 <prvTraceSetObjectName+0x9c>

	if (objectclass >= TRACE_NCLASSES)
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d903      	bls.n	80053b4 <prvTraceSetObjectName+0x2c>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 80053ac:	4820      	ldr	r0, [pc, #128]	; (8005430 <prvTraceSetObjectName+0xa8>)
 80053ae:	f000 f849 	bl	8005444 <prvTraceError>
		return;
 80053b2:	e037      	b.n	8005424 <prvTraceSetObjectName+0x9c>
	}

	if (handle == 0)
 80053b4:	79bb      	ldrb	r3, [r7, #6]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <prvTraceSetObjectName+0x3a>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 80053ba:	481e      	ldr	r0, [pc, #120]	; (8005434 <prvTraceSetObjectName+0xac>)
 80053bc:	f000 f842 	bl	8005444 <prvTraceError>
		return;
 80053c0:	e030      	b.n	8005424 <prvTraceSetObjectName+0x9c>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 80053c2:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <prvTraceSetObjectName+0xb0>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	4413      	add	r3, r2
 80053ca:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80053ce:	79ba      	ldrb	r2, [r7, #6]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d908      	bls.n	80053e6 <prvTraceSetObjectName+0x5e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff f8a6 	bl	8004528 <pszTraceGetErrorNotEnoughHandles>
 80053dc:	4603      	mov	r3, r0
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f830 	bl	8005444 <prvTraceError>
 80053e4:	e01e      	b.n	8005424 <prvTraceSetObjectName+0x9c>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 80053e6:	79fa      	ldrb	r2, [r7, #7]
 80053e8:	79bb      	ldrb	r3, [r7, #6]
 80053ea:	4611      	mov	r1, r2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff fea1 	bl	8005134 <uiIndexOfObject>
 80053f2:	4603      	mov	r3, r0
 80053f4:	461a      	mov	r2, r3
 80053f6:	4b11      	ldr	r3, [pc, #68]	; (800543c <prvTraceSetObjectName+0xb4>)
 80053f8:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 80053fa:	4b11      	ldr	r3, [pc, #68]	; (8005440 <prvTraceSetObjectName+0xb8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d110      	bne.n	8005424 <prvTraceSetObjectName+0x9c>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8005402:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <prvTraceSetObjectName+0xb0>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b0d      	ldr	r3, [pc, #52]	; (800543c <prvTraceSetObjectName+0xb4>)
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	3398      	adds	r3, #152	; 0x98
 800540c:	4413      	add	r3, r2
 800540e:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8005410:	4b09      	ldr	r3, [pc, #36]	; (8005438 <prvTraceSetObjectName+0xb0>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	4413      	add	r3, r2
 8005418:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 800541c:	461a      	mov	r2, r3
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	f7ff ff8c 	bl	800533c <prvStrncpy>
		}
	}
}
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	08007228 	.word	0x08007228
 8005430:	0800725c 	.word	0x0800725c
 8005434:	0800728c 	.word	0x0800728c
 8005438:	200045bc 	.word	0x200045bc
 800543c:	200045c4 	.word	0x200045c4
 8005440:	2000451c 	.word	0x2000451c

08005444 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 800544c:	4b11      	ldr	r3, [pc, #68]	; (8005494 <prvTraceError+0x50>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <prvTraceError+0x14>
	{
		vTraceStop();
 8005454:	f7ff f928 	bl	80046a8 <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 8005458:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <prvTraceError+0x54>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d115      	bne.n	800548c <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8005460:	4a0d      	ldr	r2, [pc, #52]	; (8005498 <prvTraceError+0x54>)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005466:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <prvTraceError+0x50>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00e      	beq.n	800548c <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800546e:	4b09      	ldr	r3, [pc, #36]	; (8005494 <prvTraceError+0x50>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f603 1014 	addw	r0, r3, #2324	; 0x914
 8005476:	4b08      	ldr	r3, [pc, #32]	; (8005498 <prvTraceError+0x54>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2250      	movs	r2, #80	; 0x50
 800547c:	4619      	mov	r1, r3
 800547e:	f7ff ff5d 	bl	800533c <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8005482:	4b04      	ldr	r3, [pc, #16]	; (8005494 <prvTraceError+0x50>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2201      	movs	r2, #1
 8005488:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		}
	}
}
 800548c:	bf00      	nop
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	200045bc 	.word	0x200045bc
 8005498:	2000451c 	.word	0x2000451c

0800549c <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d172      	bne.n	800559a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
 80054b4:	483c      	ldr	r0, [pc, #240]	; (80055a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 80054b6:	f7ff ffc5 	bl	8005444 <prvTraceError>
 80054ba:	e072      	b.n	80055a2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x106>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 80054bc:	4b3b      	ldr	r3, [pc, #236]	; (80055ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4413      	add	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80054c8:	4b38      	ldr	r3, [pc, #224]	; (80055ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 80054d6:	2b98      	cmp	r3, #152	; 0x98
 80054d8:	d928      	bls.n	800552c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 80054da:	4b34      	ldr	r3, [pc, #208]	; (80055ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 80054e8:	2ba7      	cmp	r3, #167	; 0xa7
 80054ea:	d81f      	bhi.n	800552c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 80054ec:	4b2f      	ldr	r3, [pc, #188]	; (80055ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 80054fa:	3368      	adds	r3, #104	; 0x68
 80054fc:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 80054fe:	7bfa      	ldrb	r2, [r7, #15]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	441a      	add	r2, r3
 8005504:	4b29      	ldr	r3, [pc, #164]	; (80055ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	429a      	cmp	r2, r3
 800550c:	d241      	bcs.n	8005592 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 800550e:	4b27      	ldr	r3, [pc, #156]	; (80055ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	f603 1368 	addw	r3, r3, #2408	; 0x968
 800551a:	18d0      	adds	r0, r2, r3
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	3301      	adds	r3, #1
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	461a      	mov	r2, r3
 8005524:	2100      	movs	r1, #0
 8005526:	f000 f9f8 	bl	800591a <memset>
		{
 800552a:	e032      	b.n	8005592 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 800552c:	4b1f      	ldr	r3, [pc, #124]	; (80055ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 800553a:	2b01      	cmp	r3, #1
 800553c:	d12a      	bne.n	8005594 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	429a      	cmp	r2, r3
 800554a:	d20c      	bcs.n	8005566 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xca>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 800554c:	4b17      	ldr	r3, [pc, #92]	; (80055ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8005558:	4413      	add	r3, r2
 800555a:	2208      	movs	r2, #8
 800555c:	2100      	movs	r1, #0
 800555e:	4618      	mov	r0, r3
 8005560:	f000 f9db 	bl	800591a <memset>
 8005564:	e016      	b.n	8005594 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8005566:	4b11      	ldr	r3, [pc, #68]	; (80055ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f603 1368 	addw	r3, r3, #2408	; 0x968
 800556e:	2204      	movs	r2, #4
 8005570:	2100      	movs	r1, #0
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f9d1 	bl	800591a <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8005578:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8005584:	4413      	add	r3, r2
 8005586:	2204      	movs	r2, #4
 8005588:	2100      	movs	r1, #0
 800558a:	4618      	mov	r0, r3
 800558c:	f000 f9c5 	bl	800591a <memset>
 8005590:	e000      	b.n	8005594 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
 8005592:	bf00      	nop
			}
		}
		i++;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	3301      	adds	r3, #1
 8005598:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d38c      	bcc.n	80054bc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x20>
	}
}
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	080072ec 	.word	0x080072ec
 80055ac:	200045bc 	.word	0x200045bc

080055b0 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 80055b4:	4b11      	ldr	r3, [pc, #68]	; (80055fc <prvTraceUpdateCounters+0x4c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01b      	beq.n	80055f6 <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 80055be:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <prvTraceUpdateCounters+0x4c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	3201      	adds	r2, #1
 80055c6:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 80055c8:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <prvTraceUpdateCounters+0x4c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	3201      	adds	r2, #1
 80055d0:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <prvTraceUpdateCounters+0x4c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055dc:	d307      	bcc.n	80055ee <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 80055de:	4b07      	ldr	r3, [pc, #28]	; (80055fc <prvTraceUpdateCounters+0x4c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2201      	movs	r2, #1
 80055e4:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <prvTraceUpdateCounters+0x4c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2200      	movs	r2, #0
 80055ec:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 80055ee:	2001      	movs	r0, #1
 80055f0:	f7ff ff54 	bl	800549c <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 80055f4:	e000      	b.n	80055f8 <prvTraceUpdateCounters+0x48>
		return;
 80055f6:	bf00      	nop
#endif
}
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	200045bc 	.word	0x200045bc

08005600 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	2bff      	cmp	r3, #255	; 0xff
 800561a:	d009      	beq.n	8005630 <prvTraceGetDTS+0x30>
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <prvTraceGetDTS+0x30>
 8005626:	485a      	ldr	r0, [pc, #360]	; (8005790 <prvTraceGetDTS+0x190>)
 8005628:	f7ff ff0c 	bl	8005444 <prvTraceError>
 800562c:	2300      	movs	r3, #0
 800562e:	e0ab      	b.n	8005788 <prvTraceGetDTS+0x188>

	
	if (RecorderDataPtr->frequency == 0)
 8005630:	4b58      	ldr	r3, [pc, #352]	; (8005794 <prvTraceGetDTS+0x194>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	2b00      	cmp	r3, #0
 8005638:	d116      	bne.n	8005668 <prvTraceGetDTS+0x68>
	{	
		if (timestampFrequency != 0)
 800563a:	4b57      	ldr	r3, [pc, #348]	; (8005798 <prvTraceGetDTS+0x198>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d006      	beq.n	8005650 <prvTraceGetDTS+0x50>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8005642:	4b55      	ldr	r3, [pc, #340]	; (8005798 <prvTraceGetDTS+0x198>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b53      	ldr	r3, [pc, #332]	; (8005794 <prvTraceGetDTS+0x194>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	0892      	lsrs	r2, r2, #2
 800564c:	625a      	str	r2, [r3, #36]	; 0x24
 800564e:	e00b      	b.n	8005668 <prvTraceGetDTS+0x68>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8005650:	4b52      	ldr	r3, [pc, #328]	; (800579c <prvTraceGetDTS+0x19c>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4b52      	ldr	r3, [pc, #328]	; (80057a0 <prvTraceGetDTS+0x1a0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d005      	beq.n	8005668 <prvTraceGetDTS+0x68>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 800565c:	4b51      	ldr	r3, [pc, #324]	; (80057a4 <prvTraceGetDTS+0x1a4>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	4b4c      	ldr	r3, [pc, #304]	; (8005794 <prvTraceGetDTS+0x194>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	0892      	lsrs	r2, r2, #2
 8005666:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8005668:	f107 030c 	add.w	r3, r7, #12
 800566c:	4618      	mov	r0, r3
 800566e:	f000 f8d5 	bl	800581c <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4b4c      	ldr	r3, [pc, #304]	; (80057a8 <prvTraceGetDTS+0x1a8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a4a      	ldr	r2, [pc, #296]	; (80057a8 <prvTraceGetDTS+0x1a8>)
 8005680:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 8005682:	4b44      	ldr	r3, [pc, #272]	; (8005794 <prvTraceGetDTS+0x194>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b00      	cmp	r3, #0
 800568a:	d043      	beq.n	8005714 <prvTraceGetDTS+0x114>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 800568c:	4b41      	ldr	r3, [pc, #260]	; (8005794 <prvTraceGetDTS+0x194>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	429a      	cmp	r2, r3
 8005696:	d91d      	bls.n	80056d4 <prvTraceGetDTS+0xd4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8005698:	4b3e      	ldr	r3, [pc, #248]	; (8005794 <prvTraceGetDTS+0x194>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800569e:	4b3d      	ldr	r3, [pc, #244]	; (8005794 <prvTraceGetDTS+0x194>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80056aa:	4b3a      	ldr	r3, [pc, #232]	; (8005794 <prvTraceGetDTS+0x194>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	440a      	add	r2, r1
 80056b0:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 80056b2:	4b38      	ldr	r3, [pc, #224]	; (8005794 <prvTraceGetDTS+0x194>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80056b8:	4b36      	ldr	r3, [pc, #216]	; (8005794 <prvTraceGetDTS+0x194>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80056c4:	fb02 f200 	mul.w	r2, r2, r0
 80056c8:	1a9a      	subs	r2, r3, r2
 80056ca:	4b32      	ldr	r3, [pc, #200]	; (8005794 <prvTraceGetDTS+0x194>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	440a      	add	r2, r1
 80056d0:	629a      	str	r2, [r3, #40]	; 0x28
 80056d2:	e007      	b.n	80056e4 <prvTraceGetDTS+0xe4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 80056d4:	4b2f      	ldr	r3, [pc, #188]	; (8005794 <prvTraceGetDTS+0x194>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80056da:	4b2e      	ldr	r3, [pc, #184]	; (8005794 <prvTraceGetDTS+0x194>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	440a      	add	r2, r1
 80056e2:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 80056e4:	4b2b      	ldr	r3, [pc, #172]	; (8005794 <prvTraceGetDTS+0x194>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ea:	4b2a      	ldr	r3, [pc, #168]	; (8005794 <prvTraceGetDTS+0x194>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d313      	bcc.n	800571c <prvTraceGetDTS+0x11c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 80056f4:	4b27      	ldr	r3, [pc, #156]	; (8005794 <prvTraceGetDTS+0x194>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fa:	3201      	adds	r2, #1
 80056fc:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 80056fe:	4b25      	ldr	r3, [pc, #148]	; (8005794 <prvTraceGetDTS+0x194>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005704:	4b23      	ldr	r3, [pc, #140]	; (8005794 <prvTraceGetDTS+0x194>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800570a:	4b22      	ldr	r3, [pc, #136]	; (8005794 <prvTraceGetDTS+0x194>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	1a8a      	subs	r2, r1, r2
 8005710:	629a      	str	r2, [r3, #40]	; 0x28
 8005712:	e003      	b.n	800571c <prvTraceGetDTS+0x11c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8005714:	4b1f      	ldr	r3, [pc, #124]	; (8005794 <prvTraceGetDTS+0x194>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 800571c:	88fb      	ldrh	r3, [r7, #6]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	429a      	cmp	r2, r3
 8005722:	d92c      	bls.n	800577e <prvTraceGetDTS+0x17e>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8005724:	f7ff fce2 	bl	80050ec <prvTraceNextFreeEventBufferSlot>
 8005728:	6178      	str	r0, [r7, #20]

		if (xts != NULL)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d026      	beq.n	800577e <prvTraceGetDTS+0x17e>
		{
			if (param_maxDTS == 0xFFFF)
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005736:	4293      	cmp	r3, r2
 8005738:	d10b      	bne.n	8005752 <prvTraceGetDTS+0x152>
			{
				xts->type = XTS16;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	22a9      	movs	r2, #169	; 0xa9
 800573e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	b29a      	uxth	r2, r3
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2200      	movs	r2, #0
 800574e:	705a      	strb	r2, [r3, #1]
 8005750:	e013      	b.n	800577a <prvTraceGetDTS+0x17a>
			}
			else if (param_maxDTS == 0xFF)
 8005752:	88fb      	ldrh	r3, [r7, #6]
 8005754:	2bff      	cmp	r3, #255	; 0xff
 8005756:	d10d      	bne.n	8005774 <prvTraceGetDTS+0x174>
			{
				xts->type = XTS8;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	22a8      	movs	r2, #168	; 0xa8
 800575c:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	b29a      	uxth	r2, r3
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	0e1b      	lsrs	r3, r3, #24
 800576c:	b2da      	uxtb	r2, r3
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	705a      	strb	r2, [r3, #1]
 8005772:	e002      	b.n	800577a <prvTraceGetDTS+0x17a>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8005774:	480d      	ldr	r0, [pc, #52]	; (80057ac <prvTraceGetDTS+0x1ac>)
 8005776:	f7ff fe65 	bl	8005444 <prvTraceError>
			}
			prvTraceUpdateCounters();
 800577a:	f7ff ff19 	bl	80055b0 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	b29a      	uxth	r2, r3
 8005782:	88fb      	ldrh	r3, [r7, #6]
 8005784:	4013      	ands	r3, r2
 8005786:	b29b      	uxth	r3, r3
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	08007344 	.word	0x08007344
 8005794:	200045bc 	.word	0x200045bc
 8005798:	20004518 	.word	0x20004518
 800579c:	e0001004 	.word	0xe0001004
 80057a0:	20005f7c 	.word	0x20005f7c
 80057a4:	20000000 	.word	0x20000000
 80057a8:	200045c8 	.word	0x200045c8
 80057ac:	08007384 	.word	0x08007384

080057b0 <prvTraceInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void prvTraceInitCortexM()
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 80057b4:	4b12      	ldr	r3, [pc, #72]	; (8005800 <prvTraceInitCortexM+0x50>)
 80057b6:	4a13      	ldr	r2, [pc, #76]	; (8005804 <prvTraceInitCortexM+0x54>)
 80057b8:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 80057ba:	4b13      	ldr	r3, [pc, #76]	; (8005808 <prvTraceInitCortexM+0x58>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a12      	ldr	r2, [pc, #72]	; (8005808 <prvTraceInitCortexM+0x58>)
 80057c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057c4:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <prvTraceInitCortexM+0x58>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d103      	bne.n	80057d6 <prvTraceInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 80057ce:	480f      	ldr	r0, [pc, #60]	; (800580c <prvTraceInitCortexM+0x5c>)
 80057d0:	f7ff fe38 	bl	8005444 <prvTraceError>
			break;
 80057d4:	e012      	b.n	80057fc <prvTraceInitCortexM+0x4c>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 80057d6:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <prvTraceInitCortexM+0x60>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <prvTraceInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 80057e2:	480c      	ldr	r0, [pc, #48]	; (8005814 <prvTraceInitCortexM+0x64>)
 80057e4:	f7ff fe2e 	bl	8005444 <prvTraceError>
			break;
 80057e8:	e008      	b.n	80057fc <prvTraceInitCortexM+0x4c>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 80057ea:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <prvTraceInitCortexM+0x68>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 80057f0:	4b07      	ldr	r3, [pc, #28]	; (8005810 <prvTraceInitCortexM+0x60>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a06      	ldr	r2, [pc, #24]	; (8005810 <prvTraceInitCortexM+0x60>)
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 80057fc:	bf00      	nop
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	e0001fb0 	.word	0xe0001fb0
 8005804:	c5acce55 	.word	0xc5acce55
 8005808:	e000edfc 	.word	0xe000edfc
 800580c:	08007570 	.word	0x08007570
 8005810:	e0001000 	.word	0xe0001000
 8005814:	0800759c 	.word	0x0800759c
 8005818:	e0001004 	.word	0xe0001004

0800581c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8005830:	4b1a      	ldr	r3, [pc, #104]	; (800589c <prvTracePortGetTimeStamp+0x80>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d107      	bne.n	8005848 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d028      	beq.n	8005890 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 800583e:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <prvTracePortGetTimeStamp+0x84>)
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	601a      	str	r2, [r3, #0]
		return;
 8005846:	e023      	b.n	8005890 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 8005848:	4b16      	ldr	r3, [pc, #88]	; (80058a4 <prvTracePortGetTimeStamp+0x88>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 800584e:	4b16      	ldr	r3, [pc, #88]	; (80058a8 <prvTracePortGetTimeStamp+0x8c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	1ad2      	subs	r2, r2, r3
 8005856:	4b15      	ldr	r3, [pc, #84]	; (80058ac <prvTracePortGetTimeStamp+0x90>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4413      	add	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	089b      	lsrs	r3, r3, #2
 8005862:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	4a10      	ldr	r2, [pc, #64]	; (80058ac <prvTracePortGetTimeStamp+0x90>)
 800586c:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 800586e:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <prvTracePortGetTimeStamp+0x84>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4413      	add	r3, r2
 8005876:	4a0a      	ldr	r2, [pc, #40]	; (80058a0 <prvTracePortGetTimeStamp+0x84>)
 8005878:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8005880:	4b07      	ldr	r3, [pc, #28]	; (80058a0 <prvTracePortGetTimeStamp+0x84>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8005888:	4a07      	ldr	r2, [pc, #28]	; (80058a8 <prvTracePortGetTimeStamp+0x8c>)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	e000      	b.n	8005892 <prvTracePortGetTimeStamp+0x76>
		return;
 8005890:	bf00      	nop
}
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20004508 	.word	0x20004508
 80058a0:	2000450c 	.word	0x2000450c
 80058a4:	e0001004 	.word	0xe0001004
 80058a8:	200045cc 	.word	0x200045cc
 80058ac:	200045d0 	.word	0x200045d0

080058b0 <__errno>:
 80058b0:	4b01      	ldr	r3, [pc, #4]	; (80058b8 <__errno+0x8>)
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	20000018 	.word	0x20000018

080058bc <__libc_init_array>:
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	4e0d      	ldr	r6, [pc, #52]	; (80058f4 <__libc_init_array+0x38>)
 80058c0:	4c0d      	ldr	r4, [pc, #52]	; (80058f8 <__libc_init_array+0x3c>)
 80058c2:	1ba4      	subs	r4, r4, r6
 80058c4:	10a4      	asrs	r4, r4, #2
 80058c6:	2500      	movs	r5, #0
 80058c8:	42a5      	cmp	r5, r4
 80058ca:	d109      	bne.n	80058e0 <__libc_init_array+0x24>
 80058cc:	4e0b      	ldr	r6, [pc, #44]	; (80058fc <__libc_init_array+0x40>)
 80058ce:	4c0c      	ldr	r4, [pc, #48]	; (8005900 <__libc_init_array+0x44>)
 80058d0:	f000 fc28 	bl	8006124 <_init>
 80058d4:	1ba4      	subs	r4, r4, r6
 80058d6:	10a4      	asrs	r4, r4, #2
 80058d8:	2500      	movs	r5, #0
 80058da:	42a5      	cmp	r5, r4
 80058dc:	d105      	bne.n	80058ea <__libc_init_array+0x2e>
 80058de:	bd70      	pop	{r4, r5, r6, pc}
 80058e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058e4:	4798      	blx	r3
 80058e6:	3501      	adds	r5, #1
 80058e8:	e7ee      	b.n	80058c8 <__libc_init_array+0xc>
 80058ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058ee:	4798      	blx	r3
 80058f0:	3501      	adds	r5, #1
 80058f2:	e7f2      	b.n	80058da <__libc_init_array+0x1e>
 80058f4:	0800761c 	.word	0x0800761c
 80058f8:	0800761c 	.word	0x0800761c
 80058fc:	0800761c 	.word	0x0800761c
 8005900:	08007620 	.word	0x08007620

08005904 <memcpy>:
 8005904:	b510      	push	{r4, lr}
 8005906:	1e43      	subs	r3, r0, #1
 8005908:	440a      	add	r2, r1
 800590a:	4291      	cmp	r1, r2
 800590c:	d100      	bne.n	8005910 <memcpy+0xc>
 800590e:	bd10      	pop	{r4, pc}
 8005910:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005918:	e7f7      	b.n	800590a <memcpy+0x6>

0800591a <memset>:
 800591a:	4402      	add	r2, r0
 800591c:	4603      	mov	r3, r0
 800591e:	4293      	cmp	r3, r2
 8005920:	d100      	bne.n	8005924 <memset+0xa>
 8005922:	4770      	bx	lr
 8005924:	f803 1b01 	strb.w	r1, [r3], #1
 8005928:	e7f9      	b.n	800591e <memset+0x4>
	...

0800592c <_vsiprintf_r>:
 800592c:	b500      	push	{lr}
 800592e:	b09b      	sub	sp, #108	; 0x6c
 8005930:	9100      	str	r1, [sp, #0]
 8005932:	9104      	str	r1, [sp, #16]
 8005934:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005938:	9105      	str	r1, [sp, #20]
 800593a:	9102      	str	r1, [sp, #8]
 800593c:	4905      	ldr	r1, [pc, #20]	; (8005954 <_vsiprintf_r+0x28>)
 800593e:	9103      	str	r1, [sp, #12]
 8005940:	4669      	mov	r1, sp
 8005942:	f000 f86d 	bl	8005a20 <_svfiprintf_r>
 8005946:	9b00      	ldr	r3, [sp, #0]
 8005948:	2200      	movs	r2, #0
 800594a:	701a      	strb	r2, [r3, #0]
 800594c:	b01b      	add	sp, #108	; 0x6c
 800594e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005952:	bf00      	nop
 8005954:	ffff0208 	.word	0xffff0208

08005958 <vsiprintf>:
 8005958:	4613      	mov	r3, r2
 800595a:	460a      	mov	r2, r1
 800595c:	4601      	mov	r1, r0
 800595e:	4802      	ldr	r0, [pc, #8]	; (8005968 <vsiprintf+0x10>)
 8005960:	6800      	ldr	r0, [r0, #0]
 8005962:	f7ff bfe3 	b.w	800592c <_vsiprintf_r>
 8005966:	bf00      	nop
 8005968:	20000018 	.word	0x20000018

0800596c <__ssputs_r>:
 800596c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005970:	688e      	ldr	r6, [r1, #8]
 8005972:	429e      	cmp	r6, r3
 8005974:	4682      	mov	sl, r0
 8005976:	460c      	mov	r4, r1
 8005978:	4690      	mov	r8, r2
 800597a:	4699      	mov	r9, r3
 800597c:	d837      	bhi.n	80059ee <__ssputs_r+0x82>
 800597e:	898a      	ldrh	r2, [r1, #12]
 8005980:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005984:	d031      	beq.n	80059ea <__ssputs_r+0x7e>
 8005986:	6825      	ldr	r5, [r4, #0]
 8005988:	6909      	ldr	r1, [r1, #16]
 800598a:	1a6f      	subs	r7, r5, r1
 800598c:	6965      	ldr	r5, [r4, #20]
 800598e:	2302      	movs	r3, #2
 8005990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005994:	fb95 f5f3 	sdiv	r5, r5, r3
 8005998:	f109 0301 	add.w	r3, r9, #1
 800599c:	443b      	add	r3, r7
 800599e:	429d      	cmp	r5, r3
 80059a0:	bf38      	it	cc
 80059a2:	461d      	movcc	r5, r3
 80059a4:	0553      	lsls	r3, r2, #21
 80059a6:	d530      	bpl.n	8005a0a <__ssputs_r+0x9e>
 80059a8:	4629      	mov	r1, r5
 80059aa:	f000 fb21 	bl	8005ff0 <_malloc_r>
 80059ae:	4606      	mov	r6, r0
 80059b0:	b950      	cbnz	r0, 80059c8 <__ssputs_r+0x5c>
 80059b2:	230c      	movs	r3, #12
 80059b4:	f8ca 3000 	str.w	r3, [sl]
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059be:	81a3      	strh	r3, [r4, #12]
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c8:	463a      	mov	r2, r7
 80059ca:	6921      	ldr	r1, [r4, #16]
 80059cc:	f7ff ff9a 	bl	8005904 <memcpy>
 80059d0:	89a3      	ldrh	r3, [r4, #12]
 80059d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059da:	81a3      	strh	r3, [r4, #12]
 80059dc:	6126      	str	r6, [r4, #16]
 80059de:	6165      	str	r5, [r4, #20]
 80059e0:	443e      	add	r6, r7
 80059e2:	1bed      	subs	r5, r5, r7
 80059e4:	6026      	str	r6, [r4, #0]
 80059e6:	60a5      	str	r5, [r4, #8]
 80059e8:	464e      	mov	r6, r9
 80059ea:	454e      	cmp	r6, r9
 80059ec:	d900      	bls.n	80059f0 <__ssputs_r+0x84>
 80059ee:	464e      	mov	r6, r9
 80059f0:	4632      	mov	r2, r6
 80059f2:	4641      	mov	r1, r8
 80059f4:	6820      	ldr	r0, [r4, #0]
 80059f6:	f000 fa93 	bl	8005f20 <memmove>
 80059fa:	68a3      	ldr	r3, [r4, #8]
 80059fc:	1b9b      	subs	r3, r3, r6
 80059fe:	60a3      	str	r3, [r4, #8]
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	441e      	add	r6, r3
 8005a04:	6026      	str	r6, [r4, #0]
 8005a06:	2000      	movs	r0, #0
 8005a08:	e7dc      	b.n	80059c4 <__ssputs_r+0x58>
 8005a0a:	462a      	mov	r2, r5
 8005a0c:	f000 fb4a 	bl	80060a4 <_realloc_r>
 8005a10:	4606      	mov	r6, r0
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d1e2      	bne.n	80059dc <__ssputs_r+0x70>
 8005a16:	6921      	ldr	r1, [r4, #16]
 8005a18:	4650      	mov	r0, sl
 8005a1a:	f000 fa9b 	bl	8005f54 <_free_r>
 8005a1e:	e7c8      	b.n	80059b2 <__ssputs_r+0x46>

08005a20 <_svfiprintf_r>:
 8005a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a24:	461d      	mov	r5, r3
 8005a26:	898b      	ldrh	r3, [r1, #12]
 8005a28:	061f      	lsls	r7, r3, #24
 8005a2a:	b09d      	sub	sp, #116	; 0x74
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	460c      	mov	r4, r1
 8005a30:	4616      	mov	r6, r2
 8005a32:	d50f      	bpl.n	8005a54 <_svfiprintf_r+0x34>
 8005a34:	690b      	ldr	r3, [r1, #16]
 8005a36:	b96b      	cbnz	r3, 8005a54 <_svfiprintf_r+0x34>
 8005a38:	2140      	movs	r1, #64	; 0x40
 8005a3a:	f000 fad9 	bl	8005ff0 <_malloc_r>
 8005a3e:	6020      	str	r0, [r4, #0]
 8005a40:	6120      	str	r0, [r4, #16]
 8005a42:	b928      	cbnz	r0, 8005a50 <_svfiprintf_r+0x30>
 8005a44:	230c      	movs	r3, #12
 8005a46:	f8c8 3000 	str.w	r3, [r8]
 8005a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4e:	e0c8      	b.n	8005be2 <_svfiprintf_r+0x1c2>
 8005a50:	2340      	movs	r3, #64	; 0x40
 8005a52:	6163      	str	r3, [r4, #20]
 8005a54:	2300      	movs	r3, #0
 8005a56:	9309      	str	r3, [sp, #36]	; 0x24
 8005a58:	2320      	movs	r3, #32
 8005a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a5e:	2330      	movs	r3, #48	; 0x30
 8005a60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a64:	9503      	str	r5, [sp, #12]
 8005a66:	f04f 0b01 	mov.w	fp, #1
 8005a6a:	4637      	mov	r7, r6
 8005a6c:	463d      	mov	r5, r7
 8005a6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a72:	b10b      	cbz	r3, 8005a78 <_svfiprintf_r+0x58>
 8005a74:	2b25      	cmp	r3, #37	; 0x25
 8005a76:	d13e      	bne.n	8005af6 <_svfiprintf_r+0xd6>
 8005a78:	ebb7 0a06 	subs.w	sl, r7, r6
 8005a7c:	d00b      	beq.n	8005a96 <_svfiprintf_r+0x76>
 8005a7e:	4653      	mov	r3, sl
 8005a80:	4632      	mov	r2, r6
 8005a82:	4621      	mov	r1, r4
 8005a84:	4640      	mov	r0, r8
 8005a86:	f7ff ff71 	bl	800596c <__ssputs_r>
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	f000 80a4 	beq.w	8005bd8 <_svfiprintf_r+0x1b8>
 8005a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a92:	4453      	add	r3, sl
 8005a94:	9309      	str	r3, [sp, #36]	; 0x24
 8005a96:	783b      	ldrb	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 809d 	beq.w	8005bd8 <_svfiprintf_r+0x1b8>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005aa8:	9304      	str	r3, [sp, #16]
 8005aaa:	9307      	str	r3, [sp, #28]
 8005aac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ab0:	931a      	str	r3, [sp, #104]	; 0x68
 8005ab2:	462f      	mov	r7, r5
 8005ab4:	2205      	movs	r2, #5
 8005ab6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005aba:	4850      	ldr	r0, [pc, #320]	; (8005bfc <_svfiprintf_r+0x1dc>)
 8005abc:	f7fa fbb0 	bl	8000220 <memchr>
 8005ac0:	9b04      	ldr	r3, [sp, #16]
 8005ac2:	b9d0      	cbnz	r0, 8005afa <_svfiprintf_r+0xda>
 8005ac4:	06d9      	lsls	r1, r3, #27
 8005ac6:	bf44      	itt	mi
 8005ac8:	2220      	movmi	r2, #32
 8005aca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ace:	071a      	lsls	r2, r3, #28
 8005ad0:	bf44      	itt	mi
 8005ad2:	222b      	movmi	r2, #43	; 0x2b
 8005ad4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ad8:	782a      	ldrb	r2, [r5, #0]
 8005ada:	2a2a      	cmp	r2, #42	; 0x2a
 8005adc:	d015      	beq.n	8005b0a <_svfiprintf_r+0xea>
 8005ade:	9a07      	ldr	r2, [sp, #28]
 8005ae0:	462f      	mov	r7, r5
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	250a      	movs	r5, #10
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aec:	3b30      	subs	r3, #48	; 0x30
 8005aee:	2b09      	cmp	r3, #9
 8005af0:	d94d      	bls.n	8005b8e <_svfiprintf_r+0x16e>
 8005af2:	b1b8      	cbz	r0, 8005b24 <_svfiprintf_r+0x104>
 8005af4:	e00f      	b.n	8005b16 <_svfiprintf_r+0xf6>
 8005af6:	462f      	mov	r7, r5
 8005af8:	e7b8      	b.n	8005a6c <_svfiprintf_r+0x4c>
 8005afa:	4a40      	ldr	r2, [pc, #256]	; (8005bfc <_svfiprintf_r+0x1dc>)
 8005afc:	1a80      	subs	r0, r0, r2
 8005afe:	fa0b f000 	lsl.w	r0, fp, r0
 8005b02:	4318      	orrs	r0, r3
 8005b04:	9004      	str	r0, [sp, #16]
 8005b06:	463d      	mov	r5, r7
 8005b08:	e7d3      	b.n	8005ab2 <_svfiprintf_r+0x92>
 8005b0a:	9a03      	ldr	r2, [sp, #12]
 8005b0c:	1d11      	adds	r1, r2, #4
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	9103      	str	r1, [sp, #12]
 8005b12:	2a00      	cmp	r2, #0
 8005b14:	db01      	blt.n	8005b1a <_svfiprintf_r+0xfa>
 8005b16:	9207      	str	r2, [sp, #28]
 8005b18:	e004      	b.n	8005b24 <_svfiprintf_r+0x104>
 8005b1a:	4252      	negs	r2, r2
 8005b1c:	f043 0302 	orr.w	r3, r3, #2
 8005b20:	9207      	str	r2, [sp, #28]
 8005b22:	9304      	str	r3, [sp, #16]
 8005b24:	783b      	ldrb	r3, [r7, #0]
 8005b26:	2b2e      	cmp	r3, #46	; 0x2e
 8005b28:	d10c      	bne.n	8005b44 <_svfiprintf_r+0x124>
 8005b2a:	787b      	ldrb	r3, [r7, #1]
 8005b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b2e:	d133      	bne.n	8005b98 <_svfiprintf_r+0x178>
 8005b30:	9b03      	ldr	r3, [sp, #12]
 8005b32:	1d1a      	adds	r2, r3, #4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	9203      	str	r2, [sp, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bfb8      	it	lt
 8005b3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b40:	3702      	adds	r7, #2
 8005b42:	9305      	str	r3, [sp, #20]
 8005b44:	4d2e      	ldr	r5, [pc, #184]	; (8005c00 <_svfiprintf_r+0x1e0>)
 8005b46:	7839      	ldrb	r1, [r7, #0]
 8005b48:	2203      	movs	r2, #3
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f7fa fb68 	bl	8000220 <memchr>
 8005b50:	b138      	cbz	r0, 8005b62 <_svfiprintf_r+0x142>
 8005b52:	2340      	movs	r3, #64	; 0x40
 8005b54:	1b40      	subs	r0, r0, r5
 8005b56:	fa03 f000 	lsl.w	r0, r3, r0
 8005b5a:	9b04      	ldr	r3, [sp, #16]
 8005b5c:	4303      	orrs	r3, r0
 8005b5e:	3701      	adds	r7, #1
 8005b60:	9304      	str	r3, [sp, #16]
 8005b62:	7839      	ldrb	r1, [r7, #0]
 8005b64:	4827      	ldr	r0, [pc, #156]	; (8005c04 <_svfiprintf_r+0x1e4>)
 8005b66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b6a:	2206      	movs	r2, #6
 8005b6c:	1c7e      	adds	r6, r7, #1
 8005b6e:	f7fa fb57 	bl	8000220 <memchr>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d038      	beq.n	8005be8 <_svfiprintf_r+0x1c8>
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <_svfiprintf_r+0x1e8>)
 8005b78:	bb13      	cbnz	r3, 8005bc0 <_svfiprintf_r+0x1a0>
 8005b7a:	9b03      	ldr	r3, [sp, #12]
 8005b7c:	3307      	adds	r3, #7
 8005b7e:	f023 0307 	bic.w	r3, r3, #7
 8005b82:	3308      	adds	r3, #8
 8005b84:	9303      	str	r3, [sp, #12]
 8005b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b88:	444b      	add	r3, r9
 8005b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b8c:	e76d      	b.n	8005a6a <_svfiprintf_r+0x4a>
 8005b8e:	fb05 3202 	mla	r2, r5, r2, r3
 8005b92:	2001      	movs	r0, #1
 8005b94:	460f      	mov	r7, r1
 8005b96:	e7a6      	b.n	8005ae6 <_svfiprintf_r+0xc6>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	3701      	adds	r7, #1
 8005b9c:	9305      	str	r3, [sp, #20]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	250a      	movs	r5, #10
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ba8:	3a30      	subs	r2, #48	; 0x30
 8005baa:	2a09      	cmp	r2, #9
 8005bac:	d903      	bls.n	8005bb6 <_svfiprintf_r+0x196>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0c8      	beq.n	8005b44 <_svfiprintf_r+0x124>
 8005bb2:	9105      	str	r1, [sp, #20]
 8005bb4:	e7c6      	b.n	8005b44 <_svfiprintf_r+0x124>
 8005bb6:	fb05 2101 	mla	r1, r5, r1, r2
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4607      	mov	r7, r0
 8005bbe:	e7f0      	b.n	8005ba2 <_svfiprintf_r+0x182>
 8005bc0:	ab03      	add	r3, sp, #12
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	4622      	mov	r2, r4
 8005bc6:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <_svfiprintf_r+0x1ec>)
 8005bc8:	a904      	add	r1, sp, #16
 8005bca:	4640      	mov	r0, r8
 8005bcc:	f3af 8000 	nop.w
 8005bd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005bd4:	4681      	mov	r9, r0
 8005bd6:	d1d6      	bne.n	8005b86 <_svfiprintf_r+0x166>
 8005bd8:	89a3      	ldrh	r3, [r4, #12]
 8005bda:	065b      	lsls	r3, r3, #25
 8005bdc:	f53f af35 	bmi.w	8005a4a <_svfiprintf_r+0x2a>
 8005be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005be2:	b01d      	add	sp, #116	; 0x74
 8005be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be8:	ab03      	add	r3, sp, #12
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	4622      	mov	r2, r4
 8005bee:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <_svfiprintf_r+0x1ec>)
 8005bf0:	a904      	add	r1, sp, #16
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	f000 f882 	bl	8005cfc <_printf_i>
 8005bf8:	e7ea      	b.n	8005bd0 <_svfiprintf_r+0x1b0>
 8005bfa:	bf00      	nop
 8005bfc:	080075e0 	.word	0x080075e0
 8005c00:	080075e6 	.word	0x080075e6
 8005c04:	080075ea 	.word	0x080075ea
 8005c08:	00000000 	.word	0x00000000
 8005c0c:	0800596d 	.word	0x0800596d

08005c10 <_printf_common>:
 8005c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c14:	4691      	mov	r9, r2
 8005c16:	461f      	mov	r7, r3
 8005c18:	688a      	ldr	r2, [r1, #8]
 8005c1a:	690b      	ldr	r3, [r1, #16]
 8005c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c20:	4293      	cmp	r3, r2
 8005c22:	bfb8      	it	lt
 8005c24:	4613      	movlt	r3, r2
 8005c26:	f8c9 3000 	str.w	r3, [r9]
 8005c2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c2e:	4606      	mov	r6, r0
 8005c30:	460c      	mov	r4, r1
 8005c32:	b112      	cbz	r2, 8005c3a <_printf_common+0x2a>
 8005c34:	3301      	adds	r3, #1
 8005c36:	f8c9 3000 	str.w	r3, [r9]
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	0699      	lsls	r1, r3, #26
 8005c3e:	bf42      	ittt	mi
 8005c40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c44:	3302      	addmi	r3, #2
 8005c46:	f8c9 3000 	strmi.w	r3, [r9]
 8005c4a:	6825      	ldr	r5, [r4, #0]
 8005c4c:	f015 0506 	ands.w	r5, r5, #6
 8005c50:	d107      	bne.n	8005c62 <_printf_common+0x52>
 8005c52:	f104 0a19 	add.w	sl, r4, #25
 8005c56:	68e3      	ldr	r3, [r4, #12]
 8005c58:	f8d9 2000 	ldr.w	r2, [r9]
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	42ab      	cmp	r3, r5
 8005c60:	dc28      	bgt.n	8005cb4 <_printf_common+0xa4>
 8005c62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c66:	6822      	ldr	r2, [r4, #0]
 8005c68:	3300      	adds	r3, #0
 8005c6a:	bf18      	it	ne
 8005c6c:	2301      	movne	r3, #1
 8005c6e:	0692      	lsls	r2, r2, #26
 8005c70:	d42d      	bmi.n	8005cce <_printf_common+0xbe>
 8005c72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c76:	4639      	mov	r1, r7
 8005c78:	4630      	mov	r0, r6
 8005c7a:	47c0      	blx	r8
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d020      	beq.n	8005cc2 <_printf_common+0xb2>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	68e5      	ldr	r5, [r4, #12]
 8005c84:	f8d9 2000 	ldr.w	r2, [r9]
 8005c88:	f003 0306 	and.w	r3, r3, #6
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	bf08      	it	eq
 8005c90:	1aad      	subeq	r5, r5, r2
 8005c92:	68a3      	ldr	r3, [r4, #8]
 8005c94:	6922      	ldr	r2, [r4, #16]
 8005c96:	bf0c      	ite	eq
 8005c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c9c:	2500      	movne	r5, #0
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	bfc4      	itt	gt
 8005ca2:	1a9b      	subgt	r3, r3, r2
 8005ca4:	18ed      	addgt	r5, r5, r3
 8005ca6:	f04f 0900 	mov.w	r9, #0
 8005caa:	341a      	adds	r4, #26
 8005cac:	454d      	cmp	r5, r9
 8005cae:	d11a      	bne.n	8005ce6 <_printf_common+0xd6>
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	e008      	b.n	8005cc6 <_printf_common+0xb6>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	4652      	mov	r2, sl
 8005cb8:	4639      	mov	r1, r7
 8005cba:	4630      	mov	r0, r6
 8005cbc:	47c0      	blx	r8
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d103      	bne.n	8005cca <_printf_common+0xba>
 8005cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cca:	3501      	adds	r5, #1
 8005ccc:	e7c3      	b.n	8005c56 <_printf_common+0x46>
 8005cce:	18e1      	adds	r1, r4, r3
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	2030      	movs	r0, #48	; 0x30
 8005cd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cd8:	4422      	add	r2, r4
 8005cda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ce2:	3302      	adds	r3, #2
 8005ce4:	e7c5      	b.n	8005c72 <_printf_common+0x62>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	4622      	mov	r2, r4
 8005cea:	4639      	mov	r1, r7
 8005cec:	4630      	mov	r0, r6
 8005cee:	47c0      	blx	r8
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d0e6      	beq.n	8005cc2 <_printf_common+0xb2>
 8005cf4:	f109 0901 	add.w	r9, r9, #1
 8005cf8:	e7d8      	b.n	8005cac <_printf_common+0x9c>
	...

08005cfc <_printf_i>:
 8005cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005d04:	460c      	mov	r4, r1
 8005d06:	7e09      	ldrb	r1, [r1, #24]
 8005d08:	b085      	sub	sp, #20
 8005d0a:	296e      	cmp	r1, #110	; 0x6e
 8005d0c:	4617      	mov	r7, r2
 8005d0e:	4606      	mov	r6, r0
 8005d10:	4698      	mov	r8, r3
 8005d12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d14:	f000 80b3 	beq.w	8005e7e <_printf_i+0x182>
 8005d18:	d822      	bhi.n	8005d60 <_printf_i+0x64>
 8005d1a:	2963      	cmp	r1, #99	; 0x63
 8005d1c:	d036      	beq.n	8005d8c <_printf_i+0x90>
 8005d1e:	d80a      	bhi.n	8005d36 <_printf_i+0x3a>
 8005d20:	2900      	cmp	r1, #0
 8005d22:	f000 80b9 	beq.w	8005e98 <_printf_i+0x19c>
 8005d26:	2958      	cmp	r1, #88	; 0x58
 8005d28:	f000 8083 	beq.w	8005e32 <_printf_i+0x136>
 8005d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d34:	e032      	b.n	8005d9c <_printf_i+0xa0>
 8005d36:	2964      	cmp	r1, #100	; 0x64
 8005d38:	d001      	beq.n	8005d3e <_printf_i+0x42>
 8005d3a:	2969      	cmp	r1, #105	; 0x69
 8005d3c:	d1f6      	bne.n	8005d2c <_printf_i+0x30>
 8005d3e:	6820      	ldr	r0, [r4, #0]
 8005d40:	6813      	ldr	r3, [r2, #0]
 8005d42:	0605      	lsls	r5, r0, #24
 8005d44:	f103 0104 	add.w	r1, r3, #4
 8005d48:	d52a      	bpl.n	8005da0 <_printf_i+0xa4>
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6011      	str	r1, [r2, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da03      	bge.n	8005d5a <_printf_i+0x5e>
 8005d52:	222d      	movs	r2, #45	; 0x2d
 8005d54:	425b      	negs	r3, r3
 8005d56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d5a:	486f      	ldr	r0, [pc, #444]	; (8005f18 <_printf_i+0x21c>)
 8005d5c:	220a      	movs	r2, #10
 8005d5e:	e039      	b.n	8005dd4 <_printf_i+0xd8>
 8005d60:	2973      	cmp	r1, #115	; 0x73
 8005d62:	f000 809d 	beq.w	8005ea0 <_printf_i+0x1a4>
 8005d66:	d808      	bhi.n	8005d7a <_printf_i+0x7e>
 8005d68:	296f      	cmp	r1, #111	; 0x6f
 8005d6a:	d020      	beq.n	8005dae <_printf_i+0xb2>
 8005d6c:	2970      	cmp	r1, #112	; 0x70
 8005d6e:	d1dd      	bne.n	8005d2c <_printf_i+0x30>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	f043 0320 	orr.w	r3, r3, #32
 8005d76:	6023      	str	r3, [r4, #0]
 8005d78:	e003      	b.n	8005d82 <_printf_i+0x86>
 8005d7a:	2975      	cmp	r1, #117	; 0x75
 8005d7c:	d017      	beq.n	8005dae <_printf_i+0xb2>
 8005d7e:	2978      	cmp	r1, #120	; 0x78
 8005d80:	d1d4      	bne.n	8005d2c <_printf_i+0x30>
 8005d82:	2378      	movs	r3, #120	; 0x78
 8005d84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d88:	4864      	ldr	r0, [pc, #400]	; (8005f1c <_printf_i+0x220>)
 8005d8a:	e055      	b.n	8005e38 <_printf_i+0x13c>
 8005d8c:	6813      	ldr	r3, [r2, #0]
 8005d8e:	1d19      	adds	r1, r3, #4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6011      	str	r1, [r2, #0]
 8005d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e08c      	b.n	8005eba <_printf_i+0x1be>
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6011      	str	r1, [r2, #0]
 8005da4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005da8:	bf18      	it	ne
 8005daa:	b21b      	sxthne	r3, r3
 8005dac:	e7cf      	b.n	8005d4e <_printf_i+0x52>
 8005dae:	6813      	ldr	r3, [r2, #0]
 8005db0:	6825      	ldr	r5, [r4, #0]
 8005db2:	1d18      	adds	r0, r3, #4
 8005db4:	6010      	str	r0, [r2, #0]
 8005db6:	0628      	lsls	r0, r5, #24
 8005db8:	d501      	bpl.n	8005dbe <_printf_i+0xc2>
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	e002      	b.n	8005dc4 <_printf_i+0xc8>
 8005dbe:	0668      	lsls	r0, r5, #25
 8005dc0:	d5fb      	bpl.n	8005dba <_printf_i+0xbe>
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	4854      	ldr	r0, [pc, #336]	; (8005f18 <_printf_i+0x21c>)
 8005dc6:	296f      	cmp	r1, #111	; 0x6f
 8005dc8:	bf14      	ite	ne
 8005dca:	220a      	movne	r2, #10
 8005dcc:	2208      	moveq	r2, #8
 8005dce:	2100      	movs	r1, #0
 8005dd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dd4:	6865      	ldr	r5, [r4, #4]
 8005dd6:	60a5      	str	r5, [r4, #8]
 8005dd8:	2d00      	cmp	r5, #0
 8005dda:	f2c0 8095 	blt.w	8005f08 <_printf_i+0x20c>
 8005dde:	6821      	ldr	r1, [r4, #0]
 8005de0:	f021 0104 	bic.w	r1, r1, #4
 8005de4:	6021      	str	r1, [r4, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d13d      	bne.n	8005e66 <_printf_i+0x16a>
 8005dea:	2d00      	cmp	r5, #0
 8005dec:	f040 808e 	bne.w	8005f0c <_printf_i+0x210>
 8005df0:	4665      	mov	r5, ip
 8005df2:	2a08      	cmp	r2, #8
 8005df4:	d10b      	bne.n	8005e0e <_printf_i+0x112>
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	07db      	lsls	r3, r3, #31
 8005dfa:	d508      	bpl.n	8005e0e <_printf_i+0x112>
 8005dfc:	6923      	ldr	r3, [r4, #16]
 8005dfe:	6862      	ldr	r2, [r4, #4]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	bfde      	ittt	le
 8005e04:	2330      	movle	r3, #48	; 0x30
 8005e06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e0e:	ebac 0305 	sub.w	r3, ip, r5
 8005e12:	6123      	str	r3, [r4, #16]
 8005e14:	f8cd 8000 	str.w	r8, [sp]
 8005e18:	463b      	mov	r3, r7
 8005e1a:	aa03      	add	r2, sp, #12
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f7ff fef6 	bl	8005c10 <_printf_common>
 8005e24:	3001      	adds	r0, #1
 8005e26:	d14d      	bne.n	8005ec4 <_printf_i+0x1c8>
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	b005      	add	sp, #20
 8005e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e32:	4839      	ldr	r0, [pc, #228]	; (8005f18 <_printf_i+0x21c>)
 8005e34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e38:	6813      	ldr	r3, [r2, #0]
 8005e3a:	6821      	ldr	r1, [r4, #0]
 8005e3c:	1d1d      	adds	r5, r3, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6015      	str	r5, [r2, #0]
 8005e42:	060a      	lsls	r2, r1, #24
 8005e44:	d50b      	bpl.n	8005e5e <_printf_i+0x162>
 8005e46:	07ca      	lsls	r2, r1, #31
 8005e48:	bf44      	itt	mi
 8005e4a:	f041 0120 	orrmi.w	r1, r1, #32
 8005e4e:	6021      	strmi	r1, [r4, #0]
 8005e50:	b91b      	cbnz	r3, 8005e5a <_printf_i+0x15e>
 8005e52:	6822      	ldr	r2, [r4, #0]
 8005e54:	f022 0220 	bic.w	r2, r2, #32
 8005e58:	6022      	str	r2, [r4, #0]
 8005e5a:	2210      	movs	r2, #16
 8005e5c:	e7b7      	b.n	8005dce <_printf_i+0xd2>
 8005e5e:	064d      	lsls	r5, r1, #25
 8005e60:	bf48      	it	mi
 8005e62:	b29b      	uxthmi	r3, r3
 8005e64:	e7ef      	b.n	8005e46 <_printf_i+0x14a>
 8005e66:	4665      	mov	r5, ip
 8005e68:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e6c:	fb02 3311 	mls	r3, r2, r1, r3
 8005e70:	5cc3      	ldrb	r3, [r0, r3]
 8005e72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e76:	460b      	mov	r3, r1
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	d1f5      	bne.n	8005e68 <_printf_i+0x16c>
 8005e7c:	e7b9      	b.n	8005df2 <_printf_i+0xf6>
 8005e7e:	6813      	ldr	r3, [r2, #0]
 8005e80:	6825      	ldr	r5, [r4, #0]
 8005e82:	6961      	ldr	r1, [r4, #20]
 8005e84:	1d18      	adds	r0, r3, #4
 8005e86:	6010      	str	r0, [r2, #0]
 8005e88:	0628      	lsls	r0, r5, #24
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	d501      	bpl.n	8005e92 <_printf_i+0x196>
 8005e8e:	6019      	str	r1, [r3, #0]
 8005e90:	e002      	b.n	8005e98 <_printf_i+0x19c>
 8005e92:	066a      	lsls	r2, r5, #25
 8005e94:	d5fb      	bpl.n	8005e8e <_printf_i+0x192>
 8005e96:	8019      	strh	r1, [r3, #0]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	6123      	str	r3, [r4, #16]
 8005e9c:	4665      	mov	r5, ip
 8005e9e:	e7b9      	b.n	8005e14 <_printf_i+0x118>
 8005ea0:	6813      	ldr	r3, [r2, #0]
 8005ea2:	1d19      	adds	r1, r3, #4
 8005ea4:	6011      	str	r1, [r2, #0]
 8005ea6:	681d      	ldr	r5, [r3, #0]
 8005ea8:	6862      	ldr	r2, [r4, #4]
 8005eaa:	2100      	movs	r1, #0
 8005eac:	4628      	mov	r0, r5
 8005eae:	f7fa f9b7 	bl	8000220 <memchr>
 8005eb2:	b108      	cbz	r0, 8005eb8 <_printf_i+0x1bc>
 8005eb4:	1b40      	subs	r0, r0, r5
 8005eb6:	6060      	str	r0, [r4, #4]
 8005eb8:	6863      	ldr	r3, [r4, #4]
 8005eba:	6123      	str	r3, [r4, #16]
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec2:	e7a7      	b.n	8005e14 <_printf_i+0x118>
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	462a      	mov	r2, r5
 8005ec8:	4639      	mov	r1, r7
 8005eca:	4630      	mov	r0, r6
 8005ecc:	47c0      	blx	r8
 8005ece:	3001      	adds	r0, #1
 8005ed0:	d0aa      	beq.n	8005e28 <_printf_i+0x12c>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	079b      	lsls	r3, r3, #30
 8005ed6:	d413      	bmi.n	8005f00 <_printf_i+0x204>
 8005ed8:	68e0      	ldr	r0, [r4, #12]
 8005eda:	9b03      	ldr	r3, [sp, #12]
 8005edc:	4298      	cmp	r0, r3
 8005ede:	bfb8      	it	lt
 8005ee0:	4618      	movlt	r0, r3
 8005ee2:	e7a3      	b.n	8005e2c <_printf_i+0x130>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	464a      	mov	r2, r9
 8005ee8:	4639      	mov	r1, r7
 8005eea:	4630      	mov	r0, r6
 8005eec:	47c0      	blx	r8
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d09a      	beq.n	8005e28 <_printf_i+0x12c>
 8005ef2:	3501      	adds	r5, #1
 8005ef4:	68e3      	ldr	r3, [r4, #12]
 8005ef6:	9a03      	ldr	r2, [sp, #12]
 8005ef8:	1a9b      	subs	r3, r3, r2
 8005efa:	42ab      	cmp	r3, r5
 8005efc:	dcf2      	bgt.n	8005ee4 <_printf_i+0x1e8>
 8005efe:	e7eb      	b.n	8005ed8 <_printf_i+0x1dc>
 8005f00:	2500      	movs	r5, #0
 8005f02:	f104 0919 	add.w	r9, r4, #25
 8005f06:	e7f5      	b.n	8005ef4 <_printf_i+0x1f8>
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1ac      	bne.n	8005e66 <_printf_i+0x16a>
 8005f0c:	7803      	ldrb	r3, [r0, #0]
 8005f0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f16:	e76c      	b.n	8005df2 <_printf_i+0xf6>
 8005f18:	080075f1 	.word	0x080075f1
 8005f1c:	08007602 	.word	0x08007602

08005f20 <memmove>:
 8005f20:	4288      	cmp	r0, r1
 8005f22:	b510      	push	{r4, lr}
 8005f24:	eb01 0302 	add.w	r3, r1, r2
 8005f28:	d807      	bhi.n	8005f3a <memmove+0x1a>
 8005f2a:	1e42      	subs	r2, r0, #1
 8005f2c:	4299      	cmp	r1, r3
 8005f2e:	d00a      	beq.n	8005f46 <memmove+0x26>
 8005f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f34:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005f38:	e7f8      	b.n	8005f2c <memmove+0xc>
 8005f3a:	4283      	cmp	r3, r0
 8005f3c:	d9f5      	bls.n	8005f2a <memmove+0xa>
 8005f3e:	1881      	adds	r1, r0, r2
 8005f40:	1ad2      	subs	r2, r2, r3
 8005f42:	42d3      	cmn	r3, r2
 8005f44:	d100      	bne.n	8005f48 <memmove+0x28>
 8005f46:	bd10      	pop	{r4, pc}
 8005f48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005f50:	e7f7      	b.n	8005f42 <memmove+0x22>
	...

08005f54 <_free_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	4605      	mov	r5, r0
 8005f58:	2900      	cmp	r1, #0
 8005f5a:	d045      	beq.n	8005fe8 <_free_r+0x94>
 8005f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f60:	1f0c      	subs	r4, r1, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bfb8      	it	lt
 8005f66:	18e4      	addlt	r4, r4, r3
 8005f68:	f000 f8d2 	bl	8006110 <__malloc_lock>
 8005f6c:	4a1f      	ldr	r2, [pc, #124]	; (8005fec <_free_r+0x98>)
 8005f6e:	6813      	ldr	r3, [r2, #0]
 8005f70:	4610      	mov	r0, r2
 8005f72:	b933      	cbnz	r3, 8005f82 <_free_r+0x2e>
 8005f74:	6063      	str	r3, [r4, #4]
 8005f76:	6014      	str	r4, [r2, #0]
 8005f78:	4628      	mov	r0, r5
 8005f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f7e:	f000 b8c8 	b.w	8006112 <__malloc_unlock>
 8005f82:	42a3      	cmp	r3, r4
 8005f84:	d90c      	bls.n	8005fa0 <_free_r+0x4c>
 8005f86:	6821      	ldr	r1, [r4, #0]
 8005f88:	1862      	adds	r2, r4, r1
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	bf04      	itt	eq
 8005f8e:	681a      	ldreq	r2, [r3, #0]
 8005f90:	685b      	ldreq	r3, [r3, #4]
 8005f92:	6063      	str	r3, [r4, #4]
 8005f94:	bf04      	itt	eq
 8005f96:	1852      	addeq	r2, r2, r1
 8005f98:	6022      	streq	r2, [r4, #0]
 8005f9a:	6004      	str	r4, [r0, #0]
 8005f9c:	e7ec      	b.n	8005f78 <_free_r+0x24>
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	b10a      	cbz	r2, 8005fa8 <_free_r+0x54>
 8005fa4:	42a2      	cmp	r2, r4
 8005fa6:	d9fa      	bls.n	8005f9e <_free_r+0x4a>
 8005fa8:	6819      	ldr	r1, [r3, #0]
 8005faa:	1858      	adds	r0, r3, r1
 8005fac:	42a0      	cmp	r0, r4
 8005fae:	d10b      	bne.n	8005fc8 <_free_r+0x74>
 8005fb0:	6820      	ldr	r0, [r4, #0]
 8005fb2:	4401      	add	r1, r0
 8005fb4:	1858      	adds	r0, r3, r1
 8005fb6:	4282      	cmp	r2, r0
 8005fb8:	6019      	str	r1, [r3, #0]
 8005fba:	d1dd      	bne.n	8005f78 <_free_r+0x24>
 8005fbc:	6810      	ldr	r0, [r2, #0]
 8005fbe:	6852      	ldr	r2, [r2, #4]
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	4401      	add	r1, r0
 8005fc4:	6019      	str	r1, [r3, #0]
 8005fc6:	e7d7      	b.n	8005f78 <_free_r+0x24>
 8005fc8:	d902      	bls.n	8005fd0 <_free_r+0x7c>
 8005fca:	230c      	movs	r3, #12
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	e7d3      	b.n	8005f78 <_free_r+0x24>
 8005fd0:	6820      	ldr	r0, [r4, #0]
 8005fd2:	1821      	adds	r1, r4, r0
 8005fd4:	428a      	cmp	r2, r1
 8005fd6:	bf04      	itt	eq
 8005fd8:	6811      	ldreq	r1, [r2, #0]
 8005fda:	6852      	ldreq	r2, [r2, #4]
 8005fdc:	6062      	str	r2, [r4, #4]
 8005fde:	bf04      	itt	eq
 8005fe0:	1809      	addeq	r1, r1, r0
 8005fe2:	6021      	streq	r1, [r4, #0]
 8005fe4:	605c      	str	r4, [r3, #4]
 8005fe6:	e7c7      	b.n	8005f78 <_free_r+0x24>
 8005fe8:	bd38      	pop	{r3, r4, r5, pc}
 8005fea:	bf00      	nop
 8005fec:	200045d4 	.word	0x200045d4

08005ff0 <_malloc_r>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	1ccd      	adds	r5, r1, #3
 8005ff4:	f025 0503 	bic.w	r5, r5, #3
 8005ff8:	3508      	adds	r5, #8
 8005ffa:	2d0c      	cmp	r5, #12
 8005ffc:	bf38      	it	cc
 8005ffe:	250c      	movcc	r5, #12
 8006000:	2d00      	cmp	r5, #0
 8006002:	4606      	mov	r6, r0
 8006004:	db01      	blt.n	800600a <_malloc_r+0x1a>
 8006006:	42a9      	cmp	r1, r5
 8006008:	d903      	bls.n	8006012 <_malloc_r+0x22>
 800600a:	230c      	movs	r3, #12
 800600c:	6033      	str	r3, [r6, #0]
 800600e:	2000      	movs	r0, #0
 8006010:	bd70      	pop	{r4, r5, r6, pc}
 8006012:	f000 f87d 	bl	8006110 <__malloc_lock>
 8006016:	4a21      	ldr	r2, [pc, #132]	; (800609c <_malloc_r+0xac>)
 8006018:	6814      	ldr	r4, [r2, #0]
 800601a:	4621      	mov	r1, r4
 800601c:	b991      	cbnz	r1, 8006044 <_malloc_r+0x54>
 800601e:	4c20      	ldr	r4, [pc, #128]	; (80060a0 <_malloc_r+0xb0>)
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	b91b      	cbnz	r3, 800602c <_malloc_r+0x3c>
 8006024:	4630      	mov	r0, r6
 8006026:	f000 f863 	bl	80060f0 <_sbrk_r>
 800602a:	6020      	str	r0, [r4, #0]
 800602c:	4629      	mov	r1, r5
 800602e:	4630      	mov	r0, r6
 8006030:	f000 f85e 	bl	80060f0 <_sbrk_r>
 8006034:	1c43      	adds	r3, r0, #1
 8006036:	d124      	bne.n	8006082 <_malloc_r+0x92>
 8006038:	230c      	movs	r3, #12
 800603a:	6033      	str	r3, [r6, #0]
 800603c:	4630      	mov	r0, r6
 800603e:	f000 f868 	bl	8006112 <__malloc_unlock>
 8006042:	e7e4      	b.n	800600e <_malloc_r+0x1e>
 8006044:	680b      	ldr	r3, [r1, #0]
 8006046:	1b5b      	subs	r3, r3, r5
 8006048:	d418      	bmi.n	800607c <_malloc_r+0x8c>
 800604a:	2b0b      	cmp	r3, #11
 800604c:	d90f      	bls.n	800606e <_malloc_r+0x7e>
 800604e:	600b      	str	r3, [r1, #0]
 8006050:	50cd      	str	r5, [r1, r3]
 8006052:	18cc      	adds	r4, r1, r3
 8006054:	4630      	mov	r0, r6
 8006056:	f000 f85c 	bl	8006112 <__malloc_unlock>
 800605a:	f104 000b 	add.w	r0, r4, #11
 800605e:	1d23      	adds	r3, r4, #4
 8006060:	f020 0007 	bic.w	r0, r0, #7
 8006064:	1ac3      	subs	r3, r0, r3
 8006066:	d0d3      	beq.n	8006010 <_malloc_r+0x20>
 8006068:	425a      	negs	r2, r3
 800606a:	50e2      	str	r2, [r4, r3]
 800606c:	e7d0      	b.n	8006010 <_malloc_r+0x20>
 800606e:	428c      	cmp	r4, r1
 8006070:	684b      	ldr	r3, [r1, #4]
 8006072:	bf16      	itet	ne
 8006074:	6063      	strne	r3, [r4, #4]
 8006076:	6013      	streq	r3, [r2, #0]
 8006078:	460c      	movne	r4, r1
 800607a:	e7eb      	b.n	8006054 <_malloc_r+0x64>
 800607c:	460c      	mov	r4, r1
 800607e:	6849      	ldr	r1, [r1, #4]
 8006080:	e7cc      	b.n	800601c <_malloc_r+0x2c>
 8006082:	1cc4      	adds	r4, r0, #3
 8006084:	f024 0403 	bic.w	r4, r4, #3
 8006088:	42a0      	cmp	r0, r4
 800608a:	d005      	beq.n	8006098 <_malloc_r+0xa8>
 800608c:	1a21      	subs	r1, r4, r0
 800608e:	4630      	mov	r0, r6
 8006090:	f000 f82e 	bl	80060f0 <_sbrk_r>
 8006094:	3001      	adds	r0, #1
 8006096:	d0cf      	beq.n	8006038 <_malloc_r+0x48>
 8006098:	6025      	str	r5, [r4, #0]
 800609a:	e7db      	b.n	8006054 <_malloc_r+0x64>
 800609c:	200045d4 	.word	0x200045d4
 80060a0:	200045d8 	.word	0x200045d8

080060a4 <_realloc_r>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	4607      	mov	r7, r0
 80060a8:	4614      	mov	r4, r2
 80060aa:	460e      	mov	r6, r1
 80060ac:	b921      	cbnz	r1, 80060b8 <_realloc_r+0x14>
 80060ae:	4611      	mov	r1, r2
 80060b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80060b4:	f7ff bf9c 	b.w	8005ff0 <_malloc_r>
 80060b8:	b922      	cbnz	r2, 80060c4 <_realloc_r+0x20>
 80060ba:	f7ff ff4b 	bl	8005f54 <_free_r>
 80060be:	4625      	mov	r5, r4
 80060c0:	4628      	mov	r0, r5
 80060c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060c4:	f000 f826 	bl	8006114 <_malloc_usable_size_r>
 80060c8:	42a0      	cmp	r0, r4
 80060ca:	d20f      	bcs.n	80060ec <_realloc_r+0x48>
 80060cc:	4621      	mov	r1, r4
 80060ce:	4638      	mov	r0, r7
 80060d0:	f7ff ff8e 	bl	8005ff0 <_malloc_r>
 80060d4:	4605      	mov	r5, r0
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d0f2      	beq.n	80060c0 <_realloc_r+0x1c>
 80060da:	4631      	mov	r1, r6
 80060dc:	4622      	mov	r2, r4
 80060de:	f7ff fc11 	bl	8005904 <memcpy>
 80060e2:	4631      	mov	r1, r6
 80060e4:	4638      	mov	r0, r7
 80060e6:	f7ff ff35 	bl	8005f54 <_free_r>
 80060ea:	e7e9      	b.n	80060c0 <_realloc_r+0x1c>
 80060ec:	4635      	mov	r5, r6
 80060ee:	e7e7      	b.n	80060c0 <_realloc_r+0x1c>

080060f0 <_sbrk_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4c06      	ldr	r4, [pc, #24]	; (800610c <_sbrk_r+0x1c>)
 80060f4:	2300      	movs	r3, #0
 80060f6:	4605      	mov	r5, r0
 80060f8:	4608      	mov	r0, r1
 80060fa:	6023      	str	r3, [r4, #0]
 80060fc:	f7fa fd0a 	bl	8000b14 <_sbrk>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_sbrk_r+0x1a>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	b103      	cbz	r3, 800610a <_sbrk_r+0x1a>
 8006108:	602b      	str	r3, [r5, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	20005f80 	.word	0x20005f80

08006110 <__malloc_lock>:
 8006110:	4770      	bx	lr

08006112 <__malloc_unlock>:
 8006112:	4770      	bx	lr

08006114 <_malloc_usable_size_r>:
 8006114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006118:	1f18      	subs	r0, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	bfbc      	itt	lt
 800611e:	580b      	ldrlt	r3, [r1, r0]
 8006120:	18c0      	addlt	r0, r0, r3
 8006122:	4770      	bx	lr

08006124 <_init>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	bf00      	nop
 8006128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612a:	bc08      	pop	{r3}
 800612c:	469e      	mov	lr, r3
 800612e:	4770      	bx	lr

08006130 <_fini>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	bf00      	nop
 8006134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006136:	bc08      	pop	{r3}
 8006138:	469e      	mov	lr, r3
 800613a:	4770      	bx	lr
